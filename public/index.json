[{"categories":["Projects"],"content":"Roberto started a new side blog and here are all the details about it","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"What are Tactical Analytics? A type of user-oriented game analytics, with the purpose to ‚Äúaim to inform game design at the short-term, for example, an A/B test of a new game feature‚Äù (A. Dranchen, 2013). The applicability of statistics in new fields can be considered as one of the greatest advances for humanity. Nowadays, human-machine interactions are being monitored, in a good way in most cases. The main purpose is not just to increase the companies revenue, one of the main objectives is to give a benefit in terms of User Experience (UX) and Engagement, and this can be covered using Data Science. Looking for an interactive experience? üöÄ Use or Download the Jupyter Notebook, available here ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:1:0","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"Telemetry systems introduction All this data is being collected through telemetry systems, according to Anders Drachen et al. (one of the pioneers in the Game Analytics field), from an interview made to Georg Zoeller of Ubisoft Singapore, the Game industry manages two kinds of telemetry systems: Developer-facing: ‚ÄúThe main goal of the system is to facilitate and improve the production process, gathering and presenting information about how developers and testers interact with the unfinished game‚Äù. Like the one mentioned in Chapter 7 of the ‚ÄúGame Analytics Maximizing the Value of Player Data‚Äù book, which was implemented in Bioware‚Äôs production process of Dragon Age: Origins in 2009. User-facing: This one is ‚Äúcollected after a game is launched and mainly aimed at tracking, analyzing, and visualizing player behavior‚Äù mentioned in Chapters 4, 5, and 6 of the same book. ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:2:0","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"About the data collected Given the introduction of the telemetry systems, in this case, we are going to see a ‚ÄúUser-facing‚Äù that provided us data from Cookie Cats game, a mobile puzzle game of ‚Äúconnect-three‚Äù-style developed by Tactile Entertainment. To be in context, this game‚Äôs main objective is to align 3 cookies of the same kind to feed a cat, and by this way finish each level. Which also as collectible credit you can earn Keys to unlock gates located at certain levels. ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:3:0","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"Problem context According to Rasmus Baath, Data Science Lead at castle.io, Tactile Entertainment is planning to move Cookie Cats' time gates from level 30 to 40, but they don‚Äôt know how much the user retention can be impacted by this decision. This sort of time gate is usually seen in free-to-play models, and normally contains ads that can be skipped in exchange for in-game purchases, or in this case the player requires to submit a specific number of ‚ÄòKeys‚Äô, which also can be skipped in exchange of in-game purchases. So seeing this viewpoint, a decision like this can impact not only user retention, the expected revenue as well. ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:4:0","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"About the dataset This dataset contains around 90,189 records of players that started the game while the telemetry system was running, according to Rasmus Baath. Among the variables collected are the next: userid : unique identification of the user. version : the group in which the players were measured, for a time gate at level 30 it contains a string called gate_30, or for a time gate at level 40 it contains a string called gate_40. sum_gamerounds : number of game rounds played within the first 14 days since the first session played. retention_1 : Boolean that defines if the player came back 1 day after the installation. retention_7 : Boolean that defines if the player came back 7 days after the installation. Note: An important fact to keep in mind is that in the game industry one crucial metric is retention_1, since it defines if the game is fulfilling and entertaining the final consumer. # Importing pandas import pandas as pd # Reading in the data df = pd.read_csv('datasets/cookie_cats.csv') # Showing the first few rows df.head() ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:5:0","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"Methodology The most accurate way to test changes is to perform A/B testing by targetting a specific variable, in the case retention (for 1 and 7 days after installation). As we mentioned before, we have two groups in the version variable: Control group: The time gate is located at level 30. We are going to consider this one as a no-treatment group. Treatment group: The company plans to move the time gate to level 40. We are going to use this as a subject of study, due to the change involved. In an advanced stage, we are going to perform a bootstrapping technique, to be confident about the result comparison for the retention probabilities between groups. # Counting the number of players in each AB group. players_g30 = df[df['version'] == 'gate_30'] players_g40 = df[df['version'] == 'gate_40'] print('Number of players tested at Gate 30:', str(players_g30.shape[0]), '\\n', 'Number of players tested at Gate 40:', str(players_g40.shape[0])) Number of players tested at Gate 30: 44700 Number of players tested at Gate 40: 45489 ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:6:0","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"Exploring distribution As we see the proportion of players sampled for each group is balanced, so for now, only exploring the Game Rounds data is in the queue. Let‚Äôs see the distribution of Game Rounds (The plotly layout created is available in the Jupyter Notebook). import matplotlib.pyplot as plt %matplotlib inline import plotly.express as px # Author template author = \"Published at \u003ca href='https://www.robguilar.com'\u003erobguilar\u0026#8482;\u003c/a\u003e\u003cbr\u003eMade by: R. Aguilar, 2022\" heightimg = 720 widthimg = 1000 fontimg = 13 colorfont= \"#636363\" # Distribution Boxplot with outliers box1 = px.box(df, x=\"sum_gamerounds\", title = \"Game Rounds Overall Distribution by player\", labels = {\"sum_gamerounds\":\"Game Rounds registered\"}) box1.update_layout(layout) box1.show() For now, we see that exist clear outliers in the dataset since one user has recorded 49,854 Game rounds played in less than 14 days, meanwhile, the max recorded, excluding the outlier, is around 2,900. The only response to this case situation is a ‚Äúbot‚Äù, a ‚Äúbug‚Äù or a ‚Äúglitch‚Äù. Nevertheless, it‚Äôs preferable to clean it, since only affected one record. Let‚Äôs prune it. df = df[df['sum_gamerounds'] != 49854] We can make an Empirical Cumulative Distribution Function, to see the real distribution of our data. Note: In this case, we won‚Äôt use histograms to avoid some bining bias. import plotly.graph_objects as go # Import numpy library import numpy as np # ECDF Generator function def ecdf(data): # Generate ECDF (Empirical Cumulative Distribution Function) # for on dimension arrays n = len(data) # X axis data x = np.sort(data) # Y axis data y = np.arange(1, n+1) / n return x, y # Generate ECDF data x_rounds, y_rounds = ecdf(df['sum_gamerounds']) # Generate percentile makers percentiles = np.array([5,25,50,75,95]) ptiles = np.percentile(df['sum_gamerounds'], percentiles) # ECDF plot ecdf = go.Figure() # Add traces ecdf.add_trace(go.Scatter(x=x_rounds, y=y_rounds, mode='markers', name='Game Rounds')) ecdf.add_trace(go.Scatter(x=ptiles, y=percentiles/100, mode='markers+text', name='Percentiles', marker_line_width=2, marker_size=10, text=percentiles, textposition=\"bottom right\")) ecdf.update_layout(layout) ecdf.update_layout(title='Game Rounds Cumulative Distribution Plot', yaxis_title=\"Cumulative Probability\") ecdf.show() As we see 95% of our data is below 500 Game Rounds. print(\"The 95 percentile of the data is at: \", ptiles[4], \"Game Rounds\",\"\\n\", \"This means \", df[df[\"sum_gamerounds\"] \u003c= ptiles[4]].shape[0], \" players\") The 95 percentile of the data is at: 221.0 Game Rounds This means 85706 players For us, this can be considered a valuable sample. In the plot above, we saw some players that installed the game but, then never return (0 game rounds). print(\"Players inactive since installation: \", df[df[\"sum_gamerounds\"] == 0].shape[0]) Players inactive since installation: 3994 And in most cases, players just play a couple of game rounds in their first two weeks. But, we are looking for players that like the game and to get hooked, that‚Äôs one of our interests. A common metric in the video gaming industry for how fun and engaging a game is 1-day retention as we mentioned before. Before proceeding let‚Äôs make it clear. ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:7:0","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"What is retention and, why is soo important? Retention is the percentage of players that come back and plays the game one day after they have installed it. The higher 1-day retention is, the easier it is to retain players and build a large player base. According to Anders Drachen et al. (2013), these customer kind metrics ‚Äúare notably interesting to professionals working with marketing and management of games and game development‚Äù, also this metric is described simply as ‚Äúhow sticky the game is‚Äù, in other words, it‚Äôs essential. As a first step, let‚Äôs look at what 1-day retention is overall. # The % of users that came back the day after they installed prop = len(df[df['retention_1'] == True]) / len(df['retention_1']) * 100 print(\"The overall retention for 1 day is: \", str(round(prop,2)),\"%\") The overall retention for 1 day is: 44.52 % Less than half of the players come back one day after installing the game. Now that we have a benchmark, let‚Äôs look at how 1-day retention differs between the two AB groups. ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:7:1","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"1-day retention by A/B Group Computing the retention individually, we have the next results. # Calculating 1-day retention for each AB-group # CONTROL GROUP prop_gate30 = len(players_g30[players_g30['retention_1'] == True])/len(players_g30['retention_1']) * 100 # TREATMENT GROUP prop_gate40 = len(players_g40[players_g40['retention_1'] == True])/len(players_g40['retention_1']) * 100 print('Group 30 at 1 day retention: ',str(round(prop_gate30,2)),\"%\",\"\\n\", 'Group 40 at 1 day retention: ',str(round(prop_gate40,2)),\"%\") Group 30 at 1 day retention: 44.82 % Group 40 at 1 day retention: 44.23 % It appears that there was a slight decrease in 1-day retention when the gate was moved to level 40 (44.23%) compared to the control when it was at level 30 (44.82%). It‚Äôs a smallish change, but even small changes in retention can have a huge impact. While we are sure of the difference in the data, how confident should we be that a gate at level 40 will be more threatening in the future? For this reason, it‚Äôs important to consider bootstrapping techniques, this means ‚Äúa sampling with replacement from observed data to estimate the variability in a statistic of interest‚Äù. In this case, retention, and we are going to do a function for that. # Bootstrapping Function def draw_bs_reps(data,func,iterations=1): boot_Xd = [] for i in range(iterations): boot_Xd.append(func(data = np.random.choice(data, len(data)))) return boot_Xd # Retention Function def retention(data): ret = len(data[data == True])/len(data) return ret ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:8:0","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"Control Group Bootstrapping # Bootstrapping for gate 30 btg30_1d = draw_bs_reps(players_g30['retention_1'], retention, iterations = 1000) ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:8:1","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"Treatment Group Bootstrapping # Bootstrapping for gate 40 btg40_1d = draw_bs_reps(players_g40['retention_1'], retention, iterations = 1000) Now, let‚Äôs check the results. import plotly.figure_factory as ff mean_g40 = np.mean(btg40_1d) mean_g30 = np.mean(btg30_1d) # A Kernel Density Estimate plot of the bootstrap distributions boot_1d = pd.DataFrame(data = {'gate_30':btg30_1d, 'gate_40':btg40_1d}, index = range(1000)) # Plotting histogram hist_1d = [boot_1d.gate_30, boot_1d.gate_40] dist_1d = ff.create_distplot(hist_1d, group_labels=[\"Gate 30 (Control)\", \"Gate 40 (Treatment)\"], show_rug=False, colors = ['#3498DB','#28B463']) dist_1d.add_vline(x=mean_g40, line_width=3, line_dash=\"dash\", line_color=\"#28B463\") dist_1d.add_vline(x=mean_g30, line_width=3, line_dash=\"dash\", line_color=\"#3498DB\") dist_1d.add_vrect(x0=mean_g30, x1=mean_g40, line_width=0, fillcolor=\"#F1C40F\", opacity=0.2) dist_1d.update_layout(layout) dist_1d.update_layout(xaxis_range=[0.43,0.46]) dist_1d.update_layout(title='1-Day Retention Bootstrapping by A/B Group', xaxis_title=\"Retention\") dist_1d.show() The difference still looking close, for this reason, is preferable to zoom it by plotting the difference as an individual measure. # Adding a column with the % difference between the two AB-groups boot_1d['diff'] = ( ((boot_1d['gate_30'] - boot_1d['gate_40']) / boot_1d['gate_40']) * 100 ) # Ploting the bootstrap % difference hist_1d_diff = [boot_1d['diff']] dist_1d_diff = ff.create_distplot(hist_1d_diff, show_rug=False, colors = ['#F1C40F'], group_labels = [\"Gate 30 - Gate 40\"], show_hist=False) dist_1d_diff.add_vline(x= np.mean(boot_1d['diff']), line_width=3, line_dash=\"dash\", line_color=\"black\") dist_1d_diff.update_layout(layout) dist_1d_diff.update_layout(xaxis_range=[-3,6]) dist_1d_diff.update_layout(title='Percentage of \"1 day retention\" difference between A/B Groups', xaxis_title=\"% Difference\") dist_1d_diff.show() From this chart, we can see that the percentual difference is around 1% - 2%, and that most of the distribution is above 0%, in favor of a gate at level 30. But, what is the probability that the difference is above 0%? Let‚Äôs calculate that as well. # Calculating the probability that 1-day retention is greater when the gate is at level 30 prob = (boot_1d['diff'] \u003e 0.0).sum() / len(boot_1d['diff']) # Pretty printing the probability print('The probabilty of Group 30 (Control) having a higher \\nretention than Group 40 (Treatment) is: ', prob*100, '%') The probabilty of Group 30 (Control) having a higher retention than Group 40 (Treatment) is: 96.39999999999999 % ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:8:2","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"7-day retention by A/B Group The bootstrap analysis tells us that there is a high probability that 1-day retention is better when the time gate is at level 30. However, since players have only been playing the game for one day, likely, most players haven‚Äôt reached level 30 yet. That is, many players won‚Äôt have been affected by the gate, even if it‚Äôs as early as level 30. But after having played for a week, more players should have reached level 40, and therefore it makes sense to also look at 7-day retention. That is: What percentage of the people that installed the game also showed up a week later to play the game again? Let‚Äôs start by calculating 7-day retention for the two AB groups. # Calculating 7-day retention for both AB-groups ret30_7d = len(players_g30[players_g30['retention_7'] == True])/len(players_g30['retention_7']) * 100 ret40_7d = len(players_g40[players_g40['retention_7'] == True])/len(players_g40['retention_7']) * 100 print('Group 30 at 7 day retention: ',str(round(ret30_7d,2)),\"%\",\"\\n\", 'Group 40 at 7 day retention: ',str(round(ret40_7d,2)),\"%\") Group 30 at 7 day retention: 19.02 % Group 40 at 7 day retention: 18.2 % Like with 1-day retention, we see that 7-day retention is barely lower (18.20%) when the gate is at level 40 than when the time gate is at level 30 (19.02%). This difference is also larger than for 1-day retention. We also see that the overall 7-day retention is lower than the overall 1-day retention; fewer people play a game a week than a day after installing. But as before, let‚Äôs use bootstrap analysis to figure out how sure we can be of the difference between the AB-groups. ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:9:0","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"Control \u0026 Treatment Group Bootstrapping # Creating a list with bootstrapped means for each AB-group # Bootstrapping for CONTROL group btg30_7d = draw_bs_reps(players_g30['retention_7'], retention, iterations = 500) # Bootstrapping for TREATMENT group btg40_7d = draw_bs_reps(players_g40['retention_7'], retention, iterations = 500) boot_7d = pd.DataFrame(data = {'gate_30':btg30_7d, 'gate_40':btg40_7d}, index = range(500)) # Adding a column with the % difference between the two AB-groups boot_7d['diff'] = (boot_7d['gate_30'] - boot_7d['gate_40']) / boot_7d['gate_30'] * 100 # Ploting the bootstrap % difference hist_7d_diff = [boot_7d['diff']] dist_7d_diff = ff.create_distplot(hist_7d_diff, show_rug=False, colors = ['#FF5733'], group_labels = [\"Gate 30 - Gate 40\"], show_hist=False) dist_7d_diff.add_vline(x= np.mean(boot_7d['diff']), line_width=3, line_dash=\"dash\", line_color=\"black\") dist_7d_diff.update_layout(layout) dist_7d_diff.update_layout(xaxis_range=[-4,12]) dist_7d_diff.update_layout(title='Percentage of \"7 day retention\" difference between A/B Groups', xaxis_title=\"% Difference\") dist_7d_diff.show() # Calculating the probability that 7-day retention is greater when the gate is at level 30 prob = (boot_7d['diff'] \u003e 0).sum() / len(boot_7d) # Pretty printing the probability print('The probabilty of Group 30 (Control) having a higher \\nretention than Group 40 (Treatment) is: ~', prob*100, '%') The probabilty of Group 30 (Control) having a higher retention than Group 40 (Treatment) is: ~ 100.0 % ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:9:1","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"Final thoughts Now we have enough statistical evidence to say that 7-day retention is higher when the gate is at level 30 than when it is at level 40, the same as we concluded for 1-day retention. If we want to keep retention high, we should not move the gate from level 30 to level 40, it means we keep our Control method in the current gate system. Far beyond, there are other metrics we could look at in the future, like: The number of game rounds played Daily active users In-game purchases estimates The cost of the customer acquisition As we underlined retention is crucial, because if we don‚Äôt retain our player base, it doesn‚Äôt matter how much money they spend in-game purchases. So, why is retention higher when the gate is positioned earlier? Normally, we could expect the opposite: The later the obstacle, the longer people get engaged with the game. But this is not what the data tells us. According to Rasmus Baath, there is an explanation for this phenomenon and it‚Äôs called, the theory of hedonic adaptation, which is ‚Äúthe tendency for people to get less and less enjoyment out of a fun activity over time if that activity is undertaken continuously‚Äù. So, by pushing players to take a break when they reach a gate, the fun of the game is postponed. But, when the gate is moved to level 40, they are more likely to quit the game because they simply got bored of it. ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:10:0","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"Aditional Information ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:11:0","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"About the Article With acknowledgment to Rasmus Baraath for guiding this project. Which was developed for sharing knowledge while using cited sources of the material used. Thanks to you for reading as well. ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:11:1","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"Related content For more content related to the authors mentioned, I invite you to visit the next sources: Anders Drachen personal website. Rasmus Baath personal blog. Georg Zoeller personal keybase. Also in case you want to share some ideas, please visit the About section and contact me. ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:11:2","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"Datasets This project was developed with a dataset provided by Rasmus Baath, which also can be downloaded at my Github repository. ","date":"2022-02-02","objectID":"/posts/ab_testing_cookiecats/:11:3","tags":["A/B Testing","Python"],"title":"Tactical Analytics: A/B Testing with Cookie Cats Game","uri":"/posts/ab_testing_cookiecats/"},{"categories":["Projects"],"content":"Article that shows the analytical approach of the video games history through sales data, using Python and Jupyter Notebooks","date":"2021-11-01","objectID":"/posts/evga/","tags":["Exploratory Analysis","Python"],"title":"Video Games History plugged by Data","uri":"/posts/evga/"},{"categories":["Projects"],"content":"The industry of video games revenues is reaching the $173.7 billion in value, with around 2.5 billion users enjoying them worldwide, with a forecasted value of $314.40 billion by 2026 according to Mordor Intelligence. Impressive facts, right? Nowadays this market is no longer considered a simple hobby for kids, it has become a constantly growing giant which attracts more and more customers as it takes advantage of the growth of streaming platforms. But this industry, as we well know, is taking more fields, born from ambitious expectations such as the Nintendo World Championships in the 90‚Äôs to what today many have adopted as a lifestyle also known as Esports. Looking for an interactive experience? üöÄ Use or Download the Jupyter Notebook, available here Source: Designcollector\" Source: Designcollector We‚Äôll take a tour through the history of videogames, starting from late 70s and early the 80s. However, as a way of clarification, if you are a member of the culture, it‚Äôs important to mention that due to limitations of the scope of data available for analysis, Tomohiro Nishikado‚Äôs masterpiece, released as Space Invaders, will not be part of the analysis; and in case you‚Äôre not a member don‚Äôt worry this is for you as well. From an optimistic point of view, we will analyze quite important historical data, because is difficult to even think about getting the 70s data like Pong; and another advantage is that we can start our journey from the market revolution in the early 80s. Before starting our journey, like any exploratory data analysis we must import our libraries. # To manage Dataframes import pandas as pd # To manage number operators import numpy as np # To do interactive visualizations import plotly.express as px import plotly.graph_objects as go import plotly.figure_factory as ff Now, let‚Äôs import our data. We must consider that we already prepared it, as shown in this articles‚Äôs footnote1. # Data frame of videogames df = pd.read_csv(\"data/videogames.csv\", na_values=[\"N/A\",\"\", \" \", \"nan\"], index_col=0) In addition to facilitate the management of dates in the visualizations, two extra columns will be generated, one as a Timestamp and another as a String, which will be used only if required. # Transform Year column to a timestamp df[\"Year_ts\"] = pd.to_datetime(df[\"Year_of_Release\"], format='%Y') # Transform Year column to a string df[\"Year_str\"] = df[\"Year_of_Release\"].apply(str) \\ .str.slice(stop=-2) ","date":"2021-11-01","objectID":"/posts/evga/:0:0","tags":["Exploratory Analysis","Python"],"title":"Video Games History plugged by Data","uri":"/posts/evga/"},{"categories":["Projects"],"content":"Data integrity validation First, we check our current dataset using the method .info() df.info() \u003cclass 'pandas.core.frame.DataFrame'\u003e Int64Index: 16716 entries, 0 to 16718 Data columns (total 20 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Name 16716 non-null object 1 Year_of_Release 16447 non-null float64 2 Publisher 16662 non-null object 3 Country 9280 non-null object 4 City 9279 non-null object 5 Developer 10096 non-null object 6 Platform 16716 non-null object 7 Genre 16716 non-null object 8 NA_Sales 16716 non-null float64 9 EU_Sales 16716 non-null float64 10 JP_Sales 16716 non-null float64 11 Other_Sales 16716 non-null float64 12 Global_Sales 16716 non-null float64 13 Critic_Score 8137 non-null float64 14 Critic_Count 8137 non-null float64 15 User_Score 7590 non-null float64 16 User_Count 7590 non-null float64 17 Rating 9950 non-null object 18 Year_ts 16447 non-null datetime64[ns] 19 Year_str 16716 non-null object dtypes: datetime64[ns](1), float64(10), object(9) memory usage: 2.7+ MB To one side we find a great variety of data and attributes, to the other one we see that of the total of 16,716 records there are several attributes with a significant number of null values, which we are going to see next, in percentage terms. # Function the plot the percentage of missing values def na_counter(df): print(\"NaN Values per column:\") print(\"\") for i in df.columns: percentage = 100 - ((len(df[i]) - df[i].isna().sum())/len(df[i]))*100 # Only return columns with more than 5% of NA values if percentage \u003e 5: print(i+\" has \"+ str(round(percentage)) +\"% of Null Values\") else: continue # Execute function na_counter(df) NaN Values per column: Country has 44% of Null Values City has 44% of Null Values Developer has 40% of Null Values Critic_Score has 51% of Null Values Critic_Count has 51% of Null Values User_Score has 55% of Null Values User_Count has 55% of Null Values Rating has 40% of Null Values These correspond to the attributes that hold more than 5% of the null values considering a confidence standard, which consists of having at least 95% of the data. In a visual way, we can look at it in the following graphic. # Make a dataframe of the number of Missing Values per attribute df_na = df.isna().sum().reset_index() # Rename our dataframe columns df_na.columns = [\"Column\",\"Missing_Values\"] # Plot barchart of Missing Values barna = px.bar(df_na[df_na[\"Missing_Values\"] \u003e 0].sort_values (\"Missing_Values\", ascending = False), y=\"Missing_Values\", x=\"Column\", color=\"Missing_Values\", opacity=0.7, title = \"Total of Missing Values per attribute\", color_continuous_scale= \"teal\", labels = {\"Missing_Values\":\"Missing Values\"}) # layout for barchart layoutbar1 = {\"font\": {\"size\": 11, \"color\": \"#959595\", \"family\": \"segoe ui light\"}, \"title\":{'y':0.935, 'x':0.4, \"yref\":\"container\", 'xanchor': 'center', 'yanchor': 'top', \"font.family\":\"bahnschrift light\", \"font.color\":\"#202020\", \"font.size\":17, \"pad.b\":15, # to avoid overlap with graph \"pad.l\":1}, \"showlegend\": True, \"legend\":{\"font.size\": 11, \"bordercolor\": \"#F70000\", \"itemclick\":\"toggleothers\", \"itemwidth\": 30, \"itemdoubleclick\":False, \"title.side\": \"top\", \"title.font.color\": \"#202020\", \"title.font.size\": 13, \"x\":1.05}, # distance with the plot default to 1.02 \"margin\":{\"b\": 65, \"l\": 65, \"r\": 65, \"t\": 80, \"pad\": 0}, \"autosize\":True, \"width\": 1000, \"height\": 600, \"separators\": \". \", \"paper_bgcolor\": \"#fff\", \"plot_bgcolor\": \"#fff\", \"autotypenumbers\": \"convert types\", #\"colorway\": [\"#10214A\", \"#172568\", \"#1F2685\", \"#2E28A1\", \"#4831BD\", # \"#663AD8\", \"#7249DE\", \"#7E58E4\"], \"modebar\":{\"add\":[\"togglespikelines\"], #\"drawline\",\"eraseshape\" \"orientation\":\"v\", \"remove\":[\"zoomin\",\"zoomout\",\"zoom\",\"lasso\",\"select\",\"togglespikelines\"], \"activecolor\":\"#171717\"}, \"hoverdistance\":50, #Distance between cursor and hover announce \"hoverlabel\":{\"align\":\"left\", \"bordercolor\":\"#fff\", \"bgcolor\":\"#3D5165\", \"font.color\":\"#FFFFFF\", \"font.family\":\"segoe ui light\", \"font.size\":11}, \"grid\":{\"pattern","date":"2021-11-01","objectID":"/posts/evga/:1:0","tags":["Exploratory Analysis","Python"],"title":"Video Games History plugged by Data","uri":"/posts/evga/"},{"categories":["Projects"],"content":"Exploratory Video Game Analysis (EVGA) Before starting with our expedition we should begin by understanding the behavior of the data with which our analysis will be built, for this we‚Äôll use the .describe() method. # Modify decimal number attribute pd.options.display.float_format = \"{:.2f}\".format # Print description df.describe() The numerical attributes show us that we have a total of 40 years of records (from 1980 to 2020) of sales in North America, Europe, Japan, and other parts of the world. Where the median indicates that 50% of the years recorded are less than or equal to 2007, and we did not find outliers. Also, the average sales value is higher in North America despite the fact that the average sale of the titles is around 263,000 units, but its variation is quite high, so it should be compared more exhaustively. From a historical point of view, it makes sense, that knowing that the focus of sales is North America, cause even during the 60s the head of Nintendo of America, Minoru Arakawa, decided to expand their operations in the United States starting from the world of the arcade, so we can have the hypothesis to see this as a place of opportunities for this market. ","date":"2021-11-01","objectID":"/posts/evga/:2:0","tags":["Exploratory Analysis","Python"],"title":"Video Games History plugged by Data","uri":"/posts/evga/"},{"categories":["Projects"],"content":"Golden Age of Videogames 1977 ‚Äì Launch of Atari 2600\rWe will begin with the global view, I mean, the superficial perspective of the sales during this period. # Mask to subset games from 1980 to 1990 games8090 = df[\"Year_of_Release\"].isin(np.arange(1980,1991)) # Top publishers between 1980 and 1990 top_pub = df[df[\"Year_of_Release\"]\u003c=1990].groupby(\"Publisher\") \\ .sum(\"Global_Sales\") \\ .sort_values(\"Global_Sales\", ascending = False)[\"Global_Sales\"] \\ .head(10) # Dataframe for Line Plot of most frequent companies df_sales_ts = df[games8090][df[\"Publisher\"].isin(top_pub.index)] \\ .pivot_table(values = \"Global_Sales\", index = [\"Year_of_Release\", \"Year_str\", \"Year_ts\", \"Publisher\",\"Platform\"], aggfunc= np.sum) \\ .reset_index() \\ .sort_values(\"Year_of_Release\", ascending = True) \\ .groupby([\"Publisher\",\"Year_ts\"]) \\ .sum() \\ .reset_index() # Plot a lineplot gline = px.line(df_sales_ts, x=\"Year_ts\", y=\"Global_Sales\", color='Publisher', labels={\"Year_ts\": \"Years\", \"Global_Sales\": \"Millions of Units Sold\", \"total_bill\": \"Receipts\"}, title = \"Millions of units during Golden Age sold by Publisher\") # To plot markers for i in np.arange(0,10): gline.data[i].update(mode='markers+lines') # Line Layout layoutline = {\"font\": {\"size\": fontimg, \"color\": colorfont, \"family\": \"segoe ui light\"}, \"title\":{'y':0.935, 'x':0.4, \"yref\":\"container\", 'xanchor': 'center', 'yanchor': 'top', \"font.family\":\"bahnschrift light\", \"font.color\":\"#202020\", \"font.size\":fontimg+5, \"pad.b\":15, # to avoid overlap with graph \"pad.l\":1}, \"showlegend\": True, \"legend\":{\"font.size\": fontimg, \"bordercolor\": \"#F70000\", \"itemclick\":\"toggleothers\", \"itemwidth\": 30, \"itemdoubleclick\":False, \"title.side\": \"top\", \"title.font.color\": \"#202020\", \"title.font.size\": fontimg+2, \"x\":1.05}, # distance with the plot default to 1.02 \"margin\":{\"b\": 65, \"l\": 65, \"r\": 65, \"t\": 80, \"pad\": 0}, \"autosize\":True, \"width\": widthimg, \"height\": heightimg, \"separators\": \". \", \"paper_bgcolor\": \"#fff\", \"plot_bgcolor\": \"#fff\", \"autotypenumbers\": \"convert types\", \"modebar\":{\"add\":[\"togglespikelines\"], #\"drawline\",\"eraseshape\" \"orientation\":\"v\", \"remove\":[\"zoomin\",\"zoomout\",\"zoom\",\"lasso\",\"select\"], \"activecolor\":\"#171717\"}, \"hoverdistance\":50, #Distance between cursor and hover announce \"hovermode\":\"x unified\", \"hoverlabel\":{\"align\":\"left\", \"bordercolor\":\"#fff\", \"bgcolor\":\"#3D5165\", \"font.color\":\"#FFFFFF\", \"font.family\":\"segoe ui light\", \"font.size\":fontimg}, \"grid\":{\"pattern\":\"coupled\", \"roworder\":\"bottom to top\", \"xgap\":0.5, \"ygap\":0.5, \"xside\":\"bottom\"}, \"newshape\":{\"line.color\":\"#3D5165\", \"line.width\":1.5, \"opacity\":0.7}, \"activeshape.opacity\":0.7, \"xaxis\": {\"gridcolor\":\"#fff\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"showspikes\": False, \"linecolor\":\"#3D5165\", # Bottom colored line, zeroline on yaxis is preferred \"linewidth\":1.5, \"anchor\":\"free\", \"position\":0.02, \"showgrid\":False, \"tickcolor\":\"#FD0000\", \"ticklabelposition\": \"outside\", \"title.standoff\": 10, #Distance between axis title and axis labels \"automargin\": True}, \"yaxis\": {\"gridcolor\":\"#EDEDED\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"showspikes\": False, \"ticklabelposition\": \"outside\", \"tickprefix\": \"\", #Label prefix \"ticksuffix\": \"M\", # Label sufix \"title.standoff\": 10, #Distance between axis title and axis labels \"automargin\": True}, \"annotations\":[{\"text\":author, \"align\": \"right\", \"visible\":True, \"xref\":\"paper\", \"yref\":\"paper\", \"x\":1, \"y\":-0.11, \"showarrow\":False, \"font.size\":fontimg-1}]} # Update Layout gline.update_layout(layoutline) gline.show() \rAs we can see at the beginning of the decade and probably after 1977, the market was dominated by Atari Studios while Activision was its main competitor in terms of IPs, because these competitors eventually published their titles on the Atari 2600, example of this was Activision with Kaboom! or Parker Bros with Frogger. Another important fact is that in 1982 we can remember that it was one of the best times for Atari where they publ","date":"2021-11-01","objectID":"/posts/evga/:2:1","tags":["Exploratory Analysis","Python"],"title":"Video Games History plugged by Data","uri":"/posts/evga/"},{"categories":["Projects"],"content":"I World Console War (WCWI) 1989 - Sega Enterprises Inc. launches worldwide Sega Megadrive Genesis\r1991 - Nintendo launches worldwide Super Nintendo Entertainment system\rAt the beginning of the 90s, after the launch of the SEGA and Nintendo consoles, the First World War of Videogames began. Mainly in two of their biggest titles, Sonic The Hedgedog and Super Mario Bros. During 1990, approximately 90% of the US market was controlled by Nintendo, until in 1992 SEGA began to push with strong marketing campaigns aimed at an older audience. One of the most remarkable fact of this period was the launch of Mortal Kombat in 1992, where Nintendo censored part of its content (blood-content) since they had an initiative to be a family friendly company, and of course this became very annoying the followers of this series. # Transform current dataframe as long format df_long = df.melt(id_vars = [\"Name\",\"Platform\",\"Year_of_Release\",\"Genre\", \"Publisher\", \"Developer\", \"Rating\", \"Year_str\", \"Year_ts\", \"Country\", \"City\",\"Critic_Score\",\"User_Score\"], value_vars = [\"NA_Sales\", \"EU_Sales\",\"JP_Sales\",\"Other_Sales\"], var_name = [\"Location\"], value_name = \"Sales\") # Giving a better format to the location's Name df_long = df_long.replace({\"Location\": {\"NA_Sales\": \"North America\", \"EU_Sales\": \"Europe\", \"JP_Sales\": \"Japan\", \"Other_Sales\": \"Rest of the World\"} }) # To delete columns without sales registry df_long = df_long[df_long[\"Sales\"] \u003e 0].dropna(subset = [\"Sales\"]) # Dataframe df_gen90 = df_long[(df_long[\"Year_of_Release\"] \u003e 1989) \u0026 (df_long[\"Year_of_Release\"] \u003c 2000)] \\ .pivot_table(values = \"Sales\", index = \"Genre\", columns = \"Location\", aggfunc = np.sum) # Image plot ima = px.imshow(df_gen90.reset_index(drop=True).T, y= [\"Europe\",\"Japan\",\"North America\",\"Rest of the Worlds\"], x= ['Action', 'Adventure', 'Fighting', 'Misc', 'Platform', 'Puzzle', 'Racing', 'Role-Playing', 'Shooter', 'Simulation', 'Sports','Strategy'], labels=dict(color=\"Total Sales in Millions\"), color_continuous_scale='RdBu_r', title = \"Heatmap of Location vs Genre during WCWI\") # Image Layout layoutim = {\"font\": {\"size\": fontimg, \"color\": colorfont, \"family\": \"segoe ui light\"}, \"title\":{'y':0.935, 'x':0.4, \"yref\":\"container\", 'xanchor': 'center', 'yanchor': 'top', \"font.family\":\"bahnschrift light\", \"font.color\":\"#202020\", \"font.size\":fontimg+5, \"pad.b\":15, # to avoid overlap with graph \"pad.l\":1}, \"showlegend\": True, \"legend\":{\"font.size\": fontimg, \"bordercolor\": \"#F70000\", \"itemclick\":\"toggleothers\", \"itemwidth\": 30, \"itemdoubleclick\":False, \"title.side\": \"top\", \"title.font.color\": \"#202020\", \"title.font.size\": fontimg+2, \"x\":1.05}, # distance with the plot default to 1.02 \"margin\":{\"b\": 65, \"l\": 65, \"r\": 65, \"t\": 80, \"pad\": 0}, \"autosize\":True, \"width\": widthimg, \"height\": heightimg, \"separators\": \". \", \"paper_bgcolor\": \"#fff\", \"plot_bgcolor\": \"#fff\", \"autotypenumbers\": \"convert types\", \"modebar\":{\"add\":[\"togglespikelines\"], #\"drawline\",\"eraseshape\" \"orientation\":\"v\", \"remove\":[\"zoomin\",\"zoomout\",\"zoom\",\"lasso\",\"select\"], \"activecolor\":\"#171717\"}, \"hoverdistance\":50, #Distance between cursor and hover announce \"hoverlabel\":{\"align\":\"left\", \"bordercolor\":\"#fff\", \"bgcolor\":\"#3D5165\", \"font.color\":\"#FFFFFF\", \"font.family\":\"segoe ui light\", \"font.size\":fontimg}, \"grid\":{\"pattern\":\"coupled\", \"roworder\":\"bottom to top\", \"xgap\":0.5, \"ygap\":0.5, \"xside\":\"bottom\"}, \"newshape\":{\"line.color\":\"#3D5165\", \"line.width\":1.5, \"opacity\":0.7}, \"activeshape.opacity\":0.7, \"xaxis\": {\"gridcolor\":\"#fff\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"title\":\"Genre\", \"showspikes\": False, \"linecolor\":\"#3D5165\", # Bottom colored line, zeroline on yaxis is preferred \"linewidth\":1.5, \"anchor\":\"free\", \"position\":0.02, \"showgrid\":False, \"tickcolor\":\"#FD0000\", \"ticklabelposition\": \"outside\", \"title.standoff\": 10, #Distance between axis title and axis labels \"automargin\": True}, \"yaxis\": {\"gridcolor\":\"#EDEDED\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"tit","date":"2021-11-01","objectID":"/posts/evga/:2:2","tags":["Exploratory Analysis","Python"],"title":"Video Games History plugged by Data","uri":"/posts/evga/"},{"categories":["Projects"],"content":"Role-playing game revolution One of the most characteristic events of this time was the implementation of 16-bit graphic technologies, which at the time was double what was available. Along with this, the Japanese once again made another master move, which gave a decisive turn to a genre, after the expected fall of RPGs on the PC platform. Before highlighting the Japanese originality, it is necessary to know after successes of role-playing games such as Ultima VIII: Pagan (PC), this genre had a slow development, since the CD-ROMs generated great graphic expectations for the developers, by the way prolonging the releases, and for sure this caused a lack of interest from the community, and began to move towards action games or first person shooter such as Golden Eye (1997). However, success stories continued to appear in this genre such as Diablo (1996), developed by Blizzard Entertainment. # Dataframe for Genre lineplot df90G = df_long[(df_long[\"Year_of_Release\"] \u003e 1989) \u0026 (df_long[\"Year_of_Release\"] \u003c 2000) \u0026 ((df_long[\"Genre\"] == \"Role-Playing\") | (df_long[\"Genre\"] == \"Action\") | (df_long[\"Genre\"] == \"Platform\") | (df_long[\"Genre\"] == \"Fighting\") )] \\ .groupby([\"Genre\", \"Year_ts\"]).sum(\"Sales\").reset_index() # Plot an animated lineplot linegen = px.line(df90G, x=\"Year_ts\", y=\"Sales\", color=\"Genre\", title = \"Millions of units sold during 90s by Genre \", labels={\"Sales\": \"Millions of Units Sold\", \"Year_ts\":\"Years\"}) # To plot markers for i in np.arange(0,4): linegen.data[i].update(mode='markers+lines') # Line Layout layoutgen = {\"font\": {\"size\": fontimg, \"color\": colorfont, \"family\": \"segoe ui light\"}, \"title\":{'y':0.935, 'x':0.4, \"yref\":\"container\", 'xanchor': 'center', 'yanchor': 'top', \"font.family\":\"bahnschrift light\", \"font.color\":\"#202020\", \"font.size\":fontimg+5, \"pad.b\":15, # to avoid overlap with graph \"pad.l\":1}, \"showlegend\": True, \"legend\":{\"font.size\": fontimg, \"bordercolor\": \"#F70000\", \"itemclick\":\"toggleothers\", \"itemwidth\": 30, \"itemdoubleclick\":False, \"title.side\": \"top\", \"title.font.color\": \"#202020\", \"title.font.size\": fontimg+2, \"x\":1.05}, # distance with the plot default to 1.02 \"margin\":{\"b\": 65, \"l\": 65, \"r\": 65, \"t\": 80, \"pad\": 0}, \"autosize\":True, \"width\": widthimg, \"height\": heightimg, \"separators\": \". \", \"paper_bgcolor\": \"#fff\", \"plot_bgcolor\": \"#fff\", \"autotypenumbers\": \"convert types\", \"colorway\": [\"#996E3F\", \"#E05040\", \"#7B82C1\", \"#A1C790\"], \"modebar\":{\"add\":[\"togglespikelines\"], #\"drawline\",\"eraseshape\" \"orientation\":\"v\", \"remove\":[\"zoomin\",\"zoomout\",\"zoom\",\"lasso\",\"select\"], \"activecolor\":\"#171717\"}, \"hoverdistance\":50, #Distance between cursor and hover announce \"hovermode\":\"x unified\", \"hoverlabel\":{\"align\":\"left\", \"bordercolor\":\"#fff\", \"bgcolor\":\"#3D5165\", \"font.color\":\"#FFFFFF\", \"font.family\":\"segoe ui light\", \"font.size\":fontimg}, \"grid\":{\"pattern\":\"coupled\", \"roworder\":\"bottom to top\", \"xgap\":0.5, \"ygap\":0.5, \"xside\":\"bottom\"}, \"newshape\":{\"line.color\":\"#3D5165\", \"line.width\":1.5, \"opacity\":0.7}, \"activeshape.opacity\":0.7, \"xaxis\": {\"gridcolor\":\"#fff\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"title\":\"Years\", \"showspikes\": False, \"anchor\":\"free\", \"position\":0.02, \"showgrid\":False, \"tickcolor\":\"#FD0000\", \"ticklabelposition\": \"outside\", \"title.standoff\": 10, #Distance between axis title and axis labels \"automargin\": True}, \"yaxis\": {\"gridcolor\":\"#EDEDED\", \"title\":\"Millions of units\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"showspikes\": False, \"ticklabelposition\": \"outside\", \"tickprefix\": \"\", #Label prefix \"ticksuffix\": \"M\", \"title.standoff\": 10, #Distance between axis title and axis labels \"zeroline\": True, \"zerolinecolor\": \"#3D5165\", \"zerolinewidth\": 1.5, \"automargin\": True}, \"annotations\":[{\"text\":author, \"align\": \"right\", \"visible\":True, \"xref\":\"paper\", \"yref\":\"paper\", \"x\":1, \"y\":-0.11, \"showarrow\":False, \"font.size\":fontimg-1}]} # Update layout linegen.update_layout(layoutgen) linegen.show() \rAmong all genres, the growth of RP","date":"2021-11-01","objectID":"/posts/evga/:2:3","tags":["Exploratory Analysis","Python"],"title":"Video Games History plugged by Data","uri":"/posts/evga/"},{"categories":["Projects"],"content":"A new Japanese Ruler takes the throne 1994 - Sony Computer Entertainment's PlayStation is born\rRPGs not only boosted Nintendo, but multiplatform IPs like Final Fantasy VII gave companies such as Sony Computer Entertainment a boost during the introduction of their new 32-bit console and at the same time to publicize the JRPGs within the western market. In 1995, when Sony planned their introduction of the PlayStation to America, they chose not to focus their Video Game market on a single type of genre or audience, but instead diversified their video game portfolio and memorable titles such as Crash Bandicoot, Metal Gear Solid and Tekken emerged. # Subset only PS games df_sony = df[(df[\"Year_of_Release\"].isin([1995,1996])) \u0026 (df[\"Platform\"] == \"PS\")] # Subset the columns needed df_sony = df_sony[[\"Name\",\"Year_of_Release\",\"Publisher\",\"Platform\",\"Genre\", \"Global_Sales\"]] # Pie plot piesony = px.pie(df_sony, values= \"Global_Sales\", names='Genre', color_discrete_sequence = px.colors.sequential.Blues_r, labels={\"Global_Sales\":\"Sales\"}) # Pie layout layoutpie = {\"font\": {\"size\": fontimg, \"color\": colorfont, \"family\": \"segoe ui light\"}, \"title\":{'y':0.935, 'text': \"Games Genre Distribution during PlayStation launch\", 'x':0.4, \"yref\":\"container\", 'xanchor': 'center', 'yanchor': 'top', \"font.family\":\"bahnschrift light\", \"font.color\":\"#202020\", \"font.size\":fontimg+5, \"pad.b\":15, # to avoid overlap with graph \"pad.l\":1}, \"showlegend\": False, \"legend\":{\"font.size\": fontimg, \"bordercolor\": \"#F70000\", \"itemclick\":\"toggleothers\", \"itemwidth\": 30, \"itemdoubleclick\":False, \"title.side\": \"top\", \"title.font.color\": \"#202020\", \"title.font.size\": fontimg+2, \"x\":1.05}, # distance with the plot default to 1.02 \"margin\":{\"b\": 65, \"l\": 65, \"r\": 65, \"t\": 80, \"pad\": 0}, \"autosize\":True, \"width\": widthimg, \"height\": heightimg, \"separators\": \". \", \"paper_bgcolor\": \"#fff\", \"plot_bgcolor\": \"#fff\", \"autotypenumbers\": \"convert types\", \"colorway\": [\"#996E3F\", \"#E05040\", \"#7B82C1\", \"#A1C790\"], \"modebar\":{\"add\":[\"togglespikelines\"], #\"drawline\",\"eraseshape\" \"orientation\":\"v\", \"remove\":[\"zoomin\",\"zoomout\",\"zoom\",\"lasso\",\"select\"], \"activecolor\":\"#171717\"}, \"hoverdistance\":50, #Distance between cursor and hover announce \"hovermode\":False, \"hoverlabel\":{\"align\":\"left\", \"bordercolor\":\"#fff\", \"bgcolor\":\"#3D5165\", \"font.color\":\"#FFFFFF\", \"font.family\":\"segoe ui light\", \"font.size\":fontimg}, \"grid\":{\"pattern\":\"coupled\", \"roworder\":\"bottom to top\", \"xgap\":0.5, \"ygap\":0.5, \"xside\":\"bottom\"}, \"newshape\":{\"line.color\":\"#3D5165\", \"line.width\":1.5, \"opacity\":0.7}, \"activeshape.opacity\":0.7, \"xaxis\": {\"gridcolor\":\"#fff\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"title\":\"Years\", \"showspikes\": False, \"anchor\":\"free\", \"position\":0.02, \"showgrid\":False, \"tickcolor\":\"#FD0000\", \"ticklabelposition\": \"outside\", \"title.standoff\": 10, #Distance between axis title and axis labels \"automargin\": True}, \"yaxis\": {\"gridcolor\":\"#EDEDED\", \"title\":\"Millions of units\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"showspikes\": False, \"ticklabelposition\": \"outside\", \"tickprefix\": \"\", #Label prefix \"ticksuffix\": \"M\", \"title.standoff\": 10, #Distance between axis title and axis labels \"zeroline\": True, \"zerolinecolor\": \"#3D5165\", \"zerolinewidth\": 1.5, \"automargin\": True}, \"annotations\":[{\"text\":author, \"align\": \"right\", \"visible\":True, \"xref\":\"paper\", \"yref\":\"paper\", \"x\":1, \"y\":-0.11, \"showarrow\":False, \"font.size\":fontimg-1}]} # Update layout piesony.update_layout(layoutpie) piesony.update_traces({\"textinfo\":\"label+text+percent\", \"hole\":0.15}) piesony.show() \rAs we can see in the graph, Sony‚Äôs video game distribution during its first two years in the North American market. Even if we pay attention, titles like Tekken and Mortal Kombat had a significant presence by showing the highest levels of sales by genre (referring to ‚ÄúFighting‚Äù genre). ","date":"2021-11-01","objectID":"/posts/evga/:2:4","tags":["Exploratory Analysis","Python"],"title":"Video Games History plugged by Data","uri":"/posts/evga/"},{"categories":["Projects"],"content":"Content control warnings 1994 - Foundation of Entertainment Software Rating Board\rAfter titles like Doom, Wolfenstein and Mortal Kombat, an American system arises to classify the content of video games, and assign it a category depending on its potential audience maturity. It was established in 1994 by the Entertainment Software Association, the formerly called the Interactive Digital Software Association. # ESRB Rating Dataframe df_r = df[df[\"Rating\"].isna() == False] df_r = df_r.groupby([\"Rating\",\"Platform\"]).count()[\"Name\"] \\ .reset_index() \\ .pivot_table(values = \"Name\", index = \"Rating\", columns = \"Platform\", aggfunc = [np.sum]) \\ .fillna(0) # Drop empty classifications df_r = df_r.drop([\"AO\",\"EC\",\"K-A\",\"RP\"]) # Heatmap of ESRB Rating vs Consoles gesrb = px.imshow(df_r.reset_index(drop=True), x= [\"3DS\",\"DC\",\"DS\",\"GBA\",\"GC\",\"PC\",\"PS\",\"PS2\",\"PS3\",\"PS4\",\"PSP\",\"PSV\", \"Wii\",\"WiiU\",\"Xbox 360\",\"Xbox\",\"Xbox One\"], y= ['E', 'E10+', 'M', 'T'], labels=dict(x=\"Console\", y=\"ESRB Rating\", color=\"Number of Titles\"), color_continuous_scale='BuGn', title = \"Heatmap of ESRB Rating vs Consoles updated to 2016\") # Image 2 Layout layoutim2 = {\"font\": {\"size\": fontimg, \"color\": colorfont, \"family\": \"segoe ui light\"}, \"title\":{'y':0.935, 'x':0.4, \"yref\":\"container\", 'xanchor': 'center', 'yanchor': 'top', \"font.family\":\"bahnschrift light\", \"font.color\":\"#202020\", \"font.size\":fontimg+5, \"pad.b\":15, # to avoid overlap with graph \"pad.l\":1}, \"showlegend\": True, \"legend\":{\"font.size\": fontimg, \"bordercolor\": \"#F70000\", \"itemclick\":\"toggleothers\", \"itemwidth\": 30, \"itemdoubleclick\":False, \"title.side\": \"top\", \"title.font.color\": \"#202020\", \"title.font.size\": fontimg+2, \"x\":1.05}, # distance with the plot default to 1.02 \"margin\":{\"b\": 65, \"l\": 65, \"r\": 65, \"t\": 80, \"pad\": 0}, \"autosize\":True, \"width\": widthimg, \"height\": heightimg, \"separators\": \". \", \"paper_bgcolor\": \"#fff\", \"plot_bgcolor\": \"#fff\", \"autotypenumbers\": \"convert types\", \"modebar\":{\"add\":[\"togglespikelines\"], #\"drawline\",\"eraseshape\" \"orientation\":\"v\", \"remove\":[\"zoomin\",\"zoomout\",\"zoom\",\"lasso\",\"select\"], \"activecolor\":\"#171717\"}, \"hoverdistance\":50, #Distance between cursor and hover announce \"hoverlabel\":{\"align\":\"left\", \"bordercolor\":\"#fff\", \"bgcolor\":\"#3D5165\", \"font.color\":\"#FFFFFF\", \"font.family\":\"segoe ui light\", \"font.size\":fontimg}, \"grid\":{\"pattern\":\"coupled\", \"roworder\":\"bottom to top\", \"xgap\":0.5, \"ygap\":0.5, \"xside\":\"bottom\"}, \"newshape\":{\"line.color\":\"#3D5165\", \"line.width\":1.5, \"opacity\":0.7}, \"activeshape.opacity\":0.7, \"xaxis\": {\"gridcolor\":\"#fff\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"title\":\"Platform\", \"showspikes\": False, \"linecolor\":\"#3D5165\", # Bottom colored line, zeroline on yaxis is preferred \"linewidth\":1.5, \"anchor\":\"free\", \"position\":0.02, \"showgrid\":False, \"tickcolor\":\"#FD0000\", \"ticklabelposition\": \"outside\", \"title.standoff\": 10, #Distance between axis title and axis labels \"automargin\": True}, \"yaxis\": {\"gridcolor\":\"#EDEDED\", \"title\":\"Millions of units\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"title\":\"ESRB Classification\", \"showspikes\": False, \"ticklabelposition\": \"outside\", \"tickprefix\": \"\", #Label prefix \"ticksuffix\": \"\", \"title.standoff\": 10, #Distance between axis title and axis labels \"zeroline\": True, \"automargin\": True}, \"annotations\":[{\"text\":author, \"align\": \"right\", \"visible\":True, \"xref\":\"paper\", \"yref\":\"paper\", \"x\":1, \"y\":-0.11, \"showarrow\":False, \"font.size\":fontimg-1}]} # Update layout gesrb.update_layout(layoutim2) gesrb.show() \rBased on the classification established by the ESRB, from the data available it can be concluded that the video game console with more titles for universal use is the Nintendo DS, followed by the PS2 and then is the Wii, thus highlighting the impact they had on sales, which it will be shown later. Meanwhile, the Xbox 360 and PS3 were geared towards a more mature audience with a significant presence of M-rated titles. ","date":"2021-11-01","objectID":"/posts/evga/:2:5","tags":["Exploratory Analysis","Python"],"title":"Video Games History plugged by Data","uri":"/posts/evga/"},{"categories":["Projects"],"content":"Last years of 32 bit era In the early 2000s, after the launch of the PS1, Sony continued leading the console market and diversifying its portfolio of games. On the other side of the coin SEGA, despite having launched the first console with an online system, in 2002 they retired their console from the market and dedicated itself exclusively to third-party development and Arcade, a situation that is outlined in the following graph. # Lineplot sales by platform before 2005 # Extract columns games20 = df[[\"Year_of_Release\",\"Platform\",\"Global_Sales\"]] # Subset dates games20 = games20[(games20.Year_of_Release \u003e 1998) \u0026 (games20.Year_of_Release \u003c 2005)] # Omit WonderSwan by Bandai, SEGA Saturn due low sales profiles and NDS that is not # relevant yet games20 = games20[~games20.Platform.isin([\"WS\",\"DS\",\"SAT\",\"SNES\",\"PSP\"])] # Group and summarize games20 = games20.groupby([\"Year_of_Release\",\"Platform\"]).agg(sum).reset_index()\\ .sort_values([\"Year_of_Release\",\"Platform\"], ascending=True) # Save an Array of Platforms Platforms = games20.Platform.unique() # Pivot to put in long format games20 = games20.pivot_table(values=\"Global_Sales\", index=\"Year_of_Release\", columns=\"Platform\").reset_index() # Assemble lineplot line20 = go.Figure() for platform in Platforms: line20.add_trace(go.Scatter(x = games20[\"Year_of_Release\"], y = games20[platform], name=platform, line_shape='linear')) # Line Layout layoutplat = {\"font\": {\"size\": fontimg, \"color\": colorfont, \"family\": \"segoe ui light\"}, \"title\":{'y':0.935, 'text': \"Millions of units sold during 2000s by platform\", 'x':0.4, \"yref\":\"container\", 'xanchor': 'center', 'yanchor': 'top', \"font.family\":\"bahnschrift light\", \"font.color\":\"#202020\", \"font.size\":fontimg+5, \"pad.b\":15, # to avoid overlap with graph \"pad.l\":1}, \"showlegend\": True, \"legend\":{\"font.size\": fontimg, \"bordercolor\": \"#F70000\", \"itemclick\":\"toggleothers\", \"itemwidth\": 30, \"itemdoubleclick\":False, \"title.side\": \"top\", \"title.font.color\": \"#202020\", \"title.font.size\": fontimg+2, \"x\":1.05}, # distance with the plot default to 1.02 \"margin\":{\"b\": 65, \"l\": 65, \"r\": 65, \"t\": 80, \"pad\": 0}, \"autosize\":True, \"width\": widthimg, \"height\": heightimg, \"separators\": \". \", \"paper_bgcolor\": \"#fff\", \"plot_bgcolor\": \"#fff\", \"autotypenumbers\": \"convert types\", \"colorway\": [\"#8d42f5\", \"#7d7d7d\", \"#d90000\", \"#00d9bc\",\"#2893f7\", \"#ff8e2b\",\"#0e4bcf\",\"#0bbf41\",\"#bfaa0b\"], \"modebar\":{\"add\":[\"togglespikelines\"], #\"drawline\",\"eraseshape\" \"orientation\":\"v\", \"remove\":[\"zoomin\",\"zoomout\",\"zoom\",\"lasso\",\"select\"], \"activecolor\":\"#171717\"}, \"hoverdistance\":50, #Distance between cursor and hover announce \"hovermode\":\"x unified\", \"hoverlabel\":{\"align\":\"left\", \"bordercolor\":\"#fff\", \"bgcolor\":\"#3D5165\", \"font.color\":\"#FFFFFF\", \"font.family\":\"segoe ui light\", \"font.size\":fontimg}, \"grid\":{\"pattern\":\"coupled\", \"roworder\":\"bottom to top\", \"xgap\":0.5, \"ygap\":0.5, \"xside\":\"bottom\"}, \"newshape\":{\"line.color\":\"#3D5165\", \"line.width\":1.5, \"opacity\":0.7}, \"activeshape.opacity\":0.7, \"xaxis\": {\"gridcolor\":\"#fff\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"title\":\"Years\", \"showspikes\": False, \"linecolor\":\"#3D5165\", # Bottom colored line, zeroline on yaxis is preferred \"linewidth\":1.5, \"anchor\":\"free\", \"position\":0.02, \"showgrid\":False, \"tickcolor\":\"#FD0000\", \"ticklabelposition\": \"outside\", \"title.standoff\": 10, \"automargin\": True}, \"yaxis\": {\"gridcolor\":\"#EDEDED\", \"title\":\"Millions of units\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"showspikes\": False, \"ticklabelposition\": \"outside\", \"tickprefix\": \"\", #Label prefix \"ticksuffix\": \"M\", \"title.standoff\": 10, #Distance between axis title and axis labels \"automargin\": True}, \"annotations\":[{\"text\":author, \"align\": \"right\", \"visible\":True, \"xref\":\"paper\", \"yref\":\"paper\", \"x\":1, \"y\":-0.11, \"showarrow\":False, \"font.size\":fontimg-1}]} # Update layout line20.update_layout(layoutplat) line20.show() \rThe Japanese domain was becoming more and more determined, a situation that the ","date":"2021-11-01","objectID":"/posts/evga/:2:6","tags":["Exploratory Analysis","Python"],"title":"Video Games History plugged by Data","uri":"/posts/evga/"},{"categories":["Projects"],"content":"The ‚ÄúNon-competitor‚Äù takes the lead 2005 - Microsoft launch the Xbox 360\r2006 - PS3 and Nintendo Wii are released\rAs Microsoft and Sony continued competing for a market with high-definition titles, online connection services like Xbox Live and PSN, and high-capacity hard drives, Nintendo chose to follow a Blue Ocean Strategy after the failure of the GameCube, who tried to compete in the big leagues. Their strategy consisted of offering something new and innovative, instead of competing to be better in the characteristics offered by the competition, becoming the fastest selling console, reaching to sell 50 million units around the world according to D. Melanson from Verizon Media, so this is the best way to describe the Wii console. # Mask of 2005-2010 games games2010 = (df.Year_of_Release \u003e 2004) \u0026 (df.Year_of_Release \u003c 2011) # Dataframe of games df2010 = df[games2010] # Excluding data to focus on new consoles df2010 = df2010[df2010.Platform.isin(['Wii','DS','X360','PS3'])]\\ .groupby([\"Platform\",\"Year_str\"])[\"Global_Sales\"].agg(sum).reset_index()\\ .sort_values([\"Year_str\",\"Global_Sales\"]) # Plot of Sales by Platform bar2010 = px.bar(df2010, color=\"Platform\", y=\"Global_Sales\", x=\"Year_str\", barmode=\"group\", labels={\"Year_str\":\"Year\", \"Global_Sales\":\"Millions of Units\"}, pattern_shape=\"Platform\", pattern_shape_sequence=[\"\", \"\", \"\", \"\", \".\"], color_discrete_sequence=[\"#00DEB7\",\"#0082C2\",\"#1333A7\",\"#5849B6\"]) # Bar Layout layoutbar2005 = {\"font\": {\"size\": fontimg, \"color\": colorfont, \"family\": \"segoe ui light\"}, \"title\":{'y':0.935, 'x':0.4, \"text\":\"Mid 2000s sales by platform\", \"yref\":\"container\", 'xanchor': 'center', 'yanchor': 'top', \"font.family\":\"bahnschrift light\", \"font.color\":\"#202020\", \"font.size\":fontimg+5, \"pad.b\":15, # to avoid overlap with graph \"pad.l\":1}, \"showlegend\": True, \"legend\":{\"font.size\": fontimg, \"bordercolor\": \"#F70000\", \"itemclick\":\"toggleothers\", \"itemwidth\": 30, \"itemdoubleclick\":False, \"title.side\": \"top\", \"title.font.color\": \"#202020\", \"title.font.size\": fontimg+2, \"x\":1.05}, # distance with the plot default to 1.02 \"margin\":{\"b\": 65, \"l\": 65, \"r\": 65, \"t\": 80, \"pad\": 0}, \"autosize\":True, \"width\": widthimg, \"height\": heightimg, \"separators\": \". \", \"paper_bgcolor\": \"#fff\", \"plot_bgcolor\": \"#fff\", \"autotypenumbers\": \"convert types\", \"modebar\":{\"add\":[\"togglespikelines\"], #\"drawline\",\"eraseshape\" \"orientation\":\"v\", \"remove\":[\"zoomin\",\"zoomout\",\"zoom\",\"lasso\",\"select\",\"togglespikelines\"], \"activecolor\":\"#171717\"}, \"hoverdistance\":50, #Distance between cursor and hover announce \"hoverlabel\":{\"align\":\"left\", \"bordercolor\":\"#fff\", \"bgcolor\":\"#3D5165\", \"font.color\":\"#FFFFFF\", \"font.family\":\"segoe ui light\", \"font.size\":fontimg}, \"grid\":{\"pattern\":\"coupled\", \"roworder\":\"bottom to top\", \"xgap\":0.5, \"ygap\":0.5, \"xside\":\"bottom\"}, \"newshape\":{\"line.color\":\"#3D5165\", \"line.width\":1.5, \"opacity\":0.7}, \"activeshape.opacity\":0.7, \"xaxis\": {\"gridcolor\":\"#fff\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"showspikes\": False, \"anchor\":\"free\", \"position\":0, \"showgrid\":False, \"tickcolor\":\"#FD0000\", \"ticklabelposition\": \"outside\", \"title.standoff\": 10, #Distance between axis title and axis labels \"automargin\": True}, \"yaxis\": {\"gridcolor\":\"#EDEDED\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"showspikes\": False, \"ticklabelposition\": \"outside\", \"tickprefix\": \"\", #Label prefix \"ticksuffix\": \"M\", # Label sufix \"title.standoff\": 10, #Distance between axis title and axis labels \"zeroline\": True, \"zerolinecolor\": \"#3D5165\", \"zerolinewidth\": 1.5, \"automargin\": True}, \"annotations\":[{\"text\":author, \"align\": \"right\", \"visible\":True, \"xref\":\"paper\", \"yref\":\"paper\", \"x\":1, \"y\":-0.11, \"showarrow\":False, \"font.size\":fontimg-1}]} # Update layout bar2010.update_layout(layoutbar2005) bar2010.show() \rAs you can see, from the start of the Wii sales, the strategy of Nintendo began to flourish, surpassing the sales of its rivals by 4 years in a row. An interesting aspect of Nintendo amo","date":"2021-11-01","objectID":"/posts/evga/:2:7","tags":["Exploratory Analysis","Python"],"title":"Video Games History plugged by Data","uri":"/posts/evga/"},{"categories":["Projects"],"content":"Prevalence of Social Gaming After the success of some local-gaming titles, the decade from 2010 to 2020 took a more competitive or cooperative way in certain cases, guided by a new era of interconnectivity and mobility. This reason motivated developers with extraordinary visions to create not only multiplayer, but also online content that maintains high audience rates. # Subset games from 2010 to 2015 games2010 = df[(df.Year_of_Release \u003e 2009) \u0026 (df.Year_of_Release \u003c 2016)]\\ .sort_values([\"Year_str\",\"Platform\",\"Global_Sales\"]) # Subset games with more sales from 2010 to 2015 topgames2010 = games2010.sort_values([\"Genre\",\"Global_Sales\"], ascending = False)\\ .groupby(\"Genre\").head(1).sort_values(\"Year_of_Release\", ascending = True)\\ .sort_values(\"Global_Sales\", ascending=False) topgames2010 = topgames2010[[\"Year_of_Release\",\"Name\",\"Platform\",\"Publisher\",\"Genre\", \"Global_Sales\"]] # Barplot Base bargen10 = px.bar(topgames2010, y=\"Genre\", x=\"Global_Sales\", orientation=\"h\", text=\"Name\", labels={\"Name\":\"Title\", \"Global_Sales\":\"Millions of units sold\"}, color=\"Genre\", color_discrete_sequence=[\"#8B58B0\",\"#58B081\",\"#B0B058\",\"#535353\", \"#B05858\",\"#58B09E\",\"#B05890\",\"#587FB0\", \"#B05858\",\"#58B0AA\",\"#686868\",\"#C3A149\"]) bargen10.update_traces(textposition='inside', marker_line_color='#404040', textfont = {\"color\":\"#FFFFFF\",\"family\": \"segoe ui\"}, marker_line_width=1, opacity=0.7) # Bar Layout layoutbar2010 = {\"font\": {\"size\": fontimg, \"color\": colorfont, \"family\": \"segoe ui light\"}, \"title\":{'y':0.935, 'x':0.4, \"text\":\"Top Title sold sales by Genre, from 2010 to 2015\", \"yref\":\"container\", 'xanchor': 'center', 'yanchor': 'top', \"font.family\":\"bahnschrift light\", \"font.color\":\"#202020\", \"font.size\":fontimg+5, \"pad.b\":15, # to avoid overlap with graph \"pad.l\":1}, \"showlegend\": False, \"legend\":{\"font.size\": fontimg, \"bordercolor\": \"#F70000\", \"itemclick\":\"toggleothers\", \"itemwidth\": 30, \"itemdoubleclick\":False, \"title.side\": \"top\", \"title.font.color\": \"#202020\", \"title.font.size\": fontimg+2, \"x\":1.05}, # distance with the plot default to 1.02 \"margin\":{\"b\": 65, \"l\": 65, \"r\": 65, \"t\": 80, \"pad\": 0}, \"autosize\":True, \"width\": widthimg, \"height\": heightimg, \"separators\": \". \", \"paper_bgcolor\": \"#fff\", \"plot_bgcolor\": \"#fff\", \"autotypenumbers\": \"convert types\", \"modebar\":{\"add\":[\"togglespikelines\"], #\"drawline\",\"eraseshape\" \"orientation\":\"v\", \"remove\":[\"zoomin\",\"zoomout\",\"zoom\",\"lasso\",\"select\",\"togglespikelines\"], \"activecolor\":\"#171717\"}, \"hoverdistance\":50, #Distance between cursor and hover announce \"hoverlabel\":{\"align\":\"left\", \"bordercolor\":\"#fff\", \"bgcolor\":\"#3D5165\", \"font.color\":\"#FFFFFF\", \"font.family\":\"segoe ui light\", \"font.size\":fontimg}, \"grid\":{\"pattern\":\"coupled\", \"roworder\":\"bottom to top\", \"xgap\":0.5, \"ygap\":0.5, \"xside\":\"bottom\"}, \"newshape\":{\"line.color\":\"#3D5165\", \"line.width\":1.5, \"opacity\":0.7}, \"activeshape.opacity\":0.7, \"xaxis\": {\"gridcolor\":\"#fff\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"tickprefix\": \"\", #Label prefix \"ticksuffix\": \"M\", # Label sufix \"showspikes\": False, \"anchor\":\"free\", \"position\":0, \"showgrid\":False, \"tickcolor\":\"#FD0000\", \"ticklabelposition\": \"outside\", \"title.standoff\": 10, #Distance between axis title and axis labels \"automargin\": True}, \"yaxis\": {\"gridcolor\":\"#EDEDED\", \"spikecolor\":\"#DEDEDE\", # Horizontal line hovered \"spikethickness\":1.5, \"showspikes\": False, \"ticklabelposition\": \"outside\", \"title.standoff\": 10, #Distance between axis title and axis labels \"zeroline\": True, \"zerolinecolor\": \"#3D5165\", \"zerolinewidth\": 1.5, \"automargin\": True}, \"annotations\":[{\"text\":author, \"align\": \"right\", \"visible\":True, \"xref\":\"paper\", \"yref\":\"paper\", \"x\":1, \"y\":-0.11, \"showarrow\":False, \"font.size\":fontimg-1}]} # Update layout bargen10.update_layout(layoutbar2010) bargen10.show() \rBetween 2010 and 2015, the best-selling title was Kinect Adventures for Xbox 360, which had a focus on enhancing multiplayer gameplay and taking advantage of the latest technological innovation of the mo","date":"2021-11-01","objectID":"/posts/evga/:2:8","tags":["Exploratory Analysis","Python"],"title":"Video Games History plugged by Data","uri":"/posts/evga/"},{"categories":["Projects"],"content":"Summary The video game industry, beyond having started as a simple experiment at MIT, is a lifestyle for many. Like any market, it has had its moments of glory and its difficulties, but if we can rescue something, it is that the secret of its success lies in the emotional bond it generates with its customers. Through this article, my goal is to use data tools to inform the reader about curious events, which perhaps they did not know. I want to thank you for taking the time to read carefully. As a curious detail, there are no easter eggs üòâ Good luck! ","date":"2021-11-01","objectID":"/posts/evga/:3:0","tags":["Exploratory Analysis","Python"],"title":"Video Games History plugged by Data","uri":"/posts/evga/"},{"categories":["Projects"],"content":"Additional Information About the article This infographic article was adapted to a general public, I hope you enjoyed it. In case you are interested in learning more about the development of the script, I invite you to the contact section in my About Page, and with pleasure we can connect. Related Content As a recommendation I suggest a look at this great article, published by Omri Wallach on the Visual Capitalist infographic page, where many interesting details about the industry‚Äôs history are covered. Datasets Videogames Dataset Videogames Developers Regions Indie Developers Regions Footnote: Specific datasets contain information from Publishers, which they were named in the source attribute as Developers, but not in all cases. For more details on the data transformation, please visit my Github repository.¬†‚Ü©Ô∏é ","date":"2021-11-01","objectID":"/posts/evga/:4:0","tags":["Exploratory Analysis","Python"],"title":"Video Games History plugged by Data","uri":"/posts/evga/"},{"categories":["Articles"],"content":"Academic article about a Business Case in which a Natural Language Processing system is deployed in Google Cloud Platform","date":"2021-10-04","objectID":"/posts/gcp_academicsolution/","tags":["Big Data","Google Cloud Services"],"title":"Cloud Service Architecture for NLP in Google Cloud","uri":"/posts/gcp_academicsolution/"},{"categories":["Articles"],"content":"Summary: This academic article was developed through my postgraduate course, DAT-03 Data Analysis in Big Data Environments, which presents a business case in which a company is interested in combining and migrating relational databases in Microsoft SQL Server and Oracle DB. Given the need to feed them with an NLP system output of social networks such as Instagram, Telegram, and Facebook Messenger. Initially, the vulnerabilities that the company has when managing its data in a Local Storage are shown, where it is compared with the advantages of implementing a Cloud Service. This service is compared with others such as Microsoft Azure and Amazon Cloud Services, showing why this solution is the one that best suits the business case. An architecture diagram was designed, covering the required APIs to the ingestion, storage, processing, and loading of the data in BI tools to ease access to the end-user. Finally, financial aspects are covered in terms of operating costs for the proposed solution. In case you want to access it, next you will find a link where it was uploaded to my LinkedIn. Click HERE to access or download. \r","date":"2021-10-04","objectID":"/posts/gcp_academicsolution/:0:1","tags":["Big Data","Google Cloud Services"],"title":"Cloud Service Architecture for NLP in Google Cloud","uri":"/posts/gcp_academicsolution/"},{"categories":["Others"],"content":"Roberto started a new side blog and here are all the details about it","date":"2021-09-27","objectID":"/posts/firstmediumpost/","tags":["Medium","Blog"],"title":"Medium Blog for Analytics","uri":"/posts/firstmediumpost/"},{"categories":["Others"],"content":"\rPerhaps you have noticed in my about section that I have always been interested in documenting my work and write about topics of interest. However, I will use this platform to write about Data Science and Game Analytics plus other interesting topics. Source: Author\" Source: Author \rJust to be in context, I‚Äôll use Medium as side blog for Data Analytics related topics, so on this Website, I will post my projects. Now my next challenge is to figure out how to merge each of these areas, and to follow my progress, here is the Medium hyperlink and some external links from Twitter. Just published an article about how to clean your tweets, extract entities like emojis, hashtags, and mentions using data from @thegameawards 2021, using #tweepyhttps://t.co/xw0GMqRwKk ‚Äî Roberto Aguilar (@robguilarr) November 18, 2021 \rWant to learn how to make queries to the Twitter API using #tweepy? Learn how-to while fetching all those tweets you didn't want to see.https://t.co/PDQP9BjZFS ‚Äî Roberto Aguilar (@robguilarr) November 7, 2021 \rToday I published a quick example about how to fetch Twitter user data using Fork Parker profile as example. #tweepyhttps://t.co/m5eyXgpxJJ ‚Äî Roberto Aguilar (@robguilarr) November 3, 2021 \rHello world! Today I made my first Medium post about #Data Analytics. In the next few days, I'll continue uploading some content to document my path.https://t.co/Z7mi8C6bWv ‚Äî Roberto Aguilar (@robguilarr) November 1, 2021 \r","date":"2021-09-27","objectID":"/posts/firstmediumpost/:0:0","tags":["Medium","Blog"],"title":"Medium Blog for Analytics","uri":"/posts/firstmediumpost/"},{"categories":null,"content":"Contact platforms and information about the author from his background to his personal interests you can access them here","date":"2021-08-02","objectID":"/about/","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"¬†Important: Any views, material or statements expressed are mines and not those of my employer ¬†About my career \rA few years ago I started studying Industrial Engineering, meanwhile, as a hobby, I started learning how to develop mobile games with Unity, because video games have always been one of my favorite hobbies. After a year I started to lose interest in development and continued with my career. Shortly after, a friend told me about Data Science which I was a bit skeptical about at first, since I didn‚Äôt have a clear idea of what it really was. However, one of my favorite subjects was always statistics and probability, so I saw an opportunity to find a new career path. Later I started to learn to use Python, which was made easier for me thanks to my basic knowledge learned in Unity of OOP in C# and since then I started to learn on my own. \r ¬†A little bit about my background The last section describes a very important attribute of me, and it is the motivation to self-learn and never settle, also my researcher perspective has helped me to take new challenges and looking for productive ways to improve every day, that is why I decided to advance a Data Analytics Professional Program. Industrial Production Engineering at TEC Bachelor‚Äôs degree accredited by the Canadian Engineering Accreditation Board (CEAB) in the area of Industrial Engineering. Covering areas such as industrial statistics (Minitab), process simulation, computer aided design (CAD, Solid Works), computer aided manufacturing (CAM), industrial process control and programming (CNC), IT project management fundamentals (SCRUM), continuous improvement processes (Lean Six Sigma). More info here. Data Analyst at Cenfotec Postgraduate as Data Analyst, managing topics such as Data Storytelling in Python with Jupyter Notebooks, ETL with Azure Data Factory, Web Scraping \u0026 API connections with Python Selenium, Data Governance fundamentals, data modeling in Apache Hadoop using HiveQL and visualization of statistical models with D3.js, Tableau and Power BI. More info here. ¬†Experience Throughout my career I have had the opportunity to orient my career towards Business Analytics. Within my most recent roles you can see in detail below. Enterprise Data \u0026 Analytics Intern at VMware Created and migrated data analytics reports of Customer Success area in whole SaaS cycle, embracing all the Customer 360¬∞ environment. As well as the CTA predictive analysis according to the PEME needs of early warnings subscription consumption; via commercial, and financial indicators applied to Big Data. More info at LinkedIn\r June 2020 - September 2020 Business Intelligence Analyst at Belcorp Through prescriptive analytics applied in the field of BI within the B2C sales area, commercial sales variables were managed and reported. In order to create and consult dynamic and real-time reports / dashboards that will make timely decisions for Central American sales plans, according to the needs of sales management. More info at LinkedIn February 2021 - July 2021 ¬†Interests As one of my favorite authors Austin Kleon mentions, ‚ÄúYou don‚Äôt have to be a genius ‚Ä¶. Sometimes amateurs have more to teach us than experts‚Äù, their mindset is different, and they are always willing to learn without looking at limitations. For this reason, I want to show my work, eager to get feedback from people or groups who share the same interests as me. So do you think we share the same interests or at least similar? Regardless of your area, feel free to follow me on Social Media or contact me at one of the links below. ¬†What can I offer? As a Data Analyst, I know how you can use data in terms of exploratory analysis as well as the applicability of basic Supervised Machine Learning models within your business. Aligning the needs of the business, I offer my knowledge in Agile Methods to optimize processes actively and continuously. I also offer my collaboration and I am open to participate in collaborative projects, for which I invi","date":"2021-08-02","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"}]