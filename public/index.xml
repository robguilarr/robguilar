<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Roberto Aguilar</title>
        <link>https://robguilar.com/</link>
        <description>Welcome to Roberto&#39;s portfolio website, through this portal you will be able to see his most recent content &amp; projects published</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is developed and posted only under Roberto&#39;s property</copyright><lastBuildDate>Sun, 24 Jul 2022 21:57:40 &#43;0800</lastBuildDate>
            <atom:link href="https://robguilar.com/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Interpreting changelogs with ANOVA tests on DOTA 2</title>
    <link>https://robguilar.com/posts/anova_dota/</link>
    <pubDate>Sun, 24 Jul 2022 21:57:40 &#43;0800</pubDate><guid>https://robguilar.com/posts/anova_dota/</guid>
    <description><![CDATA[<p>In the world of Multiplayer Online Battle Arena games, also known as MOBA, a <a href="https://www.dota2.com/patches/7.31d" target="_blank" rel="noopener noreffer">changelog</a> is a list of updates that developers make to their games. These modifications are usually minor, but they can be meaningful if they affect the gameplay.</p>
<p>Among the major big titles in the MOBA genre is DOTA 2, which according to Minotti (2015), &ldquo;<em>this game together with League of Legends (LOL), is considered the state-of-the-art in the genre of MOBA, considering that this game emerged from a mod of the widely known MMORPG, World of Warcraft, which then transformed into a major team-based strategy game</em>&rdquo; according to Drachen et. al (2021).</p>
<p>This mod started its development in 2005, by some solo-developers and <a href="https://dota2.fandom.com/wiki/IceFrog" target="_blank" rel="noopener noreffer">Icefrog</a>. The core gameplay design consists of two teams of five players each; each player controls a <a href="https://www.dota2.com/heroes" target="_blank" rel="noopener noreffer">hero</a>. The two teams fight each other on a common battlefield using heroes from different <a href="https://stratz.com/heroes" target="_blank" rel="noopener noreffer">classes</a> that have distinctive abilities and roles within the team structure.</p>
<p>The main goal of this game is to use a <a href="https://en.wikipedia.org/wiki/Multiplayer_online_battle_arena" target="_blank" rel="noopener noreffer">5v5</a> strategy to defend your Ancient and attack the one from the enemy‚Äôs faction. The Ancients are massive structures found inside each faction&rsquo;s base and are the main objective.</p>
<p>In order to win, the enemy team&rsquo;s Ancient must be destroyed, while the own one must be kept alive. Ancients are guarded by their two tier 4 towers and are invulnerable until both towers are destroyed. The map is distributed per lane (refer to the next map designed); Offlane, Safelane, and Midlane, and among the lanes each faction has a total of 11 <a href="https://dota2.fandom.com/wiki/Buildings#Towers" target="_blank" rel="noopener noreffer">Towers</a> to attack enemies; and also each lane has two <a href="https://dota2.fandom.com/wiki/Buildings#Barracks" target="_blank" rel="noopener noreffer">Barracks</a>, one for producing melee creeps and the other for ranged creeps.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Looking for an interactive experience?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">üöÄ Download the Jupyter Notebook, available <a href="https://github.com/robguilarr/anova_dota/blob/master/notebook.ipynb">here</a></div>
        </div>
    </div>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/-cSFPIwMEq4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="-introduction-to-problem">‚ö†Ô∏è Introduction to problem</h2>
<h3 id="hypothesis">Hypothesis</h3>
<p>For online multiplayers, sustainability mirrors the voice of customers. In the case of DOTA, the platform&rsquo;s exclusivity due to the ownership of its developer, <a href="https://www.valvesoftware.com/en/about" target="_blank" rel="noopener noreffer">Valve Corporation</a>, make it more reachable to gather community reviews on time from the Steam store. This, in comparison to other games' developers, who might require to access an endpoint to connect to¬†<a href="https://partner.steamgames.com/doc/store/getreviews" target="_blank" rel="noopener noreffer">Steamworks API</a>¬†to perform the same task.</p>
<p>The Consumer Insights team at Valve gathered all the internal reviews and external‚Äôs from social networks of high traffic in this niche, like Reddit. After an exhaustive NLP analysis, the team has found that players tend to comment about <a href="https://en.wikipedia.org/wiki/Game_balance#Buff_and_nerf" target="_blank" rel="noopener noreffer">Nerfing and Buffing</a> heroes, which is very common in MOBA games when every patch is released. And, since patch 6.86 was released on December 16 of 2015, also known as¬†<a href="https://www.dota2.com/balanceofpower" target="_blank" rel="noopener noreffer">Balance of Power</a>, the team has found many comments about this topic, so they require to generate actionable insights to let the Game Designers take action on time.</p>
<p>After carefully collecting player logs since the released date of this patch, they need to test if effectively the heroes‚Äô stats are unbalanced or not. As the main interaction between enemy players is measured by the damage dealt, this will be defined as the core KPI of this study and with this, we will define our hypothesis as:</p>
<ul>
<li>
<p>After the release date of patch 6.86, the heroes <strong>have recorded</strong> a statistically equal damage.</p>
</li>
<li>
<p>After the release date of patch 6.86, the heroes <strong>haven‚Äôt recorded</strong> a statistically equal damage.</p>
</li>
</ul>
<figure><a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/anova_dota/master/images/map.png" title="https://raw.githubusercontent.com/robguilarr/anova_dota/master/images/map.png" data-thumbnail="https://raw.githubusercontent.com/robguilarr/anova_dota/master/images/map.png" data-sub-html="<h2>Designed by Roberto Aguilar, 2022</h2>">
        
    </a><figcaption class="image-caption">Designed by Roberto Aguilar, 2022</figcaption>
    </figure>
<h3 id="potential-stakeholders">Potential Stakeholders</h3>
<ul>
<li>
<p>Level Designers: if the heroes are balanced in terms of damage, the damage dealt by the creeps will require an investigation, which depends on the design of the map lanes. They must hit a balance between creating easy or hard experiences, and this will rely on the creeps per lane. Another mapping issue that would need to address is the jungle, which is typically filled with¬†<a href="https://dota2.fandom.com/wiki/Creeps" target="_blank" rel="noopener noreffer">creeps</a>¬†that players can kill for¬†<a href="https://dota2.fandom.com/wiki/Jungling#" target="_blank" rel="noopener noreffer">rewards</a>, which the designers require to define how challenging they should be to defeat.</p>
</li>
<li>
<p>Character Designer and Engineers: they evaluate the design of the heroes to be certain that each team is balanced, and confirm there is no side having an unfair benefit. In such cases will have to rebalance the hero stats with the help of the Gameplay Engineer, and adjust the HUD with the help of a Systems Engineer.</p>
</li>
<li>
<p>User Retention team: by working around the Data Analysts, they will support delivering the final report to the Lead Game Designer, about the potential effect on the players' retention in case of not taking quick actions, in the scenario of having a true Null Hypothesis.</p>
</li>
<li>
<p>PR team and Community Manager: they must be aligned to deliver an accurate¬†<a href="https://www.dota2.com/news/updates" target="_blank" rel="noopener noreffer">Patch note</a>¬†with an accurate summary of the next patch to be released.</p>
</li>
<li>
<p>Players community: as the main stakeholder, the core sustainability of this IP comes from the community engagement, so they expect to have a more balanced experience at least for patch 6.86b.</p>
</li>
</ul>
<p><strong>Note:</strong> To facilitate the understanding of the roles of the development team, I invite you to take a look at <strong><a href="https://www.robguilar.com/posts/gamedev_structure/" target="_blank" rel="noopener noreffer">this</a></strong> <a href="https://miro.com/app/board/uXjVOwQVsRk=/?share_link_id=215280076044" target="_blank" rel="noopener noreffer"></a>diagram that I designed.</p>
<h2 id="-about-the-data">üì• About the data</h2>
<p>This dataset was collected on December 17th of 2015 from a sample of¬†<a href="https://dota2.fandom.com/wiki/Matchmaking#Ranked_Match" target="_blank" rel="noopener noreffer">Ranked Matchmaking</a>¬†mode, which holds information from 49,855 different contests, where 149,557 different players formed part of them.</p>
<p>As we mentioned in the <a href="https://github.com/robguilarr/anova_dota/blob/master/preprocess.ipynb" target="_blank" rel="noopener noreffer">preprocessing notebook</a>, the raw extracted data can be found in the¬†<a href="https://academictorrents.com/details/5c5deeb6cfe1c944044367d2e7465fd8bd2f4acf" target="_blank" rel="noopener noreffer">YASP.CO</a>¬†collection from Academic Torrents. This dataset was uploaded and gathered by¬†<a href="https://academictorrents.com/browse.php?search=Albert&#43;Cui" target="_blank" rel="noopener noreffer">Albert Cui</a>¬†et. al (2015). However, you can extract your sample from the¬†<a href="https://www.opendota.com/explorer" target="_blank" rel="noopener noreffer">OpenDota API</a>¬†query interface for the comfort of use.</p>
<h3 id="collection-process-and-structure">Collection process and structure</h3>
<p>According to Albert Cui et. al (2014), OpenDota is a volunteer-developed, open-source service to request DOTA 2 semistructured data gathered from the Steam WebAPI, which has the advantage of retrieving a vast amount of replay files in comparison to the source API. The service also provides a web interface for casual users to browse through the collected data, as well as an API to allow developers to build their applications with it.</p>
<p>The present sample can be found in an archive of¬†<a href="https://academictorrents.com/details/5c5deeb6cfe1c944044367d2e7465fd8bd2f4acf" target="_blank" rel="noopener noreffer">YASP.CO</a>, which was uploaded for the same developers of the OpenDota project,¬†<a href="https://github.com/albertcui" target="_blank" rel="noopener noreffer">Albert Cui</a>,¬†<a href="https://github.com/howardchung" target="_blank" rel="noopener noreffer">Howard Chung</a>, and¬†<a href="https://github.com/nicholashh" target="_blank" rel="noopener noreffer">Nicholas Hanson-Holtry</a>. Due to the size of the data (99 GB), we won&rsquo;t find the raw data in the Github repository of this project, however, you will find a random sample with its respective preprocessing explanation in a Jupyter Notebook.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>As a suggestion, to preprocess data of this size, the most accurate solution is to use parallel computing frameworks like Apache Spark to do the transformations. Web services like Databricks with its Lakehouse Architecture, let us process semi-structured data with the capabilities of a Data Warehouse and the flexibility of a Data Lake, and to do this you can use the Data Science and Engineering environment of the¬†<a href="https://community.cloud.databricks.com/login.html" target="_blank" rel="noopener noreffer">Community Edition</a>¬†for free.</p>
<p>Without diving deeper, let&rsquo;s import the initially needed packages and the preprocessed data.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Basic packages</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span><span class="p">,</span> <span class="n">ceil</span><span class="p">,</span> <span class="n">floor</span>

<span class="c1"># Plotly packages</span>
<span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="nn">px</span>
<span class="kn">import</span> <span class="nn">plotly.graph_objects</span> <span class="k">as</span> <span class="nn">go</span>
<span class="kn">from</span> <span class="nn">plotly.subplots</span> <span class="kn">import</span> <span class="n">make_subplots</span>
<span class="c1"># Plotly static config</span>
<span class="n">static</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;staticPlot&#39;</span><span class="p">:</span> <span class="kc">True</span><span class="p">}</span>

<span class="c1"># Own package for layout of plots</span>
<span class="kn">from</span> <span class="nn">vizformatter.standards</span> <span class="kn">import</span> <span class="n">layout_plotly</span>

<span class="c1"># Load layout base objects</span>
<span class="n">sign</span><span class="p">,</span> <span class="n">layout</span> <span class="o">=</span> <span class="n">layout_plotly</span><span class="p">(</span><span class="n">height</span><span class="o">=</span> <span class="mi">720</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span> <span class="mi">15</span><span class="p">)</span>

<span class="c1"># Import preprocessed data</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;DOTA_data/data.csv&#34;</span><span class="p">,</span> <span class="n">index_col</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">na_values</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;N/A&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="s2">&#34; &#34;</span><span class="p">,</span> <span class="s2">&#34;nan&#34;</span><span class="p">])</span>
<span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="left"></p>
<p>As we can notice, in our data we have a total of 28 attributes, however, not all of them will be used in this study but for future investigations of extra user metrics, we see that all the assembled data could be a useful asset. In such case you require the description of one of these attributes, please guide yourself with the¬†<strong>Appendix</strong> at the end of the¬†<a href="https://github.com/robguilarr/anova_dota/blob/master/preprocess.ipynb" target="_blank" rel="noopener noreffer">preprocess notebook</a>, where you will find a punctual explanation.</p>
<h2 id="-data-preprocessing">üîß Data Preprocessing</h2>
<p>Almost every transformation was made on the preprocessing notebook, there you will encounter different blocs like the joins of hero descriptions, items used per session, and match outcomes to the main table of players' registries. In the end, also will be a distribution study, to exclude outliers based on irregularities recorded on sessions (impossible values). Knowing this, we can say that the data is ready to go, so we can skip the Data Cleaning section. Here we are going to do an overall inspection.</p>
<h3 id="data-consistency">Data Consistency</h3>
<p>Considering conceivable errors in the telemetry logs, we require to validate the lack of missing values on each one of the features.</p>
<p>One of the attributes that required a substantial transformation to infer and extract descriptive values for each player was the ‚Äúplayer_slot‚Äù, which is no more in the present dataset. This value was an 8-bit unsigned integer, where the first digit defined the faction (Radiant | Dire), the next four digits were empty and the last three defined the lane role of the player within the team. The encoding is part of the reason why there were present some missing data that wasn‚Äôt describing the record.</p>
<p>After the pruning was executed, the sample remain significant in size with 290,000 records, and by the next table, we can verify it.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">nullCounter</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="c1"># Create empty lists</span>
    <span class="n">columns</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">nulls</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">perc</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">total_rows</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">)):</span>
        <span class="c1"># Null values</span>
        <span class="n">null_counter</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>

        <span class="c1"># Append only columns with null values</span>
        <span class="k">if</span> <span class="n">null_counter</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="c1"># Append values to lists</span>
            <span class="n">columns</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">nulls</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">null_counter</span><span class="p">)</span>

            <span class="c1"># Generate percentage</span>
            <span class="n">perc_value</span> <span class="o">=</span> <span class="n">null_counter</span><span class="o">/</span><span class="n">total_rows</span>
            <span class="n">perc</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">{:.2%}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">perc_value</span><span class="p">))</span>

    <span class="c1"># Create DF from lists</span>
    <span class="n">nullsTable</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;Null Values&#39;</span><span class="p">:</span><span class="n">nulls</span><span class="p">,</span> <span class="s1">&#39;Fraction&#39;</span><span class="p">:</span><span class="n">perc</span><span class="p">})</span><span class="o">.</span><span class="n">T</span>
    <span class="n">nullsTable</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">columns</span>

    <span class="k">return</span> <span class="n">nullsTable</span>

<span class="n">nullCounter</span><span class="p">(</span><span class="n">data</span><span class="o">=</span> <span class="n">data</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p align="left"></p>
<p>The columns with more NA values are the ones relative to the player position. In case of any comparison needed in terms of lane position, we will take another sample ensuring that we have a significant size to run our tests.</p>
<h3 id="data-distribution-validation">Data Distribution Validation</h3>
<p>Every column is already transformed into its respective data type, and depending on the analysis needed we should require to retransform it or even apply a linear scaling method to be interpreted.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span> <span class="p">[</span><span class="s2">&#34;number&#34;</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><p align="left"></p>
<p>We can see each value defined by the percentiles, however, is preferable to have a straightforward vision to conclude about each feature.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Load a new layout for grid axis</span>
<span class="n">signGrid</span><span class="p">,</span> <span class="n">layoutGrid</span> <span class="o">=</span> <span class="n">layout_plotly</span><span class="p">(</span><span class="n">height</span><span class="o">=</span> <span class="mi">900</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span> <span class="mi">1200</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span> <span class="mi">12</span><span class="p">)</span>

<span class="c1"># Function to generate grid of boxplots</span>
<span class="k">def</span> <span class="nf">gridDist</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">layout</span><span class="p">,</span> <span class="n">sign</span><span class="p">):</span>
    <span class="c1"># Validate not using ids in the grid</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;_id&#39;</span><span class="p">))</span> <span class="ow">or</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="s1">&#39;id&#39;</span><span class="p">):</span>
            <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>

    <span class="c1"># Extract columns with numeric values</span>
    <span class="n">numerics</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;int16&#39;</span><span class="p">,</span> <span class="s1">&#39;int32&#39;</span><span class="p">,</span> <span class="s1">&#39;int64&#39;</span><span class="p">,</span> <span class="s1">&#39;float16&#39;</span><span class="p">,</span> <span class="s1">&#39;float32&#39;</span><span class="p">,</span> <span class="s1">&#39;float64&#39;</span><span class="p">]</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="n">numerics</span><span class="p">)</span>

    <span class="c1"># Calculate grid space, for columns and rows in the layout</span>
    <span class="n">num_col</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span>
    <span class="n">cols</span> <span class="o">=</span> <span class="n">ceil</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">num_col</span><span class="p">))</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">cols</span>

    <span class="c1"># Generate subplots grid</span>
    <span class="n">grid</span> <span class="o">=</span> <span class="n">make_subplots</span><span class="p">(</span><span class="n">rows</span><span class="o">=</span><span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="o">=</span><span class="n">cols</span><span class="p">)</span>

    <span class="c1"># Populating spaces with Graphic objects</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">rows</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">cols</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">column_name</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span>
                <span class="n">trace</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Box</span><span class="p">(</span><span class="n">x</span><span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">column_name</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span> <span class="n">column_name</span><span class="p">)</span>
                <span class="n">grid</span><span class="o">.</span><span class="n">append_trace</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">counter</span> <span class="o">==</span> <span class="n">num_col</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">counter</span> <span class="o">+=</span><span class="mi">1</span>

    <span class="c1"># Adding layout conf</span>
    <span class="n">grid</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
    <span class="n">grid</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">showlegend</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
    <span class="n">grid</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>

    <span class="c1"># Disable interactivity by transforming image to bytes</span>
    <span class="n">static</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;staticPlot&#39;</span><span class="p">:</span> <span class="kc">True</span><span class="p">}</span>

    <span class="k">return</span> <span class="n">grid</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">config</span> <span class="o">=</span> <span class="n">static</span><span class="p">)</span>

<span class="n">gridDist</span><span class="p">(</span><span class="n">data</span><span class="o">=</span> <span class="n">data</span><span class="p">,</span> <span class="n">layout</span><span class="o">=</span> <span class="n">layoutGrid</span><span class="p">,</span> <span class="n">sign</span><span class="o">=</span> <span class="n">signGrid</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>From the dispersal of each attribute, we can notice that most of the data is right-skewed. We don&rsquo;t have any information bonded to system anomalies during data collection, so from the variables that we are going to use in our analysis, we can notice descriptive behaviors like:</p>
<ul>
<li>
<p>Per session players usually report, on average, a total of 11 assists and 6 kills with a median hero damage score of 10,500.</p>
</li>
<li>
<p>There is a big segment of outliers from players who healed allies, with a value of over 233 points. Making general assumptions over its distribution wouldn&rsquo;t be accurate, because that segment could be linked with the Hard Support role.</p>
</li>
<li>
<p>The same situation happens with the gold collected and the tower damage, where there is a great number of scores above the 75% percentile, which can be due to lane role differences like Soft Support which is usually a role used for¬†<a href="https://dota2.fandom.com/wiki/Jungling#" target="_blank" rel="noopener noreffer">Jungling</a>.</p>
</li>
</ul>
<p>In our exploratory analysis, we will have to study these metrics by lane, because each lane has different roles, and some aren&rsquo;t directly comparable. Nevertheless, that&rsquo;s also something that we&rsquo;ll need to demonstrate with a hypothesis test between lanes.</p>
<h2 id="-exploratory-analysis--in-game-interpretations">üîç Exploratory Analysis &amp; In-game interpretations</h2>
<p>Before going through the hypothesis test, let‚Äôs explore the behavior within the categorical variables to check the consistency within the descriptive attributes for the players on each lane.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span> <span class="p">[</span><span class="s2">&#34;object&#34;</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><p align="left"></p>
<p>At first sight, the most common role in our data corresponds to the Offlaner and the most used hero is Windranger, and this makes sense since is one of the heroes with a higher Win Rate on the Offlaner role according to¬†<a href="https://www.dotabuff.com/heroes/windranger" target="_blank" rel="noopener noreffer">DOTABUFF</a>. Also, the two most used shop items are the¬†<a href="https://dota2.fandom.com/wiki/Town_Portal_Scroll" target="_blank" rel="noopener noreffer">Town Portal Scroll</a>¬†and the¬†<a href="https://dota2.fandom.com/wiki/Blink_Dagger" target="_blank" rel="noopener noreffer">Blink Dagger</a>.</p>
<p>But since we have numerous combinations between heroes and items, this might not be the most accurate way to make inferences. So let&rsquo;s look at the combinations for the Radiant and Dire factions.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Get combination of items and heroes</span>
<span class="k">def</span> <span class="nf">combItemHero</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">side</span><span class="p">):</span>
    <span class="c1"># Subset Faction/Side</span>
    <span class="n">data</span><span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">side</span> <span class="o">==</span> <span class="n">side</span><span class="p">]</span>
    <span class="c1"># Subset categorical variables</span>
    <span class="n">itemHero</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="s2">&#34;object&#34;</span><span class="p">)</span>
    <span class="c1"># Exclude unused columns</span>
    <span class="n">itemHero</span> <span class="o">=</span> <span class="n">itemHero</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,</span><span class="o">~</span><span class="n">itemHero</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="s1">&#39;lane&#39;</span><span class="p">,</span><span class="s1">&#39;role&#39;</span><span class="p">,</span><span class="s1">&#39;side&#39;</span><span class="p">])]</span>
    <span class="c1"># Pivot Table</span>
    <span class="n">itemHero</span> <span class="o">=</span> <span class="n">itemHero</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s2">&#34;hero_name&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">stack</span><span class="p">()</span>\
        <span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
    <span class="c1"># Add counter</span>
    <span class="n">itemHero</span><span class="p">[</span><span class="s1">&#39;counter&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">itemHero</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
    <span class="c1"># Drop items column</span>
    <span class="n">itemHero</span> <span class="o">=</span> <span class="n">itemHero</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">labels</span><span class="o">=</span> <span class="p">[</span><span class="s2">&#34;level_1&#34;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="c1"># Rename columns</span>
    <span class="n">itemHero</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;hero_name&#39;</span><span class="p">,</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">]</span>
    <span class="c1"># Get combinations DF</span>
    <span class="n">itemHero</span> <span class="o">=</span> <span class="n">itemHero</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;hero_name&#39;</span><span class="p">,</span><span class="s1">&#39;item&#39;</span><span class="p">])[</span><span class="s1">&#39;value&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>\
        <span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
    <span class="c1"># Create combination column</span>
    <span class="n">itemHero</span><span class="p">[</span><span class="s1">&#39;stage&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">itemHero</span><span class="o">.</span><span class="n">hero_name</span> <span class="o">+</span> <span class="s1">&#39; with &#39;</span> <span class="o">+</span> <span class="n">itemHero</span><span class="o">.</span><span class="n">item</span>
    <span class="c1"># Reorder columns</span>
    <span class="n">itemHero</span> <span class="o">=</span> <span class="n">itemHero</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,</span><span class="nb">sorted</span><span class="p">(</span><span class="n">itemHero</span><span class="o">.</span><span class="n">columns</span><span class="p">)]</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;hero_name&#39;</span><span class="p">,</span><span class="s1">&#39;item&#39;</span><span class="p">])</span>
    <span class="c1"># Add side column</span>
    <span class="n">itemHero</span><span class="p">[</span><span class="s1">&#39;side&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">side</span>

    <span class="k">return</span> <span class="n">itemHero</span>

<span class="c1"># Drop empty hero names</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="o">.</span><span class="n">hero_name</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span> <span class="o">==</span> <span class="kc">False</span><span class="p">]</span>

<span class="c1"># Set new dataframes</span>
<span class="n">itemHeroRad</span><span class="o">=</span> <span class="n">combItemHero</span><span class="p">(</span><span class="n">df</span><span class="o">=</span> <span class="n">data</span><span class="p">,</span> <span class="n">side</span><span class="o">=</span> <span class="s1">&#39;Radiant&#39;</span><span class="p">)</span>
<span class="n">itemHeroDire</span><span class="o">=</span> <span class="n">combItemHero</span><span class="p">(</span><span class="n">df</span><span class="o">=</span> <span class="n">data</span><span class="p">,</span> <span class="n">side</span><span class="o">=</span> <span class="s1">&#39;Dire&#39;</span><span class="p">)</span>
<span class="c1"># Concatenate dataframes</span>
<span class="n">allItemHero</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">itemHeroRad</span><span class="p">,</span> <span class="n">itemHeroDire</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
<span class="c1"># Generate Visuals</span>
<span class="n">allItemHero</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">funnel</span><span class="p">(</span><span class="n">allItemHero</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">17</span><span class="p">),</span> <span class="n">x</span><span class="o">=</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;stage&#39;</span><span class="p">,</span>
                        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;side&#39;</span><span class="p">,</span> <span class="n">color_discrete_sequence</span><span class="o">=</span> <span class="p">[</span><span class="s1">&#39;#E25822&#39;</span><span class="p">,</span><span class="s1">&#39;#2C538F&#39;</span><span class="p">])</span>
<span class="n">allItemHero</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">allItemHero</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span><span class="s1">&#39;Combinations recorded of Hero and Items from 50K sessions&#39;</span><span class="p">},</span>
                            <span class="n">yaxis_title</span><span class="o">=</span><span class="s2">&#34;Combinations&#34;</span><span class="p">)</span>
<span class="n">allItemHero</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">allItemHero</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">config</span> <span class="o">=</span> <span class="n">static</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>Now we can verify the initial statement that the Windranger is the most played hero, but at the same time, we can check that the Town Portal Scroll and the Blink Dagger are not the most used for this hero, meaning that their use is because of commonness and not because it&rsquo;s a good fit for that hero.</p>
<ul>
<li>
<p><strong>Windranger</strong>¬†it&rsquo;s a ranged hero that can buff her stats by 3.75% in¬†<a href="https://dota2.fandom.com/wiki/Movement_speed" target="_blank" rel="noopener noreffer">movement speed</a>. According to¬†<a href="https://dotesports.com/news/how-to-play-windranger-like-liquid-w33" target="_blank" rel="noopener noreffer">Tan Guan</a>, these boots supply the most damage out of any boots choice, and the six armor allows an Intelligence hero to have a mana-less option to chase the enemy down. Also, the Phase active brings you up to max movement speed with Windrun (another physical ability for movement speed).</p>
</li>
<li>
<p>The same case is for¬†<strong>Shadow Fiend</strong>¬†using Power Treads, where some advanced strategies are possible for players who like to micromanage or wish to maximize their efficiency in a competitive setting. Like switching the Power Treads to Intelligence before a fight to allow this hero to cast one more spell.</p>
</li>
</ul>
<p>While examining patches, it&rsquo;s always important to examine the performance of the character by sampling the player statistics. In such case of DOTA, it would let the designers decide which heroes need to be nerfed and which need to be buffed, by delivering changes in a patch log attached to the bottom side of the¬†<a href="https://www.dota2.com/balanceofpower" target="_blank" rel="noopener noreffer">documentation website</a>. To put you in context,¬†<strong>nerfed</strong>¬†means a negative effect on the hero&rsquo;s stats, while¬†<strong>buffed</strong>¬†means the opposite, given an update (patch) on the game.</p>
<h3 id="-overview-of-metrics-by-lane-roles">üåç Overview of Metrics by Lane Roles</h3>
<p>We saw that generalizing about all the heroes and extracting insights, it‚Äôs not the best way to produce findings, because many times the perspective can bias our interpretations, especially while dealing with Big Data.</p>
<p>As we move on to the next analysis, the main intent is to narrow down our scope of analysis (data sample), so to start let‚Äôs compare the core metrics by role lane.</p>
<p>First, let‚Äôs see the scores for how much a player heals their allies' heroes, how much the player damages the enemys' heroes, and how many times each player dies on average, taking as a group the role assigned in the lane.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Function to scale variables using &#34;Linear Scaling&#34;</span>
<span class="k">def</span> <span class="nf">linearScale</span><span class="p">(</span><span class="n">array</span><span class="p">):</span>
    <span class="n">scaled</span> <span class="o">=</span> <span class="p">(</span><span class="n">array</span> <span class="o">-</span> <span class="n">array</span><span class="o">.</span><span class="n">min</span><span class="p">())</span> <span class="o">/</span> <span class="p">(</span><span class="n">array</span><span class="o">.</span><span class="n">max</span><span class="p">()</span> <span class="o">-</span> <span class="n">array</span><span class="o">.</span><span class="n">min</span><span class="p">())</span>
    <span class="n">scaled</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">scaled</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">scaled</span>

<span class="c1"># Subset required columns</span>
<span class="n">dataHeal</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="s1">&#39;role&#39;</span><span class="p">,</span><span class="s1">&#39;deaths&#39;</span><span class="p">,</span><span class="s1">&#39;hero_healing&#39;</span><span class="p">,</span><span class="s1">&#39;hero_damage&#39;</span><span class="p">])]</span>

<span class="c1"># Reorder columns</span>
<span class="n">dataHeal</span> <span class="o">=</span> <span class="n">dataHeal</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,</span><span class="nb">sorted</span><span class="p">(</span><span class="n">dataHeal</span><span class="o">.</span><span class="n">columns</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span> <span class="kc">True</span><span class="p">)]</span>

<span class="c1"># Extract only the subset of players that healed during session</span>
<span class="n">dataHeal</span> <span class="o">=</span> <span class="n">dataHeal</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;role&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>

<span class="c1"># Load a new layout for parallel axis</span>
<span class="n">signPar</span><span class="p">,</span> <span class="n">layoutPar</span> <span class="o">=</span> <span class="n">layout_plotly</span><span class="p">(</span><span class="n">height</span><span class="o">=</span> <span class="mi">700</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span> <span class="mi">1500</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span> <span class="mi">14</span><span class="p">)</span>

<span class="c1"># Generate Parallel Coordinates plot</span>
<span class="n">parallel</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Figure</span><span class="p">(</span><span class="n">data</span><span class="o">=</span>
    <span class="n">go</span><span class="o">.</span><span class="n">Parcoords</span><span class="p">(</span>
        <span class="n">line</span><span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">color</span><span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span>
               <span class="n">colorscale</span><span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;#3BE8B0&#39;</span><span class="p">],[</span><span class="mf">0.25</span><span class="p">,</span><span class="s1">&#39;#1AAFD0&#39;</span><span class="p">],[</span><span class="mf">0.5</span><span class="p">,</span><span class="s1">&#39;#6A67CE&#39;</span><span class="p">],[</span><span class="mf">0.75</span><span class="p">,</span><span class="s1">&#39;#FFB900&#39;</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;#FC636B&#39;</span><span class="p">]]),</span>
        <span class="n">dimensions</span> <span class="o">=</span> <span class="nb">list</span><span class="p">([</span>
            <span class="nb">dict</span><span class="p">(</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">dataHeal</span><span class="o">.</span><span class="n">role</span><span class="p">)],</span>
                 <span class="n">tickvals</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span>
                 <span class="n">label</span> <span class="o">=</span> <span class="s1">&#39;Role&#39;</span><span class="p">,</span> <span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span>
                 <span class="n">ticktext</span> <span class="o">=</span> <span class="n">dataHeal</span><span class="o">.</span><span class="n">role</span><span class="p">),</span>
            <span class="nb">dict</span><span class="p">(</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="n">floor</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">dataHeal</span><span class="o">.</span><span class="n">hero_healing</span><span class="p">)),</span> <span class="n">ceil</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">dataHeal</span><span class="o">.</span><span class="n">hero_healing</span><span class="p">))],</span>
                 <span class="c1">#tickvals = [0,0.25,0.5,0.75,1],</span>
                 <span class="n">label</span> <span class="o">=</span> <span class="s1">&#39;Healing&#39;</span><span class="p">,</span> <span class="n">values</span> <span class="o">=</span> <span class="n">dataHeal</span><span class="o">.</span><span class="n">hero_healing</span><span class="p">),</span>
            <span class="nb">dict</span><span class="p">(</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="n">floor</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">dataHeal</span><span class="o">.</span><span class="n">hero_damage</span><span class="p">)),</span> <span class="n">ceil</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">dataHeal</span><span class="o">.</span><span class="n">hero_damage</span><span class="p">))],</span>
                 <span class="c1">#tickvals = [0,0.25,0.5,0.75,1],</span>
                 <span class="n">label</span> <span class="o">=</span> <span class="s1">&#39;Damage&#39;</span><span class="p">,</span> <span class="n">values</span> <span class="o">=</span> <span class="n">dataHeal</span><span class="o">.</span><span class="n">hero_damage</span><span class="p">),</span>
            <span class="nb">dict</span><span class="p">(</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="n">floor</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">linearScale</span><span class="p">(</span><span class="n">dataHeal</span><span class="o">.</span><span class="n">deaths</span><span class="p">))),</span> <span class="n">ceil</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">linearScale</span><span class="p">(</span><span class="n">dataHeal</span><span class="o">.</span><span class="n">deaths</span><span class="p">)))],</span>
                 <span class="c1">#tickvals = [0,0.25,0.5,0.75,1],</span>
                 <span class="n">label</span> <span class="o">=</span> <span class="s1">&#39;Scaled Deaths&#39;</span><span class="p">,</span> <span class="n">values</span> <span class="o">=</span> <span class="n">linearScale</span><span class="p">(</span><span class="n">dataHeal</span><span class="o">.</span><span class="n">deaths</span><span class="p">))</span>
        <span class="p">])</span>
    <span class="p">)</span>
<span class="p">)</span>

<span class="c1"># Assign layout for parallel axis</span>
<span class="n">parallel</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layoutPar</span><span class="p">)</span>
<span class="n">parallel</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">margin</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;t&#34;</span><span class="p">:</span> <span class="mi">125</span><span class="p">,</span>
                        <span class="s2">&#34;l&#34;</span><span class="p">:</span> <span class="mi">100</span><span class="p">})</span>
<span class="n">parallel</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span><span class="s2">&#34;User Metrics comparison by Role Lane&#34;</span><span class="p">})</span>
<span class="n">parallel</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">signPar</span><span class="p">)</span>
<span class="n">parallel</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">config</span> <span class="o">=</span> <span class="n">static</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>From the last visual we can drag the next insights:</p>
<ul>
<li>
<p><strong>Soft support</strong>¬†is the role where they dedicate less effort to healing their teammates (due to their freedom is the role used for Jungling), while¬†<strong>Midlaners</strong>¬†dedicate more time to healing teammates. This is probably due to their high mobility during the session, and because they have the major responsibility to be the team&rsquo;s playmakers, according to Zach the DOTA¬†<a href="https://www.patreon.com/ZQuixotix" target="_blank" rel="noopener noreffer">coach</a>.</p>
</li>
<li>
<p>In terms of Damage dealt, we can say that by far Soft Support and Midlaners are the positions that dealt more damage, while¬†<strong>Hard Carry</strong>¬†is the opposite because they require a clear vision of the momentum between staying in the Safelane with the Hard Support or moving through the Offlane to attack enemy buildings.</p>
</li>
<li>
<p>As being a¬†<strong>Hard Support</strong>¬†is the less complex role to start, heal more, and damage less. According to Zach the DOTA¬†<a href="https://www.patreon.com/ZQuixotix" target="_blank" rel="noopener noreffer">coach</a>, they need to farm a little and be actively healing their teammates. At the same time, they need to know where to be positioned, cause if one core is farming a lot, you will need to be actively doing the same; if one core is always in action they need to be healing.</p>
</li>
</ul>
<p>We saw that Soft Support and the Midlaners have a very similar average of Damage Dealt per session, so we can analyze by checking the Kills logs by hero.</p>
<h3 id="-kills-logs-comparison-grouped-by-role-and-hero">‚ò†Ô∏è Kills logs comparison grouped by Role and Hero</h3>
<p>The core interaction between enemy players is measured by Kills. We&rsquo;ll compare the logs by groups; one being grouped by Role and another by Hero, keeping in mind that the main intent is to discover the more buffed heroes since the release of the last patch.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Function to aggregate variables by group</span>
<span class="k">def</span> <span class="nf">groupGen</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">grouper</span><span class="p">,</span> <span class="n">variable</span><span class="p">,</span> <span class="n">top</span><span class="p">):</span>
    <span class="c1"># Aggregate new dataframe</span>
    <span class="n">dataCoord</span> <span class="o">=</span> <span class="n">data</span><span class="p">[[</span><span class="n">grouper</span><span class="p">,</span><span class="n">variable</span><span class="p">]]</span>
    <span class="n">dataCoord</span> <span class="o">=</span> <span class="n">dataCoord</span><span class="p">[</span><span class="n">dataCoord</span><span class="p">[</span><span class="n">grouper</span><span class="p">]</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span> <span class="o">==</span> <span class="kc">False</span><span class="p">]</span>
    <span class="n">dataCoord</span> <span class="o">=</span> <span class="n">dataCoord</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">grouper</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
    <span class="c1"># Normalize the data with Linear Scaling</span>
    <span class="n">dataCoord</span><span class="p">[</span><span class="n">variable</span><span class="p">]</span> <span class="o">=</span> <span class="n">linearScale</span><span class="p">(</span><span class="n">dataCoord</span><span class="p">[</span><span class="n">variable</span><span class="p">])</span>
    <span class="c1"># Resort DF randomly</span>
    <span class="n">dataCoord</span> <span class="o">=</span> <span class="n">dataCoord</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span> <span class="n">variable</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="n">top</span><span class="p">)</span>
    <span class="n">dataCoord</span> <span class="o">=</span> <span class="n">dataCoord</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">frac</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">dataCoord</span>

<span class="c1"># Generate aggregated data for heros and roles</span>
<span class="n">heroGroup</span> <span class="o">=</span> <span class="n">groupGen</span><span class="p">(</span><span class="n">data</span><span class="o">=</span> <span class="n">data</span><span class="p">,</span> <span class="n">grouper</span><span class="o">=</span> <span class="s1">&#39;hero_name&#39;</span><span class="p">,</span> <span class="n">variable</span><span class="o">=</span> <span class="s1">&#39;kills&#39;</span><span class="p">,</span> <span class="n">top</span><span class="o">=</span> <span class="mi">30</span><span class="p">)</span>
<span class="n">roleGroup</span> <span class="o">=</span> <span class="n">groupGen</span><span class="p">(</span><span class="n">data</span><span class="o">=</span> <span class="n">data</span><span class="p">,</span> <span class="n">grouper</span><span class="o">=</span> <span class="s1">&#39;role&#39;</span><span class="p">,</span> <span class="n">variable</span><span class="o">=</span> <span class="s1">&#39;kills&#39;</span><span class="p">,</span> <span class="n">top</span><span class="o">=</span> <span class="mi">5</span><span class="p">)</span>

<span class="c1"># Load a new layout for polar axis</span>
<span class="n">signPolar</span><span class="p">,</span> <span class="n">layoutPolar</span> <span class="o">=</span> <span class="n">layout_plotly</span><span class="p">(</span><span class="n">height</span><span class="o">=</span> <span class="mi">700</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span> <span class="mi">1750</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span> <span class="mi">13</span><span class="p">)</span>

<span class="c1"># Create subplot layout, with 2 subplots of polar type</span>
<span class="n">polars</span> <span class="o">=</span> <span class="n">make_subplots</span><span class="p">(</span><span class="n">rows</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">cols</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">specs</span><span class="o">=</span><span class="p">[[{</span><span class="s1">&#39;type&#39;</span><span class="p">:</span> <span class="s1">&#39;polar&#39;</span><span class="p">}]</span><span class="o">*</span><span class="mi">2</span><span class="p">])</span>

<span class="c1"># Add subplot graphic objects</span>
<span class="n">polars</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Scatterpolar</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Kills by role&#34;</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">roleGroup</span><span class="o">.</span><span class="n">kills</span><span class="p">,</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">roleGroup</span><span class="o">.</span><span class="n">role</span><span class="p">,</span> <span class="n">line_color</span> <span class="o">=</span> <span class="s2">&#34;#007fff&#34;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span> <span class="s1">&#39;lines&#39;</span><span class="p">),</span> 
                            <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s1">&#39;toself&#39;</span><span class="p">)</span>
<span class="n">polars</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Barpolar</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Kills by hero&#34;</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">heroGroup</span><span class="o">.</span><span class="n">kills</span><span class="p">,</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">heroGroup</span><span class="o">.</span><span class="n">hero_name</span><span class="p">),</span>
                           <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

<span class="c1"># Add layout format</span>
<span class="n">polars</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">template</span><span class="o">=</span><span class="s2">&#34;plotly_dark&#34;</span><span class="p">)</span>
<span class="n">polars</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layoutPolar</span><span class="p">)</span>
<span class="n">polars</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span><span class="s2">&#34;Linearly scaled kills log by role and hero&#34;</span><span class="p">})</span>
<span class="n">polars</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">signPolar</span><span class="p">)</span>
<span class="n">polars</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">config</span><span class="o">=</span> <span class="n">static</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>In terms of kills, we can justify these stats by looking at the updates given in the changelogs of patch 6.86:</p>
<ul>
<li>
<p><a href="https://dota2.fandom.com/wiki/Riki/Changelogs" target="_blank" rel="noopener noreffer">Riki</a>: since this hero was introduced with the new &lsquo;Cloak and Dagger&rsquo; ability, he can become invisible each time attacks an enemy from behind, which is a perfect combination with ‚ÄòBlink Strike‚Äô which was transformed into basic agility. This second gives the user bonus damage for attacks from behind and also does a quick teleport to the enemy&rsquo;s back, giving more to use this combination.</p>
</li>
<li>
<p><a href="https://dota2.fandom.com/wiki/Huskar/Changelogs" target="_blank" rel="noopener noreffer">Huskar</a>: This hero received a hard magic resistance and attack bonus speed mechanical change with bonus changes from 5% to 50%.</p>
</li>
<li>
<p><a href="https://dota2.fandom.com/wiki/Ursa/Changelogs" target="_blank" rel="noopener noreffer">Ursa</a>: known as one of the heroes most used to Jungling, in this patch the &lsquo;Aghanim&rsquo;s Scepter&rsquo; was added to this hero which also let him cast the ‚ÄòEnrage‚Äô ability while being stunned, slept, taunted, hidden, or during forced movement. The main use of ‚ÄòEnrage‚Äô is to reduce the income damage by ~80%.</p>
</li>
</ul>
<p>Midlaner and Soft Support are the roles with more kills registered, which are the 2 positions in which Riki, Huskar, Ursa, and Queen of Pain are used because they are in the¬†<a href="https://dota2.fandom.com/wiki/Category:Carries#" target="_blank" rel="noopener noreffer">Carry</a>¬†heroes category.</p>
<p>From the last global perspective of heroes and lanes, the purpose of the analysis is to let it evolve as granular as possible to handle detailed deductions, so let&rsquo;s compare the Soft Support and Midlaner roles to decide on which to concentrate our study.</p>
<h3 id="-two-sample-mann-whitney-test-for-kills-logs-by-role-lane-for-carries">üßùüèª‚Äç‚ôÇÔ∏è Two Sample Mann-Whitney Test for Kills logs by Role Lane for Carries</h3>
<p>We still doubt which of the two roles is the one preferred to use Carry heroes, in other words, those that are used to rank up by logging as many kills as possible.</p>
<p>To do this we can run a two-sample t-test, so first let&rsquo;s check the normality since this is a must-have assumption.</p>
<p>It&rsquo;s important to mention that to respect the¬†<a href="https://en.wikipedia.org/wiki/Independence_%28probability_theory%29" target="_blank" rel="noopener noreffer">independence</a>¬†assumption, in the last code we extracted one record per player from a random¬†<strong>resampled without replacement</strong>¬†data frame. This is in case the player count with multiple sessions logged. For this test, we prefer to have a randomized sample where the groups are¬†<strong>mutually exclusive</strong>, so a player can only belong to one role group.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">stats</span>

<span class="c1"># Normality check function</span>
<span class="k">def</span> <span class="nf">normality_two_sample</span><span class="p">(</span><span class="n">data1</span><span class="p">,</span> <span class="n">data2</span><span class="p">):</span>
    <span class="n">stat_1</span><span class="p">,</span> <span class="n">p_1</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">normaltest</span><span class="p">(</span><span class="n">data1</span><span class="p">)</span>
    <span class="n">stat_2</span><span class="p">,</span> <span class="n">p_2</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">normaltest</span><span class="p">(</span><span class="n">data2</span><span class="p">)</span>

    <span class="c1"># Validate p_value</span>
    <span class="k">if</span> <span class="n">p_1</span> <span class="o">&lt;</span> <span class="mf">0.5</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">p_2</span> <span class="o">&lt;</span> <span class="mf">0.5</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;At least one sample is not normal,</span><span class="se">\n</span><span class="s1">where &#39;</span>
            <span class="s1">&#39;the p values are: </span><span class="si">{p_1:.6f}</span><span class="s1"> and </span><span class="si">{p_2:.6f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_1</span><span class="o">=</span> <span class="n">p_1</span><span class="p">,</span><span class="n">p_2</span><span class="o">=</span> <span class="n">p_2</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Only Soft_Support sample is normal,</span><span class="se">\n</span><span class="s1">where &#39;</span>
            <span class="s1">&#39;the p values are: </span><span class="si">{p_1:.6f}</span><span class="s1"> and </span><span class="si">{p_2:.6f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_1</span><span class="o">=</span> <span class="n">p_1</span><span class="p">,</span><span class="n">p_2</span><span class="o">=</span> <span class="n">p_2</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">p_2</span> <span class="o">&lt;</span> <span class="mf">0.5</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Only Mid sample is normal,</span><span class="se">\n</span><span class="s1">where &#39;</span>
            <span class="s1">&#39;the p values are: </span><span class="si">{p_1:.6f}</span><span class="s1"> and </span><span class="si">{p_2:.6f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_1</span><span class="o">=</span> <span class="n">p_1</span><span class="p">,</span><span class="n">p_2</span><span class="o">=</span> <span class="n">p_2</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;At least one sample is not normal,</span><span class="se">\n</span><span class="s1">where &#39;</span>
            <span class="s1">&#39;the p values are: </span><span class="si">{p_1:.6f}</span><span class="s1"> and </span><span class="si">{p_2:.6f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_1</span><span class="o">=</span> <span class="n">p_1</span><span class="p">,</span><span class="n">p_2</span><span class="o">=</span> <span class="n">p_2</span><span class="p">))</span>

<span class="c1"># List of heroes for Carry role</span>
<span class="n">carries</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Shadow_Fiend&#39;</span><span class="p">,</span> <span class="s1">&#39;Ember_Spirit&#39;</span><span class="p">,</span> <span class="s1">&#39;Alchemist&#39;</span><span class="p">,</span> <span class="s1">&#39;Meepo&#39;</span><span class="p">,</span> <span class="s1">&#39;Queen_of_Pain&#39;</span><span class="p">,</span>
        <span class="s1">&#39;Windranger&#39;</span><span class="p">,</span> <span class="s1">&#39;Spectre&#39;</span><span class="p">,</span> <span class="s1">&#39;Terrorblade&#39;</span><span class="p">,</span> <span class="s1">&#39;Faceless_Void&#39;</span><span class="p">,</span> <span class="s1">&#39;Brewmaster&#39;</span><span class="p">,</span>
        <span class="s1">&#39;Viper&#39;</span><span class="p">,</span> <span class="s1">&#39;Doom&#39;</span><span class="p">,</span> <span class="s1">&#39;Spirit_Breaker&#39;</span><span class="p">,</span> <span class="s1">&#39;Slardar&#39;</span><span class="p">,</span> <span class="s1">&#39;Juggernaut&#39;</span><span class="p">,</span>
        <span class="s1">&#39;Phantom_Assassin&#39;</span><span class="p">,</span> <span class="s1">&#39;Slark&#39;</span><span class="p">,</span> <span class="s1">&#39;Templar_Assassin&#39;</span><span class="p">,</span> <span class="s1">&#39;Necrophos&#39;</span><span class="p">,</span> <span class="s1">&#39;Invoker&#39;</span><span class="p">,</span>
        <span class="s1">&#39;Luna&#39;</span><span class="p">,</span> <span class="s1">&#39;Tidehunter&#39;</span><span class="p">,</span> <span class="s1">&#39;Gyrocopter&#39;</span><span class="p">,</span> <span class="s1">&#39;Clinkz&#39;</span><span class="p">,</span> <span class="s1">&#39;Silencer&#39;</span><span class="p">,</span>
        <span class="s1">&#39;Sven&#39;</span><span class="p">,</span> <span class="s1">&#39;Lina&#39;</span><span class="p">,</span> <span class="s1">&#39;Drow_Ranger&#39;</span><span class="p">,</span> <span class="s1">&#39;Night_Stalker&#39;</span><span class="p">,</span> <span class="s1">&#39;Zeus&#39;</span><span class="p">,</span>
       <span class="s1">&#39;Chaos_Knight&#39;</span><span class="p">,</span> <span class="s1">&#39;Weaver&#39;</span><span class="p">,</span> <span class="s1">&#39;Tinker&#39;</span><span class="p">,</span> <span class="s1">&#39;Huskar&#39;</span><span class="p">,</span> <span class="s1">&#39;Troll_Warlord&#39;</span><span class="p">,</span>
       <span class="s1">&#39;Anti-Mage&#39;</span><span class="p">,</span> <span class="s1">&#39;Axe&#39;</span><span class="p">,</span> <span class="s1">&#39;Wraith_King&#39;</span><span class="p">,</span> <span class="s1">&#39;Kunkka&#39;</span><span class="p">,</span> <span class="s1">&#39;Lycan&#39;</span><span class="p">,</span>
       <span class="s1">&#39;Bristleback&#39;</span><span class="p">,</span> <span class="s1">&#39;Outworld_Devourer&#39;</span><span class="p">,</span> <span class="s1">&#39;Riki&#39;</span><span class="p">,</span> <span class="s1">&#39;Sniper&#39;</span><span class="p">,</span> <span class="s1">&#39;Magnus&#39;</span><span class="p">,</span>
       <span class="s1">&#39;Leshrac&#39;</span><span class="p">,</span> <span class="s1">&#39;Phantom_Lancer&#39;</span><span class="p">,</span> <span class="s1">&#39;Ursa&#39;</span><span class="p">,</span> <span class="s1">&#39;Bloodseeker&#39;</span><span class="p">,</span> <span class="s1">&#39;Tiny&#39;</span><span class="p">,</span>
       <span class="s1">&#39;Medusa&#39;</span><span class="p">,</span> <span class="s1">&#39;Morphling&#39;</span><span class="p">,</span> <span class="s1">&#39;Storm_Spirit&#39;</span><span class="p">,</span> <span class="s1">&#39;Lone_Druid&#39;</span><span class="p">,</span> <span class="s1">&#39;Death_Prophet&#39;</span><span class="p">,</span>
       <span class="s1">&#39;Razor&#39;</span><span class="p">,</span> <span class="s1">&#39;Naga_Siren&#39;</span><span class="p">]</span>

<span class="c1"># Subset data from players in carry roles</span>
<span class="n">data_carry</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="o">.</span><span class="n">hero_name</span><span class="o">.</span><span class="n">isin</span><span class="p">(</span><span class="n">carries</span><span class="p">)]</span>

<span class="c1"># To repect independence assumption</span>
<span class="n">data_carry</span> <span class="o">=</span> <span class="n">data_carry</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">frac</span><span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">data_carry</span> <span class="o">=</span> <span class="n">data_carry</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;account_id&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>

<span class="c1"># Extract samples of Mid Laners and Soft Support</span>
<span class="n">data_carry_Mid</span> <span class="o">=</span> <span class="n">data_carry</span><span class="p">[</span><span class="n">data_carry</span><span class="o">.</span><span class="n">role</span> <span class="o">==</span> <span class="s1">&#39;Mid&#39;</span><span class="p">]</span>         
<span class="n">data_carry_Soft</span> <span class="o">=</span> <span class="n">data_carry</span><span class="p">[</span><span class="n">data_carry</span><span class="o">.</span><span class="n">role</span> <span class="o">==</span> <span class="s1">&#39;Soft_Support&#39;</span><span class="p">]</span>

<span class="c1"># Call function for normality test</span>
<span class="n">normality_two_sample</span><span class="p">(</span><span class="n">data1</span><span class="o">=</span> <span class="n">data_carry_Mid</span><span class="o">.</span><span class="n">kills</span><span class="p">,</span>
                    <span class="n">data2</span><span class="o">=</span> <span class="n">data_carry_Soft</span><span class="o">.</span><span class="n">kills</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">At least one sample is not normal,
where the p values are: 0.000000 and 0.000000
</code></pre></td></tr></table>
</div>
</div><p>It seems that both distributions are not normal, so we can&rsquo;t proceed with a Two Sample t-test. For this reason, we&rsquo;ll use a two-sample¬†<a href="https://www.statstutor.ac.uk/resources/uploaded/mannwhitney.pdf" target="_blank" rel="noopener noreffer">Mann-Whitney U</a> test where our hypothesis will be defined by:</p>
<ul>
<li>$H_0: P(x_{kills_{mid}} &gt; x_{kills_{soft}}) = 0.5$ (The probability that a randomly drawn player in Midlane will record more kills than a Soft Support player, is 50%)</li>
<li>$H_1: P(x_{kills_{mid}} &gt; x_{kills_{soft}}) &gt; 0.5$ (The probability that a randomly drawn player in Midlane will record more kills a Soft Support player, is more than 50%)</li>
</ul>
<p>This test makes the following assumptions:</p>
<ul>
<li>The two samples data groups are independent</li>
<li>The data elements in respective groups are continuous and not-normal</li>
</ul>
<p>Let&rsquo;s start by plotting the distributions.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Load layout base objects</span>
<span class="n">sign</span><span class="p">,</span> <span class="n">layout</span> <span class="o">=</span> <span class="n">layout_plotly</span><span class="p">(</span><span class="n">height</span><span class="o">=</span> <span class="mi">720</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span> <span class="mi">15</span><span class="p">)</span>

<span class="c1"># Generate plot for dual distributions</span>
<span class="k">def</span> <span class="nf">dual_dist_plot</span><span class="p">(</span><span class="n">data1</span><span class="p">,</span> <span class="n">data2</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">xaxis_title</span><span class="p">,</span> <span class="n">group_names</span><span class="p">):</span>

    <span class="c1"># Subset group masks</span>
    <span class="n">group1_name</span> <span class="o">=</span> <span class="n">group_names</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">group2_name</span> <span class="o">=</span> <span class="n">group_names</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

    <span class="c1"># Generate array of lists and append them</span>
    <span class="n">data_grouped</span> <span class="o">=</span> <span class="p">[</span><span class="n">data1</span><span class="p">,</span> <span class="n">data2</span><span class="p">]</span>
    <span class="n">all_data</span> <span class="o">=</span> <span class="n">data1</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data2</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span> <span class="kc">True</span><span class="p">)</span>

    <span class="c1"># Calculate mean</span>
    <span class="n">mean_group1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">data1</span><span class="p">)</span>
    <span class="n">mean_group2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">data2</span><span class="p">)</span>
    
    <span class="c1"># Aesthetics</span>
    <span class="n">color_group1</span> <span class="o">=</span> <span class="s1">&#39;#00A699&#39;</span>
    <span class="n">color_group2</span> <span class="o">=</span> <span class="s1">&#39;#FC642D&#39;</span>

    <span class="c1"># Create graphic object</span>
    <span class="n">dist_groups</span> <span class="o">=</span> <span class="n">ff</span><span class="o">.</span><span class="n">create_distplot</span><span class="p">(</span><span class="n">data_grouped</span><span class="p">,</span> <span class="n">group_labels</span><span class="o">=</span><span class="p">[</span><span class="n">group1_name</span><span class="p">,</span> <span class="n">group2_name</span><span class="p">],</span>
                                        <span class="n">show_rug</span><span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">show_hist</span><span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span> <span class="p">[</span><span class="n">color_group1</span><span class="p">,</span> <span class="n">color_group2</span><span class="p">])</span>
    <span class="n">dist_groups</span><span class="o">.</span><span class="n">add_vline</span><span class="p">(</span><span class="n">x</span><span class="o">=</span> <span class="n">mean_group1</span><span class="p">,</span> <span class="n">line_width</span><span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">line_dash</span><span class="o">=</span> <span class="s2">&#34;dash&#34;</span><span class="p">,</span> <span class="n">line_color</span><span class="o">=</span> <span class="n">color_group1</span><span class="p">)</span>
    <span class="n">dist_groups</span><span class="o">.</span><span class="n">add_vline</span><span class="p">(</span><span class="n">x</span><span class="o">=</span> <span class="n">mean_group2</span><span class="p">,</span> <span class="n">line_width</span><span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">line_dash</span><span class="o">=</span> <span class="s2">&#34;dash&#34;</span><span class="p">,</span> <span class="n">line_color</span><span class="o">=</span> <span class="n">color_group2</span><span class="p">)</span>
    <span class="n">dist_groups</span><span class="o">.</span><span class="n">add_vrect</span><span class="p">(</span><span class="n">x0</span><span class="o">=</span> <span class="n">mean_group1</span><span class="p">,</span> <span class="n">x1</span><span class="o">=</span> <span class="n">mean_group2</span><span class="p">,</span> <span class="n">line_width</span><span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">fillcolor</span><span class="o">=</span> <span class="s2">&#34;#99AAB5&#34;</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span> <span class="mf">0.2</span><span class="p">)</span>

    <span class="c1"># Define range of value</span>
    <span class="n">dist_groups</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">xaxis_range</span><span class="o">=</span><span class="p">[</span><span class="nb">min</span><span class="p">(</span><span class="n">all_data</span><span class="p">),</span>
                                            <span class="nb">max</span><span class="p">(</span><span class="n">all_data</span><span class="p">)])</span>
    <span class="n">dist_groups</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span> <span class="n">title</span><span class="p">,</span> <span class="n">xaxis_title</span><span class="o">=</span> <span class="n">xaxis_title</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">dist_groups</span>

<span class="n">dist_groups</span> <span class="o">=</span> <span class="n">dual_dist_plot</span><span class="p">(</span><span class="n">data1</span><span class="o">=</span> <span class="n">data_carry_Mid</span><span class="o">.</span><span class="n">kills</span><span class="p">,</span> <span class="n">data2</span><span class="o">=</span> <span class="n">data_carry_Soft</span><span class="o">.</span><span class="n">kills</span><span class="p">,</span>
                            <span class="n">title</span><span class="o">=</span> <span class="s1">&#39;Carry roles Kills log by Position &#39;</span><span class="p">,</span> <span class="n">xaxis_title</span><span class="o">=</span> <span class="s1">&#39;Kills log&#39;</span><span class="p">,</span>
                            <span class="n">group_names</span><span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Mid Laners&#39;</span><span class="p">,</span><span class="s1">&#39;Soft Support&#39;</span><span class="p">])</span>
<span class="n">dist_groups</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">dist_groups</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">dist_groups</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">config</span><span class="o">=</span> <span class="n">static</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>So now that we know that our sample is independent and not normal, let&rsquo;s make the hypothesis test.</p>
<p>Notice that each one of the samples under test has a size of 13,000 records approximately. Seeing that our sample is very large, the test is at risk of incurring in normality bias. To avoid this, we are going to rely on an¬†<strong>Asymptotic P-value</strong>¬†calculation, which will generate a standardized value given by:</p>
<p>$z = \frac{U - m_u}{\sigma_U}$</p>
<p>Which is defined by:</p>
<p>$m_U = \frac{n_{Mid} n_{Soft}}{2}$</p>
<p>And our Standard Deviation Value won&rsquo;t be affected by tied ranks, so this won&rsquo;t require any correction. This is because the categories don&rsquo;t have ranks and all the values are distinct and continuous.</p>
<p>$\sigma_U = \sqrt{\frac{n_{Mid} n_{Soft} (n_{Mid} + n_{Soft} + 1)}{12}}$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">scipy.stats</span> <span class="kn">import</span> <span class="n">mannwhitneyu</span>

<span class="k">def</span> <span class="nf">mannwhitneyu_est</span><span class="p">(</span><span class="n">data1</span><span class="p">,</span> <span class="n">data2</span><span class="p">,</span> <span class="n">alt</span><span class="p">,</span> <span class="n">method</span><span class="p">):</span>
    <span class="n">statistic</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="n">mannwhitneyu</span><span class="p">(</span><span class="n">data1</span><span class="p">,</span> <span class="n">data2</span><span class="p">,</span> <span class="n">alternative</span> <span class="o">=</span> <span class="n">alt</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span> <span class="n">method</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">p</span>
    
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Mann-Whitney Test P-value: &#39;</span><span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">mannwhitneyu_est</span><span class="p">(</span><span class="n">data1</span><span class="o">=</span> <span class="n">data_carry_Mid</span><span class="o">.</span><span class="n">kills</span><span class="p">,</span> <span class="n">data2</span><span class="o">=</span> <span class="n">data_carry_Soft</span><span class="o">.</span><span class="n">kills</span><span class="p">,</span>
                                                            <span class="n">alt</span><span class="o">=</span> <span class="s1">&#39;greater&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span> <span class="s1">&#39;asymptotic&#39;</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Mann-Whitney Test P-value: 0.8700862933924327
</code></pre></td></tr></table>
</div>
</div><p>Since the distributions are statistically equal seeing the p-value above 0.05, we don&rsquo;t have enough statistical evidence to reject our Null Hypothesis. This indicates that Soft Support players and Midline players tend to make the same amount of kills per session on Ranked Matchmaking mode using heroes of Carry type.</p>
<p>Now that we know this it doesn&rsquo;t make sense to separate Mid Laners from the Soft Support group, let&rsquo;s regroup these two positions and compare them with the rest of the roles.</p>
<h3 id="-two-sample-mann-whitney-test-for-kills-of-mid-lanes-and-soft-support-vs-rest-of-roles">üßùüèªüëπ Two Sample Mann-Whitney Test for Kills of Mid Lanes and Soft Support vs Rest of Roles</h3>
<p>Let&rsquo;s start by defining the new hypothesis:</p>
<ul>
<li>$H_0: P(x_{kills_{mid \cup soft}} &gt; x_{kills_{rest}}) = 0.5$ (The probability that a randomly drawn player from Midlane or Soft Support will record more kills than any player, is 50%)</li>
<li>$H_1: P(x_{kills_{mid \cup soft}} &gt; x_{kills_{rest}}) &gt; 0.5$ (The probability that a randomly drawn player from Midlane or Soft Support will record more kills than any player, is more than 50%)</li>
</ul>
<p>Using the same process as before, our first assumption to check is the non-normality of the same random sample for each group.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Subset and create kills ample for carry role in Soft Support and Midlane positions</span>
<span class="n">data_soft_mid</span> <span class="o">=</span> <span class="n">data_carry</span><span class="p">[</span><span class="n">data_carry</span><span class="o">.</span><span class="n">role</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="s1">&#39;Soft_Support&#39;</span><span class="p">,</span> <span class="s1">&#39;Mid&#39;</span><span class="p">])]</span>

<span class="c1"># Subset and create kills sample for carry role in the rest positions</span>
<span class="n">data_not_soft_mid</span> <span class="o">=</span> <span class="n">data_carry</span><span class="p">[</span><span class="n">data_carry</span><span class="o">.</span><span class="n">role</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="s1">&#39;Hard_Carry&#39;</span><span class="p">,</span> <span class="s1">&#39;Hard_Support&#39;</span><span class="p">,</span> <span class="s1">&#39;Offlaner&#39;</span><span class="p">])]</span>

<span class="c1"># Call function for normality test</span>
<span class="n">normality_two_sample</span><span class="p">(</span><span class="n">data1</span><span class="o">=</span> <span class="n">data_soft_mid</span><span class="o">.</span><span class="n">kills</span><span class="p">,</span> <span class="n">data2</span><span class="o">=</span> <span class="n">data_not_soft_mid</span><span class="o">.</span><span class="n">kills</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">At least one sample is not normal,
where the p values are: 0.000000 and 0.000000
</code></pre></td></tr></table>
</div>
</div><p>Now that we know the sample are not normal, we can proceed with the Mann-Whitney Test.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">dist_groups</span> <span class="o">=</span> <span class="n">dual_dist_plot</span><span class="p">(</span><span class="n">data1</span><span class="o">=</span> <span class="n">data_soft_mid</span><span class="o">.</span><span class="n">kills</span><span class="p">,</span> <span class="n">data2</span><span class="o">=</span> <span class="n">data_not_soft_mid</span><span class="o">.</span><span class="n">kills</span><span class="p">,</span>
                            <span class="n">title</span><span class="o">=</span> <span class="s1">&#39;Carry roles Kills log by Position &#39;</span><span class="p">,</span> <span class="n">xaxis_title</span><span class="o">=</span> <span class="s1">&#39;Kills log&#39;</span><span class="p">,</span>
                            <span class="n">group_names</span><span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Mid &amp; Soft Sppt Kills&#39;</span><span class="p">,</span><span class="s1">&#39;Rest. Positions Kills&#39;</span><span class="p">])</span>
<span class="n">dist_groups</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">dist_groups</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">dist_groups</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">config</span><span class="o">=</span> <span class="n">static</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>And as well, to avoid incurring in normality bias due to the samples sizes, we are going to rely on an <strong>Asymptotic P-value</strong> calculation.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Mann-Whitney Test P-value: &#39;</span><span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">mannwhitneyu_est</span><span class="p">(</span><span class="n">data1</span><span class="o">=</span> <span class="n">data_soft_mid</span><span class="o">.</span><span class="n">kills</span><span class="p">,</span> <span class="n">data2</span><span class="o">=</span> <span class="n">data_not_soft_mid</span><span class="o">.</span><span class="n">kills</span><span class="p">,</span> <span class="n">alt</span><span class="o">=</span> <span class="s1">&#39;greater&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span> <span class="s1">&#39;asymptotic&#39;</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Mann-Whitney Test P-value: 0.015672996714278714
</code></pre></td></tr></table>
</div>
</div><p>We can see that our P-Value is very close to the rejection section. However, since this is taken each time from a random sample, we can&rsquo;t conclude yet. The most accurate way to test this is to bootstrap the value and make judgments over the percentage of p-values that accept or reject our hypothesis.</p>
<p>The next function will return one array of bootstrapped estimates for the P-value, which we will describe the next:</p>
<ul>
<li>
<p><strong>p_value_mannwhitney:</strong>¬†Proportion of¬†P-values measured from the Mann-Whitney Test, showing the probability that a randomly drawn Midlaner or Soft Support will record more or equal quantity of kills than any player.</p>
</li>
<li>
<p><strong>boot_mannwhitney_replicates:</strong>¬†Array of bootstrapped p-values of Mann-Whitney Test.</p>
</li>
</ul>
<p>Also, let&rsquo;s plot the bootstrapped replicates.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Bootstrapping Mann-Whitney U Test, and generate array of replicates</span>
<span class="k">def</span> <span class="nf">draw_bs_test</span><span class="p">(</span><span class="n">data1</span><span class="p">,</span> <span class="n">data2</span><span class="p">,</span> <span class="n">iterations</span><span class="p">):</span>
    <span class="n">boot_arr</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
        <span class="n">estimate</span> <span class="o">=</span> <span class="n">mannwhitneyu_est</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">data1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data1</span><span class="p">)),</span>
                                    <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">data2</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data2</span><span class="p">)),</span>
                                    <span class="n">alt</span><span class="o">=</span> <span class="s1">&#39;greater&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span> <span class="s1">&#39;asymptotic&#39;</span><span class="p">)</span>
        <span class="n">boot_arr</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">estimate</span><span class="p">)</span>

    <span class="c1"># Compute and print p-value of estimate with different distributions/medians</span>
    <span class="n">p_value_test</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">([</span><span class="mi">1</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mf">0.05</span> <span class="k">else</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">boot_arr</span><span class="p">])</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">boot_arr</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">boot_arr</span><span class="p">,</span> <span class="n">p_value_test</span>

<span class="c1"># Generates bootstrapped estimates</span>
<span class="n">boot_mannwhitney_replicates</span><span class="p">,</span> <span class="n">p_value_mannwhitney</span> <span class="o">=</span> <span class="n">draw_bs_test</span><span class="p">(</span><span class="n">data1</span><span class="o">=</span> <span class="n">data_soft_mid</span><span class="o">.</span><span class="n">kills</span><span class="p">,</span> <span class="n">data2</span><span class="o">=</span> <span class="n">data_not_soft_mid</span><span class="o">.</span><span class="n">kills</span><span class="p">,</span> <span class="n">iterations</span><span class="o">=</span> <span class="mi">2000</span><span class="p">)</span>

<span class="c1"># ECDF Generator function</span>
<span class="k">def</span> <span class="nf">ecdf</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="c1"># Generate ECDF (Empirical Cumulative Distribution Function) for one dimension arrays</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="c1"># X axis data</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

     <span class="c1"># Y axis data</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">n</span>

    <span class="k">return</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>

<span class="c1"># ECDF plot generator</span>
<span class="k">def</span> <span class="nf">ecdf_plot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">var_label</span><span class="p">):</span>
    <span class="c1"># Generate ECDF data</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">ecdf</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="c1"># Generate percentile makers </span>
    <span class="n">percentiles</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">75</span><span class="p">,</span> <span class="n">p_value_mannwhitney</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="mi">95</span><span class="p">])</span> <span class="c1">#Plot the percentile where the bootstrapped p-value is located</span>
    <span class="n">ptiles</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">percentile</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">percentiles</span><span class="p">)</span>

    <span class="c1"># ECDF plot</span>
    <span class="n">plot</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Figure</span><span class="p">()</span>

    <span class="c1"># Add traces</span>
    <span class="n">plot</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">,</span>
                        <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;markers&#39;</span><span class="p">,</span>
                        <span class="n">name</span><span class="o">=</span><span class="n">var_label</span><span class="p">))</span>
    <span class="n">plot</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">ptiles</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">percentiles</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span>
                        <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;markers+text&#39;</span><span class="p">,</span>
                        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;Percentiles&#39;</span><span class="p">,</span> <span class="n">marker_line_width</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">marker_size</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
                        <span class="n">text</span><span class="o">=</span><span class="n">percentiles</span><span class="p">,</span> <span class="n">textposition</span><span class="o">=</span><span class="s2">&#34;bottom right&#34;</span><span class="p">))</span>
    <span class="n">plot</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
    <span class="n">plot</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">plot</span>

<span class="n">ecdf</span> <span class="o">=</span> <span class="n">ecdf_plot</span><span class="p">(</span><span class="n">boot_mannwhitney_replicates</span><span class="p">,</span> <span class="s2">&#34;P-value replicates&#34;</span><span class="p">)</span>
<span class="n">ecdf</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span><span class="s1">&#39;ECDF of Bootstrapped P-values for Mann-Whitney U Test&#39;</span><span class="p">},</span>
                        <span class="n">yaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;title&#39;</span><span class="p">:</span><span class="s2">&#34;Cumulative Probability&#34;</span><span class="p">})</span>
<span class="n">ecdf</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">config</span><span class="o">=</span> <span class="n">static</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>From 2000 iterations of the estimate, we can see that around ~90% of the bootstrapped Mann-Whitney U tests will have a value below 0.05 (in the hypothesis rejection zone). This indicates that the probability that a randomly drawn player from Midlaners or Soft Support will record more kills than any player is more than 50%. This approximately 90% of the time due to the significant difference in the distribution parameter.</p>
<p>With this, our next step is to restrict the analysis for Carry Heroes used in Soft Support and Midlaner positions, since these are the two positions where more kills are registered on the sessions.</p>
<p>After examining kills, we should study a more specific behavior, like the damage given to opponents by these same player records, and see if there is an unusual value in the different groups of heroes.</p>
<h3 id="-kruskalwallis-one-way-anova">üßô‚Äç‚ôÇÔ∏è Kruskal‚ÄìWallis One-Way ANOVA</h3>
<p>First, we are going to try to test the difference between Carry heroes groups for Soft Support and Midlaners using a common One-Way ANOVA. Which is a parametric test which is used to test the statistically significant variance difference between 3 or more groups. In this case, our categorical variable will be the hero name, which will be used to segment the groups, to compare the hero damage factor between levels.</p>
<p>To select the hero groups, we can simply add the hero damage metric to use as a decision parameter, for this reason, let&rsquo;s see the cumulative metric in a Pareto chart for the Carry heroes.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Load layout for Pareto chart</span>
<span class="n">sign_pareto</span><span class="p">,</span> <span class="n">layout_pareto</span> <span class="o">=</span> <span class="n">layout_plotly</span><span class="p">(</span><span class="n">height</span><span class="o">=</span> <span class="mi">700</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span> <span class="mi">1400</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span> <span class="mi">12</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">pareto_builder</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">var_value</span><span class="p">,</span> <span class="n">var_cat</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">title_xaxis</span><span class="p">,</span> <span class="n">title_yaxis</span><span class="p">):</span>

    <span class="c1"># Aggregate data by variable</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="n">var_cat</span><span class="p">])[</span><span class="n">var_value</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>

    <span class="c1"># Sort data</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">var_value</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span> <span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

    <span class="c1"># Generate CumSum Percentage</span>
    <span class="n">cumulative_per</span> <span class="o">=</span>  <span class="n">data</span><span class="p">[</span><span class="n">var_value</span><span class="p">]</span> <span class="o">/</span> <span class="n">data</span><span class="p">[</span><span class="n">var_value</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span>
    <span class="n">cumulative_per</span> <span class="o">=</span> <span class="n">cumulative_per</span><span class="o">.</span><span class="n">cumsum</span><span class="p">()</span>

    <span class="c1"># Append cumulative percentages column</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">data</span><span class="p">,</span> <span class="n">cumulative_per</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span> <span class="mi">1</span><span class="p">)</span>

    <span class="c1"># Fix column names and remove last repeated value error</span>
    <span class="n">data</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;Cum_Sum&#39;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="c1"># Pareto Chart</span>
    <span class="n">pareto</span> <span class="o">=</span> <span class="n">make_subplots</span><span class="p">(</span><span class="n">specs</span><span class="o">=</span><span class="p">[[{</span><span class="s2">&#34;secondary_y&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">}]])</span>

    <span class="c1"># Bar plot graphic object</span>
    <span class="n">pareto</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Bar</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">var_cat</span><span class="p">],</span> <span class="n">y</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">var_value</span><span class="p">],</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Hero&#34;</span><span class="p">,</span> <span class="n">marker_color</span><span class="o">=</span> <span class="s2">&#34;#007FFF&#34;</span><span class="p">),</span>
                            <span class="n">secondary_y</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>

    <span class="c1"># Scatter+Lines plot graphic object</span>
    <span class="n">pareto</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">var_cat</span><span class="p">],</span> <span class="n">y</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;Cum_Sum&#39;</span><span class="p">]</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;lines+markers&#39;</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Percentage&#34;</span><span class="p">,</span> <span class="n">marker_color</span><span class="o">=</span> <span class="s2">&#34;#FF5A5F&#34;</span><span class="p">),</span>
                            <span class="n">secondary_y</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>

    <span class="c1"># Layout</span>
    <span class="n">pareto</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span><span class="n">title</span><span class="p">},</span>
                        <span class="n">xaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span><span class="p">:</span><span class="n">title_xaxis</span><span class="p">},</span>
                        <span class="n">yaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span><span class="p">:</span><span class="n">title_yaxis</span><span class="p">})</span>
    <span class="n">pareto</span><span class="o">.</span><span class="n">update_yaxes</span><span class="p">(</span><span class="n">tickformat</span> <span class="o">=</span> <span class="s2">&#34;0%&#34;</span><span class="p">,</span> <span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Cumulative Percentage&#34;</span><span class="p">,</span> <span class="n">secondary_y</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
    <span class="n">pareto</span><span class="o">.</span><span class="n">add_hline</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mf">0.8</span><span class="p">,</span> <span class="n">line_dash</span> <span class="o">=</span> <span class="s2">&#34;dash&#34;</span><span class="p">,</span> <span class="n">line_color</span><span class="o">=</span><span class="s2">&#34;red&#34;</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">secondary_y</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">pareto</span>

<span class="n">pareto</span> <span class="o">=</span> <span class="n">pareto_builder</span><span class="p">(</span><span class="n">data</span><span class="o">=</span> <span class="n">data_soft_mid</span><span class="p">,</span> <span class="n">var_value</span><span class="o">=</span> <span class="s1">&#39;hero_damage&#39;</span><span class="p">,</span> <span class="n">var_cat</span><span class="o">=</span> <span class="s1">&#39;hero_name&#39;</span><span class="p">,</span>
                        <span class="n">title</span><span class="o">=</span> <span class="s1">&#39;Pareto Chart of Hero Damage Logs&#39;</span><span class="p">,</span> <span class="n">title_xaxis</span><span class="o">=</span> <span class="s1">&#39;Heroes&#39;</span><span class="p">,</span> <span class="n">title_yaxis</span><span class="o">=</span> <span class="s1">&#39;Total Damage recorded&#39;</span><span class="p">)</span>
<span class="n">pareto</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout_pareto</span><span class="p">)</span>
<span class="n">pareto</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">showlegend</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">pareto</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>From the 110 different heroes, we&rsquo;ll consider that 20% of them approximately allocated 80% of the total damage recorded. For this reason, we are going to subset those top 28 heroes that will be under study for our ANOVA test.</p>
<p>In the last visual, due to the size of the displayed area, we are not seeing the 110 heroes, but we can see the cumulative sum of damage recorded on the right Y axis of the Pareto Chart.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Aggregate data by group</span>
<span class="n">list_sub_heroes</span> <span class="o">=</span> <span class="n">data_soft_mid</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;hero_name&#39;</span><span class="p">])[</span><span class="s1">&#39;hero_damage&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>

<span class="c1"># Sort data</span>
<span class="n">list_sub_heroes</span> <span class="o">=</span> <span class="n">list_sub_heroes</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s1">&#39;hero_damage&#39;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span> <span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="c1"># Extract heroes list</span>
<span class="n">list_sub_heroes</span> <span class="o">=</span> <span class="n">list_sub_heroes</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">28</span><span class="p">)</span><span class="o">.</span><span class="n">hero_name</span>

<span class="c1"># Subset data from players for analysis</span>
<span class="n">data_heroes</span> <span class="o">=</span> <span class="n">data_soft_mid</span><span class="p">[</span><span class="n">data_soft_mid</span><span class="o">.</span><span class="n">hero_name</span><span class="o">.</span><span class="n">isin</span><span class="p">(</span><span class="n">list_sub_heroes</span><span class="p">)]</span>
</code></pre></td></tr></table>
</div>
</div><p>As we mentioned before, the specificity parameter is our focus point to make the right deductions, so we&rsquo;ll still narrow our analysis to Carry heroes. The situation is that an ANOVA will tell us only if there is a hero Mean Damage is different from the rest.</p>
<p>To clarify the context of why we are going to use an ANOVA test, we have two reasons; the first is to check for potential nerfed heroes in later patches, that&rsquo;s why our core KPI will be the damage, which is a continuous attribute; and the second one is that the comparison is made by a hero and fortunately we count with 28 heroes after the subset was made.</p>
<p>This way we can define the elements of the ANOVA as:</p>
<ul>
<li>Levels: Hero Names</li>
<li>Factor: Hero Damage logs</li>
</ul>
<p>And our Hypothesis will be defined by:</p>
<ul>
<li>
<p>$H_0:¬†\overline{X}_{Windranger} =¬†\overline{X}_{ShadowFiend} =¬†\overline{X}_{QueenOfPain} =$ ¬† &hellip; ¬† $=¬†\overline{X}_{Riki}$</p>
</li>
<li>
<p>$H_1:$¬†At least one of the hero damage mean differ from the rest</p>
</li>
</ul>
<p>Let&rsquo;s establish the initial assumptions that we need to verify:</p>
<ul>
<li><strong>Independence validation</strong></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Randomize order again</span>
<span class="n">data_heroes</span> <span class="o">=</span> <span class="n">data_heroes</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">frac</span><span class="o">=</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span> <span class="kc">True</span><span class="p">)</span>

<span class="c1"># Prepare Levels and Factor data only</span>
<span class="n">data_heroes_anova</span> <span class="o">=</span> <span class="n">data_heroes</span><span class="p">[[</span><span class="s1">&#39;account_id&#39;</span><span class="p">,</span><span class="s1">&#39;hero_name&#39;</span><span class="p">,</span><span class="s1">&#39;hero_damage&#39;</span><span class="p">]]</span>
</code></pre></td></tr></table>
</div>
</div><p>To respect the independence assumption, we will extract one record per player in case the player count with multiple sessions logged in our sample. This is because we would prefer to have a randomized sample where the groups are¬†<strong>mutually exclusive</strong>, since this process was made on the definition of the data_carry dataset, it&rsquo;s not necessary now.</p>
<ul>
<li><strong>Kolmogorov-Smirnov test:</strong>¬†<a href="https://en.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test" target="_blank" rel="noopener noreffer">check normality</a> on residuals</li>
</ul>
<p>Based on an Ordinary Least Squares model where our independent variable will be the hero_name groups and our dependant variable the hero_damage, we can generate the residual of our model.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">statsmodels.formula.api</span> <span class="kn">import</span> <span class="n">ols</span>

<span class="c1"># Generate model to extract residuals</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">ols</span><span class="p">(</span><span class="s1">&#39;hero_damage ~ C(hero_name)&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span> <span class="n">data_heroes_anova</span><span class="p">)</span><span class="o">.</span><span class="n">fit</span><span class="p">()</span>

<span class="c1"># Probabilty plot generator</span>
<span class="k">def</span> <span class="nf">qq_plot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dist_type</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    Requirements:
</span><span class="s1">    - scipy.stats
</span><span class="s1">    - plotly.graph_objects
</span><span class="s1">    &#39;&#39;&#39;</span>
    <span class="c1"># Generate qq plot</span>
    <span class="n">qq</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">probplot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dist</span><span class="o">=</span> <span class="n">dist_type</span><span class="p">)</span>
    <span class="c1"># Take min and max value of OSM (ordered statistic medians) and generate array</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">qq</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">qq</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]])</span>
    <span class="c1"># Create graphic object</span>
    <span class="n">qq_plot</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Figure</span><span class="p">()</span>
    <span class="c1"># Plot OSM (Ordered Statistic Medians) in x-axis, and OSR in y-axis (Ordered Responses)</span>
    <span class="n">qq_plot</span><span class="o">.</span><span class="n">add_scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">qq</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="n">qq</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;markers&#39;</span><span class="p">)</span>
    <span class="c1"># Generate linear reg line using the generated array and the OSR data as parameters</span>
    <span class="n">qq_plot</span><span class="o">.</span><span class="n">add_scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">qq</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">qq</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;lines&#39;</span><span class="p">)</span>
    <span class="c1"># Add titles</span>
    <span class="n">qq_plot</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span> <span class="n">title</span><span class="p">},</span>
                        <span class="n">xaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span><span class="p">:</span><span class="s1">&#39;Theorical Quantiles&#39;</span><span class="p">},</span>
                        <span class="n">yaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span><span class="p">:</span><span class="s1">&#39;Ordered Values&#39;</span><span class="p">})</span>
    <span class="k">return</span> <span class="n">qq_plot</span>

<span class="n">qq_plot</span> <span class="o">=</span> <span class="n">qq_plot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">resid</span><span class="p">,</span> <span class="n">dist_type</span><span class="o">=</span> <span class="s1">&#39;norm&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span> <span class="s2">&#34;Gaussian Probabilty Plot of ANOVA&#39;s residuals&#34;</span><span class="p">)</span>
<span class="n">qq_plot</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">qq_plot</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">showlegend</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">qq_plot</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">qq_plot</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">config</span><span class="o">=</span> <span class="n">static</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>A visual check is helpful when the sample is large. As the sample size increases, the statistical test&rsquo;s ability to reject the null hypothesis rises, so it gains the power to detect smaller differences as the sample size n increases.</p>
<p>From the last image, we can see on the left side, that the distribution tends to spread, and considering that we rely on approximately 20,000 residuals, we can conclude non-normality. However, the best way to decide this is to test it.</p>
<p>Here we <strong>shouldn&rsquo;t use a Shapiro Welch</strong> since our sample is above 50 observations, the best way to test the Goodness to Fit a Gaussian distribution, is to use the¬†<strong>Kolmogorov-Smirnov¬†test</strong>. Notice that size of our data is a relatively large sample, the calculation of the p-value will perform better if we use an asymptotic method.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">stats</span><span class="o">.</span><span class="n">kstest</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">resid</span><span class="p">,</span> <span class="n">cdf</span><span class="o">=</span> <span class="s1">&#39;norm&#39;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span> <span class="s1">&#39;asymp&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">KstestResult(statistic=0.5365555738561936, pvalue=0.0)
</code></pre></td></tr></table>
</div>
</div><p>We have sufficient evidence to say that the sample data does not come from a normal distribution, since our¬†<strong>Kolmogorov-Smirnov</strong>¬†p-value is below 0.05. Knowing this we can&rsquo;t proceed with a One-way ANOVA, so we have two options, we will proceed with a non-parametric version of ANOVA, the¬†<a href="https://en.wikipedia.org/wiki/Kruskal%E2%80%93Wallis_one-way_analysis_of_variance" target="_blank" rel="noopener noreffer">Kruskal-Wallis</a>¬†test.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Get Kruskal-Wallis P-value</span>
<span class="k">def</span> <span class="nf">kruskal_est</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">group_var</span><span class="p">,</span> <span class="n">value_var</span><span class="p">,</span> <span class="n">sample_size</span><span class="p">):</span>
    <span class="c1"># Extract sample from population</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">sample_size</span><span class="p">)</span>
    <span class="c1"># Extract </span>
    <span class="n">group_names</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">group_var</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span>
    <span class="n">number_groups</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">group_names</span><span class="p">)</span>

    <span class="c1"># List to allocate arrays of groups</span>
    <span class="n">input_list</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1"># Populate array</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number_groups</span><span class="p">):</span>
        <span class="n">input_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="n">group_var</span><span class="p">]</span> <span class="o">==</span> <span class="n">group_names</span><span class="p">[</span><span class="n">i</span><span class="p">]][</span><span class="n">value_var</span><span class="p">]</span> <span class="p">)</span>
    <span class="n">input_list</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">input_list</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span>

    <span class="c1"># Execute test over list of group arrays</span>
    <span class="n">H</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">kruskal</span><span class="p">(</span><span class="o">*</span><span class="n">input_list</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">p</span> <span class="p">,</span> <span class="n">number_groups</span>

<span class="n">p</span> <span class="p">,</span> <span class="n">number_groups</span> <span class="o">=</span> <span class="n">kruskal_est</span><span class="p">(</span><span class="n">data</span><span class="o">=</span> <span class="n">data_heroes_anova</span><span class="p">,</span> <span class="n">group_var</span><span class="o">=</span> <span class="s1">&#39;hero_name&#39;</span><span class="p">,</span> <span class="n">value_var</span><span class="o">=</span> <span class="s1">&#39;hero_damage&#39;</span><span class="p">,</span> <span class="n">sample_size</span><span class="o">=</span> <span class="mi">500</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">8.112743961607323e-13
</code></pre></td></tr></table>
</div>
</div><p>The Kruskal-Wallis P-value in the rejection zone indicates that we have enough statistical evidence to reject the Null Hypothesis, meaning that at least one of the hero damage means differs from the rest.</p>
<p>Still, let&rsquo;s generate a visual of the intervals, including the mean and standard deviation, to see which of the hero groups are generating that significant difference.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">interval_plot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">category_col</span><span class="p">,</span> <span class="n">value_col</span><span class="p">,</span> <span class="n">max_cat</span><span class="p">):</span>
    <span class="c1"># Generate mean value and standard deviation per category</span>
    <span class="n">data_mean</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="n">category_col</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span> <span class="kc">False</span><span class="p">)</span>\
                    <span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">value_col_mean</span> <span class="o">=</span> <span class="p">(</span><span class="n">value_col</span><span class="p">,</span> <span class="s2">&#34;mean&#34;</span><span class="p">),</span>
                        <span class="n">value_col_std</span> <span class="o">=</span> <span class="p">(</span><span class="n">value_col</span><span class="p">,</span> <span class="s2">&#34;std&#34;</span><span class="p">))</span>
    <span class="c1"># Select top categories by value</span>
    <span class="n">data_mean</span> <span class="o">=</span> <span class="n">data_mean</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;value_col_mean&#34;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span> <span class="kc">False</span><span class="p">)</span>\
                            <span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span> <span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="n">max_cat</span><span class="p">)</span>
    <span class="c1"># Generate interval plot</span>
    <span class="n">interval_plot</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">data_mean</span><span class="p">,</span>
                                <span class="n">x</span> <span class="o">=</span> <span class="s2">&#34;value_col_mean&#34;</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">category_col</span><span class="p">,</span>
                                <span class="n">color</span> <span class="o">=</span> <span class="n">category_col</span><span class="p">,</span> <span class="n">error_x</span> <span class="o">=</span><span class="s2">&#34;value_col_std&#34;</span><span class="p">)</span>
    <span class="c1"># Comparison line                    </span>
    <span class="n">interval_plot</span><span class="o">.</span><span class="n">add_vline</span><span class="p">(</span><span class="n">x</span><span class="o">=</span> <span class="n">data_mean</span><span class="p">[</span><span class="s1">&#39;value_col_mean&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">line_dash</span> <span class="o">=</span> <span class="s2">&#34;dash&#34;</span><span class="p">,</span>
                            <span class="n">line_color</span><span class="o">=</span><span class="s2">&#34;grey&#34;</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">interval_plot</span>

<span class="n">interval_plot</span> <span class="o">=</span> <span class="n">interval_plot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span> <span class="n">data_heroes_anova</span><span class="p">,</span> <span class="n">category_col</span><span class="o">=</span> <span class="s2">&#34;hero_name&#34;</span><span class="p">,</span>
                                <span class="n">value_col</span><span class="o">=</span> <span class="s2">&#34;hero_damage&#34;</span><span class="p">,</span> <span class="n">max_cat</span><span class="o">=</span> <span class="mi">15</span><span class="p">)</span>
<span class="n">interval_plot</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">interval_plot</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span> <span class="s2">&#34;Interval plot for Hero Damage Logs&#34;</span><span class="p">},</span>
                            <span class="n">xaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span><span class="p">:</span><span class="s1">&#39;Hero Damage&#39;</span><span class="p">},</span>
                            <span class="n">yaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span><span class="p">:</span><span class="s1">&#39;Hero&#39;</span><span class="p">},</span>
                            <span class="n">showlegend</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">interval_plot</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">config</span><span class="o">=</span> <span class="n">static</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>Effectively among 28 hero groups, we can see that there is a hero whose damage log confidence interval differs from others, this one is <a href="https://www.dota2.com/hero/zeus" target="_blank" rel="noopener noreffer">Zeus</a>, and let&rsquo;s explore his behavior overall.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Subset of attributes</span>
<span class="n">data_coord</span> <span class="o">=</span> <span class="n">data_heroes</span><span class="p">[[</span><span class="s1">&#39;hero_name&#39;</span><span class="p">,</span> <span class="s1">&#39;gold_per_min&#39;</span><span class="p">,</span> <span class="s1">&#39;hero_damage&#39;</span><span class="p">,</span> <span class="s1">&#39;tower_damage&#39;</span><span class="p">,</span> <span class="s1">&#39;victory&#39;</span><span class="p">]]</span>

<span class="c1"># Aggregations mapping</span>
<span class="n">aggregations</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;gold_per_min&#39;</span><span class="p">:</span><span class="s1">&#39;median&#39;</span><span class="p">,</span> <span class="s1">&#39;hero_damage&#39;</span><span class="p">:</span><span class="s1">&#39;median&#39;</span><span class="p">,</span> <span class="s1">&#39;tower_damage&#39;</span><span class="p">:</span><span class="s1">&#39;median&#39;</span><span class="p">,</span> <span class="s1">&#39;victory&#39;</span><span class="p">:</span><span class="s1">&#39;sum&#39;</span><span class="p">}</span>

<span class="c1"># Extract top 6 heroes sorted by hero_damage</span>
<span class="n">data_coord</span> <span class="o">=</span> <span class="n">data_coord</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">&#34;hero_name&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">aggregations</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">data_coord</span> <span class="o">=</span> <span class="n">data_coord</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;hero_damage&#34;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span> <span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span> <span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>

<span class="c1"># Linear Scaling for numeric attributes</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">data_coord</span><span class="p">[</span><span class="n">data_coord</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">number</span><span class="p">)</span><span class="o">.</span><span class="n">columns</span><span class="p">]:</span>
    <span class="n">data_coord</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">linearScale</span><span class="p">(</span><span class="n">data_coord</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

<span class="c1"># Format for coordinates plot, vertical spread</span>
<span class="n">data_coord</span> <span class="o">=</span> <span class="n">data_coord</span><span class="o">.</span><span class="n">melt</span><span class="p">(</span><span class="n">id_vars</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;hero_name&#34;</span><span class="p">],</span> <span class="n">var_name</span><span class="o">=</span> <span class="s2">&#34;attribute&#34;</span><span class="p">)</span>

<span class="c1"># Load layout base objects</span>
<span class="n">sign</span><span class="p">,</span> <span class="n">layout</span> <span class="o">=</span> <span class="n">layout_plotly</span><span class="p">(</span><span class="n">height</span><span class="o">=</span> <span class="mi">770</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span> <span class="mi">1100</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span> <span class="mi">15</span><span class="p">)</span>

<span class="c1"># Generate coordplot</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">line_polar</span><span class="p">(</span><span class="n">data_coord</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="s2">&#34;value&#34;</span><span class="p">,</span> <span class="n">theta</span><span class="o">=</span><span class="s2">&#34;hero_name&#34;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&#34;attribute&#34;</span><span class="p">,</span> <span class="n">line_close</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">start_angle</span> <span class="o">=</span> <span class="mi">60</span><span class="p">,</span>
                    <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">diverging</span><span class="o">.</span><span class="n">Portland</span><span class="p">,</span> 
                    <span class="n">template</span><span class="o">=</span><span class="s2">&#34;plotly_dark&#34;</span>
                    <span class="p">)</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s1">&#39;toself&#39;</span><span class="p">)</span>

<span class="c1"># Assign layout</span>
<span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span> <span class="s2">&#34;Interval plot for Hero Damage Logs&#34;</span><span class="p">},</span>
                            <span class="n">xaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span><span class="p">:</span><span class="s1">&#39;Hero Damage&#39;</span><span class="p">},</span>
                            <span class="n">yaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span><span class="p">:</span><span class="s1">&#39;Hero&#39;</span><span class="p">})</span>
<span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">config</span><span class="o">=</span> <span class="n">static</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>From the linearly scaled features we visited in the last graph, we can infer two interesting insights:</p>
<ul>
<li>
<p>Shadow Fiend is the hero that presents the higher metrics in terms of gold collection, tower damage, and victories. This can be due to the &lsquo;<a href="https://dota2.fandom.com/wiki/Shadow_Fiend#Requiem_of_Souls" target="_blank" rel="noopener noreffer">Requiem of Souls</a>&rsquo; ability update, which is a wave turnover attack that was upgraded with the &ldquo;Aghanim&rsquo;s Scepter&rdquo;, one of the most used in patch¬†<a href="https://dota2.fandom.com/wiki/Shadow_Fiend/Changelogs" target="_blank" rel="noopener noreffer">6.86</a>. And this because brings the capacity to reach a higher damage range, which was particularly useful for killing creeps and farming.</p>
</li>
<li>
<p>On the other side, Zeus has the higher damage registry, and the logs surpass by far the other heroes. This was because of several reasons, first in the patch, the developers released a remodel of the character, then this is a hero mostly used in Soft Support roles, so was probably used for Jungling, and then it is a ranged hero with one point of¬†<a href="https://www.dota2.com/hero/zeus" target="_blank" rel="noopener noreffer">usage complexity</a>, which made more straightforward his playability.</p>
</li>
</ul>
<h2 id="-final-thoughts--takeaways">üóíÔ∏è Final thoughts &amp; takeaways</h2>
<p><strong>What can the stakeholders understand and take in consideration?</strong></p>
<p>At the beginning we were looking that the most buffed heroes, in terms of kills were different heroes like Riki, Huskar, and Ursa, however, unless we start using statistical tests applied to a behavioral metric like the damage dealt to enemies, we began noticing contrasts, where some heroes were registering higher victory values like Shadow Fiend and others high damage ranges without having superiority in term of sessions succeeded. For this reason, is preferable to base the conclusion upon statistical techniques to study subjective behaviors.</p>
<p><strong>What could the stakeholders do to take action?</strong></p>
<p>For now, the major concern of the Game Designer, should not be to take immediate action once they see this kind of insight. Instead, they can start collecting more granular data about the registries of damage logs changes, especially when abilities were introduced. Then can study two samples, one after the patch and another before, using the data archived, to run an A/B test to prove its veracity.</p>
<p><strong>What can stakeholders keep working on?</strong></p>
<p>MOBA games tend to rely their sustainability on their community engagement and this can be studied by the player‚Äôs user experience. Usually, when buffed heroes are used for Jungling, which among DOTA 2 community sometimes is a frowned upon activity, this will make the users feel uncomfortable because of unfair mechanics, so the main solution is to build a Gameplay Metrics dashboard segmented by characters to track closely its behavior and take prompter actions each time a patch is released.</p>
<hr>
<h2 id="‚Ñπ-additional-information">‚ÑπÔ∏è Additional Information</h2>
<ul>
<li><strong>About the article</strong></li>
</ul>
<p>This article was developed from the content explained in the Inferential statistics section of Chapter 3 of the ‚ÄòGame Data Science book' and part of the statistical foundation was based on the book ‚ÄòProbability &amp; Statistics for Engineers &amp; Scientists‚Äô by Walpole et. al (2016).</p>
<p>All the assumptions and the whole case scenario were developed by the author of this article, for any suggestion I want to invite you to go to my about section and contact me. Thanks to you for reading as well.</p>
<ul>
<li><strong>Related Content</strong></li>
</ul>
<p>‚Äî Dota 2 Protracker <a href="https://www.dota2protracker.com/meta" target="_blank" rel="noopener noreffer">Role Assistant</a> by Stratz</p>
<p>‚Äî Game Data Science book and additional info at the¬†<a href="https://global.oup.com/academic/product/game-data-science-9780192897879?cc=cr&amp;lang=en&amp;" target="_blank" rel="noopener noreffer">Oxford University Press</a></p>
<p>‚Äî Anders Drachen personal¬†<a href="https://andersdrachen.com/" target="_blank" rel="noopener noreffer">website</a></p>
<p>‚Äî DOTA 2 Balance of Power <a href="https://www.dota2.com/balanceofpower" target="_blank" rel="noopener noreffer">Patch Notes</a></p>
<ul>
<li><strong>Datasets</strong></li>
</ul>
<p>This project was developed with a dataset provided by <a href="https://github.com/albertcui" target="_blank" rel="noopener noreffer">Albert Cui</a>,¬†<a href="https://github.com/howardchung" target="_blank" rel="noopener noreffer">Howard Chung</a>, and¬†<a href="https://github.com/nicholashh" target="_blank" rel="noopener noreffer">Nicholas Hanson-Holtry</a>, which also can be found at <a href="https://academictorrents.com/details/5c5deeb6cfe1c944044367d2e7465fd8bd2f4acf" target="_blank" rel="noopener noreffer">YASP</a> Academic Torrents or you can experiment with this great <a href="https://www.opendota.com/explorer" target="_blank" rel="noopener noreffer">OpenDota API interface</a> to make queries.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><b>Footnote:</b> We won&rsquo;t find the raw data in the <a href="https://github.com/robguilarr/anova_dota/tree/master/DOTA_data" target="_blank" rel="noopener noreffer">Github repository</a> of this project due the storage capabilities, instead you will find a random sample with its respective preprocessing explanation in a Jupyter Notebook.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description>
</item>
<item>
    <title>Inspecting Control Mechanics using t-tests on Fallout New Vegas</title>
    <link>https://robguilar.com/posts/control_mechanics_fallout/</link>
    <pubDate>Wed, 22 Jun 2022 21:57:40 &#43;0800</pubDate><guid>https://robguilar.com/posts/control_mechanics_fallout/</guid>
    <description><![CDATA[<p>The plot of the sequel of Fallout 3 takes context in the year 2281, 4 years after the first escape from Vault 101, within a post-apocalyptic world after the Great War.</p>
<p>This RPG has an open world inspired by cities such as Nevada, California, Arizona, and Utah, allowing users to have a large number of places to explore and a world with NPCs to interact with, ideal for developing behavioral and exploratory analysis.</p>
<p>After its launch in 2010, like many titles of this IP, they have been exposed to mods developed by their community, some of them for Serious-Game purposes and others as non-Serious games. According to Anders Drachen et al. (2021, p. 5), it&rsquo;s &ldquo;a term used to describe games developed for purposes other than entertainment, such as training, promoting health, citizen science, or psychological experiments&rdquo;.</p>
<p>In this case, the data was obtained from a mod developed at the PLAIT (Playable Interactive Technologies) by Northeastern University. The mod is called VPAL: Virtual Personality Assessment Lab, and also can be accessed to the raw telemetry data in the Game Data Science <a href="https://global.oup.com/academic/product/game-data-science-9780192897879?cc=cr&amp;lang=en&amp;" target="_blank" rel="noopener noreffer">book</a>.</p>
<p>It‚Äôs important to keep in mind that the game has been already released, so we&rsquo;ll require to develop a post-production analysis with a help of a mod, so the main conclusions will be focused on a fictional patch improvement made by the Programming team.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Looking for an interactive experience?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">üöÄ Download the Jupyter Notebook, available <a href="https://nbviewer.org/github/robguilarr/control_mechanics_fallout/blob/master/notebook.ipynb">here</a></div>
        </div>
    </div>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/cIzOttk6Dv4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="-introduction-to-problem">‚ö†Ô∏è Introduction to problem</h2>
<h3 id="hypothesis">Hypothesis</h3>
<p>The Producers are concerned for some comments about a change made in the¬†<strong>control mechanics</strong>¬†since the last patch was released.</p>
<p>The UX research team has communicated to them that the QA testers think that some of them found the quest&rsquo;s difficulty too easy and others very leveraged, especially for veteran players of the saga, reason why we can start inferring about changes made in the gameplay experience, which the major changes made were on the mechanics.</p>
<p>The problem is that the QA team is very diversified between experienced and non-experienced testers, so it won‚Äôt be easy to make conclusions. For this reason, we need to look for statistical evidence to validate a hypothesis based on the profile of those testers. Now let‚Äôs establish the main hypothesis for the analysis:</p>
<ol>
<li>Experienced players/testers will have completed¬†<strong>more</strong>¬†quests and more kills (the usual), the mechanical changes were not significant.</li>
<li>Inexperienced players/testers will have completed¬†<strong>more or an equal</strong>¬†quantity of quests and kills (not usual), the mechanical changes were significant.</li>
</ol>
<p>From all the KPIs that you will see next, it‚Äôs important to mention that we‚Äôll bring kills as a secondary validation measure since Fallout it‚Äôs a survival-RPG-like where you have to kill radioactive NPCs in almost every quest. We won‚Äôt count with a difficulty category for each player, so the kills attribute will be one of the few not affected by the difficulty categorization, also because it‚Äôs an end measure, not a progressive one, like shots for example.</p>
<p align="middle"></p>
<h3 id="potential-stakeholders">Potential Stakeholders</h3>
<p>There is an unconformity in the changes made in the control mechanics, the team requires the assistance of a Data Analyst to perform a test and validate if the QA tester&rsquo;s statements make sense. On the other side of the table we have some stakeholders on the development and testing side:</p>
<ul>
<li>Gameplay Engineers: They need to know if the control mechanics are affecting the interactions of the NPCs with the progress of the players since the release of the last patch.</li>
<li>Level Designer: As the whole RPG is designed as quests on an isolated map, they need to know if these are balanced in the sequence or chapter located, or if there is a significant change in the patch that can explain the unconformity.</li>
<li>QA Testers: They are a key source of information while communicating the QA statement to the UX Designer.</li>
<li>UX Designer: They are working side by side with the consumer insights team and the testers to find a clear current situation and take immediate actions if required, by giving the final report to the level designers and the programmers.</li>
</ul>
<p><strong>Note:</strong> To facilitate the understanding of the roles of the development team, I invite you to take a look at <strong><a href="https://www.robguilar.com/posts/gamedev_structure/" target="_blank" rel="noopener noreffer">this</a></strong> diagram that I designed.</p>
<h2 id="-about-the-data--preprocessing-reference">üì• About the data &amp; preprocessing reference</h2>
<p>In a summary, the data is a complete chaos allocated in a repository of text files, so this will require a pipeline to be transformed, cleaned, and get ready to use.</p>
<p>The purpose of data cleaning is to make sure the data is correct. It is rarely the case that once data is collected through the game and transferred to the server, it is automatically ready for analysis.</p>
<h3 id="collection-process-and-structure">Collection process and structure</h3>
<p>Before start let‚Äôs import the libraries we‚Äôre going to need for the preprocess.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1"># Visuals</span>
<span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="nn">px</span>
<span class="kn">import</span> <span class="nn">plotly.figure_factory</span> <span class="k">as</span> <span class="nn">ff</span>

<span class="c1"># Own package</span>
<span class="kn">from</span> <span class="nn">vizformatter.standards</span> <span class="kn">import</span> <span class="n">layout_plotly</span>

<span class="c1"># Load layout base objects</span>
<span class="n">sign</span><span class="p">,</span> <span class="n">layout</span> <span class="o">=</span> <span class="n">layout_plotly</span><span class="p">(</span><span class="n">height</span><span class="o">=</span> <span class="mi">720</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span> <span class="mi">15</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>The instrumentation of the data and storage of all game actions within the game were done through TXT files that are stored on the client side per player, with an unstructured format. For each one, we created a file named [participantNumber].txt, which includes all session data for that participant. If the participant has more than one session, a folder is created, and multiple files are created for that participant.</p>
<p>The transfer process can be made by using a product like Databricks, to run an entire pipeline over a PySpark Notebook. As a demonstration we made an example in a Jupyter notebook, where we got several methods to target, extract, process singles labeled activities, and merge into activity-designated CSVs, which were originally parsed from TXT files by player record. In reality the best practices show that the data can be in a JSON file, stored in a MongoDB, or an SQL database.</p>
<p>The collection was an extensive process so you can access the simulation right¬†<strong><a href="https://github.com/robguilarr/parse_fallout_data/blob/master/parse_actions_notebook.ipynb" target="_blank" rel="noopener noreffer">here</a></strong>¬†with a complete explanation of the bad practices made and how we tackled them. Also, it‚Äôs important to mention that the data was parsed into a single data frame with counted activities per player. After this, we applied a Likert scale to an experience metric according to Anders Drachen et al. (2021), which helped us to separate the data into Experienced and Inexperienced players.</p>
<p>First let‚Äôs check our data.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Inexperienced group of players dataframe</span>
<span class="n">InExperienced</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data/ExpNeg_GameData.csv&#34;</span><span class="p">)</span>

<span class="c1"># Experienced group of players dataframe</span>
<span class="n">Experienced</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data/ExpPos_GameData.csv&#34;</span><span class="p">)</span>

<span class="n">Experienced</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="left"></p>
<p>Both data frames have 17 attributes and, the Experienced data have 28 rows, while the Inexperienced data has 42 rows. In our case the attributes in use will be ‚ÄúQuest Completed‚Äù and ‚ÄúKills‚Äù will be the variables to test.</p>
<ul>
<li><em>Quest Completed</em>: Integer number counting the number of quests the tester completed during the session</li>
<li><em>Kills</em>: Number of kills registered by the player during the session</li>
</ul>
<h2 id="-data-preprocessing">üîß Data Preprocessing</h2>
<p>Before moving to our analysis it‚Äôs important to validate that our data is usable in order to make correct conclusions for the analysis.</p>
<h3 id="data-cleaning--consistency">Data Cleaning &amp; Consistency</h3>
<p>First let‚Äôs validate the data types and the ranges for both groups.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">InExperienced</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,[</span><span class="s2">&#34;User ID&#34;</span><span class="p">,</span><span class="s2">&#34;Kills&#34;</span><span class="p">,</span> <span class="s2">&#34;Quest Completed&#34;</span><span class="p">]]</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="left"></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Experienced</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,[</span><span class="s2">&#34;User ID&#34;</span><span class="p">,</span><span class="s2">&#34;Kills&#34;</span><span class="p">,</span> <span class="s2">&#34;Quest Completed&#34;</span><span class="p">]]</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="left"></p>
<p>As we saw there is no problems linked to the data types, because in the data parsing noted above we took care of it. And from the ranges we infer that the maximum number of Kills registered is from an Inexperienced player with 44, but at the same time 75% of the Experienced players register a higher number in comparison to the Inexperienced ones, the same case apply to the number of Quests Completed.</p>
<h2 id="-inferential-analysis--in-game-interpretations">üîç Inferential Analysis &amp; In-game interpretations</h2>
<h3 id="descriptive-statistics">Descriptive statistics</h3>
<p>Now, we got the next conclusions about their distribution and measurement:</p>
<ul>
<li>User ID
<ul>
<li>Interpretation: Unique and counts with 70 distinct values which make sense since there is a player associated to each one of the data-row parsed</li>
<li>Data type: Nominal transformed to numerical</li>
<li>Measurement type: Discrete/String transformed to integer</li>
</ul>
</li>
<li>Quest Completed
<ul>
<li>Interpretation: Not unique and counts the quests registries per player, and at first sight make sense that the Experienced players show higher numbers than the Inexperienced ones</li>
<li>Data type: Numerical</li>
<li>Measurement type: Integer</li>
</ul>
</li>
<li>Kills
<ul>
<li>Interpretation: Not unique and counts the quests registries per player, and at first sight make sense that the Experienced players show higher numbers than the Inexperienced ones</li>
<li>Data type: Numerical</li>
<li>Measurement type: Integer</li>
</ul>
</li>
</ul>
<p>For the next test plots, we will plot a simulated graph showing how fitted is the actual distribution to an ideal normal curve from the same data, that‚Äôs why we are going to create two functions, one for the new distribution calculation from the median and another to plot it over the original data.</p>
<p>This will be our general approach because this plot will also let us see more clearly the existence of skewing elements.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">math</span>

<span class="c1"># Generate simulated-std based on the median</span>
<span class="k">def</span> <span class="nf">median_std</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
     <span class="c1"># Number of observations</span>
     <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
     <span class="c1"># Median of the data</span>
     <span class="n">median</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">median</span><span class="p">()</span>
     <span class="c1"># Square deviations</span>
     <span class="n">deviations</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span> <span class="o">-</span> <span class="n">median</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">data</span><span class="p">]</span>
     <span class="c1"># Variance</span>
     <span class="n">variance</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">deviations</span><span class="p">)</span> <span class="o">/</span> <span class="n">n</span>
     <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">variance</span><span class="p">)</span>

<span class="c1"># Function to generate a plot of a vector to compare it vs a fitted normal distribution</span>
<span class="k">def</span> <span class="nf">normalplot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">var_name</span><span class="p">):</span>
    <span class="c1"># Generate subset of dataframe</span>
    <span class="n">variable</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">var_name</span><span class="p">]</span>

    <span class="c1"># Max and min from variable</span>
    <span class="n">max_var</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">variable</span><span class="p">)</span>
    <span class="n">min_var</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">variable</span><span class="p">)</span>

    <span class="c1"># Create a random array of normally distributed number with the same parameter as the original data</span>
    <span class="n">y_fit</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span> <span class="n">variable</span><span class="o">.</span><span class="n">median</span><span class="p">(),</span> <span class="n">scale</span><span class="o">=</span> <span class="n">median_std</span><span class="p">(</span><span class="n">variable</span><span class="p">),</span> <span class="n">size</span><span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">variable</span><span class="p">))</span>

    <span class="c1"># Max and min from simulated curve</span>
    <span class="n">max_fit</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">y_fit</span><span class="p">)</span>
    <span class="n">min_fit</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">y_fit</span><span class="p">)</span>

    <span class="c1"># Group data together</span>
    <span class="n">hist_data</span> <span class="o">=</span> <span class="p">[</span><span class="n">variable</span><span class="p">,</span> <span class="n">y_fit</span><span class="p">]</span>
    <span class="n">group_labels</span> <span class="o">=</span> <span class="p">[</span><span class="n">var_name</span><span class="p">,</span> <span class="s1">&#39;Median-Simulated &lt;br&gt; Normal Curve&#39;</span><span class="p">]</span>
    <span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;#007FFF&#34;</span><span class="p">,</span><span class="s2">&#34;#FF5A5F&#34;</span><span class="p">]</span>

    <span class="c1"># Create distplot with custom bin_size</span>
    <span class="n">plot</span> <span class="o">=</span> <span class="n">ff</span><span class="o">.</span><span class="n">create_distplot</span><span class="p">(</span><span class="n">hist_data</span><span class="p">,</span> <span class="n">group_labels</span><span class="p">,</span> <span class="n">bin_size</span><span class="o">=</span><span class="p">[</span><span class="mf">0.75</span><span class="p">,</span><span class="mf">0.75</span><span class="p">],</span>
                                <span class="n">show_rug</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">show_hist</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span> <span class="n">colors</span><span class="p">)</span>

    <span class="c1"># Update layout</span>
    <span class="n">plot</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
    <span class="n">plot</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span><span class="s1">&#39;Density Plot of &#39;</span><span class="o">+</span><span class="n">var_name</span><span class="o">+</span><span class="s1">&#39; vs a Normal Distribution&#39;</span><span class="p">},</span>
                        <span class="n">xaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span><span class="p">:</span><span class="n">var_name</span><span class="p">},</span>
                        <span class="n">yaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span><span class="p">:</span><span class="s2">&#34;Density&#34;</span><span class="p">})</span>
    <span class="n">plot</span><span class="o">.</span><span class="n">update_xaxes</span><span class="p">(</span><span class="nb">range</span><span class="o">=</span><span class="p">[</span><span class="n">min_var</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_var</span><span class="p">,</span><span class="n">max_fit</span><span class="p">)])</span>
    <span class="n">plot</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">plot</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="-two-sample-t-test-for-quests-completed-by-experience-group">‚öîÔ∏è Two Sample T-Test for Quests Completed by Experience Group</h3>
<p>A two sample t-test is used to test whether there is a significant difference between <strong>two groups</strong> means, where the hypothesis will be:</p>
<ul>
<li>$H_0: \mu_{ex} = \mu_{inex}$ (population mean of &ldquo;Experienced Players Completed Quests&rdquo; is equal to &ldquo;Inexperienced Players Completed Quests&rdquo;)</li>
<li>$H_1: \mu_{ex} \ne \mu_{inex}$ (population mean of &ldquo;Experienced Players Completed Quests&rdquo; is different from &ldquo;Inexperienced Players Completed Quests&rdquo;)</li>
</ul>
<p>This test makes the following assumptions:</p>
<ul>
<li>The two samples data groups are independent</li>
<li>The data elements in respective groups follow any normal distribution</li>
<li>The given two samples have similar variances (homogeneity assumption)</li>
</ul>
<p>In this case, both groups are independent since none of them provide information about the other and vice versa.</p>
<p><strong>Normality Check</strong></p>
<p>First let&rsquo;s visualize the distribution for the Experienced players.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">expQuestnorm</span> <span class="o">=</span> <span class="n">normalplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span> <span class="n">Experienced</span><span class="p">,</span> <span class="n">var_name</span><span class="o">=</span> <span class="s1">&#39;Quest Completed&#39;</span><span class="p">)</span>
<span class="n">expQuestnorm</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span><span class="s1">&#39;Density Plot of Quest Completed by Experienced Players&#39;</span><span class="p">})</span>
<span class="n">expQuestnorm</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>And the distribution for Inexperienced players.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">inQuestnorm</span> <span class="o">=</span> <span class="n">normalplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span> <span class="n">InExperienced</span><span class="p">,</span> <span class="n">var_name</span><span class="o">=</span> <span class="s1">&#39;Quest Completed&#39;</span><span class="p">)</span>
<span class="n">inQuestnorm</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span><span class="s1">&#39;Density Plot of Quest Completed by Inexperienced Players&#39;</span><span class="p">})</span>
<span class="n">inQuestnorm</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>Notice that the data is normal for both cases and in terms of the quantity of &ldquo;quests completed&rdquo; by the experienced player&rsquo;s data is slightly higher than the inexperienced ones.</p>
<p><strong>Variance Homogeneity</strong></p>
<p>First let&rsquo;s see the variance for each group of testers.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Print the variance of both data groups</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Quest Completed variance for Experienced players: &#34;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">var</span><span class="p">(</span><span class="n">Experienced</span><span class="p">[</span><span class="s2">&#34;Quest Completed&#34;</span><span class="p">]))</span> <span class="o">+</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span>
    <span class="s2">&#34;Quest Completed variance for Inexperienced players: &#34;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">var</span><span class="p">(</span><span class="n">InExperienced</span><span class="p">[</span><span class="s2">&#34;Quest Completed&#34;</span><span class="p">]))</span> <span class="o">+</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Quest Completed variance for Experienced players: 3.25
 Quest Completed variance for Inexperienced players: 2.283446712018141
</code></pre></td></tr></table>
</div>
</div><p>In the good practice the correct way to do this validation is by a Homogeneity Test, so let&rsquo;s make a <strong>Barlett</strong> test since our data is normal (for non-normal is preferred <strong>Levene&rsquo;s</strong>). So let‚Äôs start from the next hypothesis.</p>
<ul>
<li>$H_0: \sigma^2_{ex} = \sigma^2_{inex}$ (The variances are equal across in both groups)</li>
<li>$H_1: \sigma^2_{ex} \ne \sigma^2_{inex}$ (The variances are not equal across in both groups)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Import the bartlett method</span>
<span class="kn">from</span> <span class="nn">scipy.stats</span> <span class="kn">import</span> <span class="n">bartlett</span>

<span class="c1"># Bartlett&#39;s test in Python with SciPy:</span>
<span class="n">bartlett</span><span class="p">(</span><span class="n">Experienced</span><span class="p">[</span><span class="s2">&#34;Quest Completed&#34;</span><span class="p">],</span> <span class="n">InExperienced</span><span class="p">[</span><span class="s2">&#34;Quest Completed&#34;</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">BartlettResult(statistic=1.0905002879637673, pvalue=0.29636038782360125)
</code></pre></td></tr></table>
</div>
</div><p>Our P-value is above 0.05, so we have enough statistical evidence to accept the hypothesis that the variances are equal between the Experienced testers and the Inexperienced players.</p>
<p>Now that we checked that we have normal data and homogeneity in our variances, let&rsquo;s continue with our <strong>two sample t-test</strong>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Import the stats module</span>
<span class="kn">import</span> <span class="nn">scipy.stats</span> <span class="k">as</span> <span class="nn">stats</span>

<span class="c1"># Perform the two sample t-test with equal variances</span>
<span class="n">stats</span><span class="o">.</span><span class="n">ttest_ind</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">Experienced</span><span class="p">[</span><span class="s2">&#34;Quest Completed&#34;</span><span class="p">],</span> <span class="n">b</span><span class="o">=</span><span class="n">InExperienced</span><span class="p">[</span><span class="s2">&#34;Quest Completed&#34;</span><span class="p">],</span> <span class="n">equal_var</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Ttest_indResult(statistic=3.8261587063084392, pvalue=0.0002855175095244425)
</code></pre></td></tr></table>
</div>
</div><p>We have enough statistical evidence to reject the null hypothesis, the population mean of Quests Completed by &ldquo;Experienced Players&rdquo; is significantly different from the &ldquo;Inexperienced Players&rdquo;.</p>
<p>As a supposition, we can say that the difficulty selected by the player can be a factor affecting the Completion of the Quest. Considering that the difficulty levels in Fallout New Vegas can vary by two variables which are &ldquo;Damage taken from Enemy&rdquo; and &ldquo;Damage dealt with Enemy&rdquo;, without mentioning the Hardcore mode which was excluded from the samples.</p>
<p>The difficulty is an important factor to consider since an experienced player can know what is the level of preference, while for an inexperienced player is a &ldquo;try and fail situation&rdquo;, so for a future study it‚Äôs important to reconsider how this variable would affect the results.</p>
<h3 id="-two-sample-mann-whitney-test-for-kills-by-experience-group">üíÄ Two Sample Mann-Whitney Test for Kills by Experience Group</h3>
<p>A two sample <a href="https://www.statstutor.ac.uk/resources/uploaded/mannwhitney.pdf" target="_blank" rel="noopener noreffer">Mann-Whitney U</a> test is used to test whether there is a significant difference between <strong>two groups</strong> distributions by comparing medians, where the hypothesis will be:</p>
<ul>
<li>$H_0: P(x_{ex} &gt; x_{inex}) = 0.5$ (population median of &ldquo;Experienced Players Kills&rdquo; is equal to &ldquo;Inexperienced Players Kills&rdquo;, same distribution)</li>
<li>$H_1: P(x_{ex} &gt; x_{inex}) \ne 0.5$ (population median of &ldquo;Experienced Players Kills&rdquo; is different from &ldquo;Inexperienced Players Kills&rdquo;, different distribution)</li>
</ul>
<p>In other words, the null hypothesis is that, ‚Äúthe probability that a <strong>randomly drawn member</strong> of the first population will exceed a member of the second population, is 50%‚Äù.</p>
<p>This test makes the following assumptions:</p>
<ul>
<li>The two samples data groups are independent</li>
<li>The data elements in respective groups are continuous and not-normal</li>
</ul>
<p>It&rsquo;s the equivalent of a two sample t-test without the normality assumption. Also, both groups are independent since none of them provide information about the other and vice-versa.</p>
<p><strong>Normality Check</strong></p>
<p>First let&rsquo;s visualize the distribution for the Experienced players.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">expKillsnorm</span> <span class="o">=</span> <span class="n">normalplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span> <span class="n">Experienced</span><span class="p">,</span> <span class="n">var_name</span><span class="o">=</span> <span class="s1">&#39;Kills&#39;</span><span class="p">)</span>
<span class="n">expKillsnorm</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span><span class="s1">&#39;Density Plot of Kills by Experienced Players&#39;</span><span class="p">})</span>
<span class="n">expKillsnorm</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>And for Inexperienced players.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">inKillsnorm</span> <span class="o">=</span> <span class="n">normalplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span> <span class="n">InExperienced</span><span class="p">,</span> <span class="n">var_name</span><span class="o">=</span> <span class="s1">&#39;Kills&#39;</span><span class="p">)</span>
<span class="n">inKillsnorm</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span><span class="s1">&#39;Density Plot of Kills by Inexperienced Players&#39;</span><span class="p">})</span>
<span class="n">inKillsnorm</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>Both groups show a clear violation of the normality principle, where the data is highly skewed to the right.</p>
<p>For the Inexperienced players, despite considering excluding the players with 35 or more kills registered, it wouldn&rsquo;t be significant, it will still remain skewed to the right.</p>
<p>In cases where our data don&rsquo;t have a normal distribution, we need to consider¬†<strong>non-parametric</strong>¬†alternatives to make assumptions. That is the main reason why we are going to use a¬†<strong>Mann Whitney U Test</strong>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">scipy.stats</span> <span class="kn">import</span> <span class="n">mannwhitneyu</span>

<span class="k">def</span> <span class="nf">mannwhitneyu_est</span><span class="p">(</span><span class="n">data1</span><span class="p">,</span> <span class="n">data2</span><span class="p">):</span>
    <span class="n">statistic</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="n">mannwhitneyu</span><span class="p">(</span><span class="n">data1</span><span class="p">,</span> <span class="n">data2</span><span class="p">,</span> <span class="n">alternative</span> <span class="o">=</span> <span class="s1">&#39;two-sided&#39;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">p</span>
    
<span class="nb">print</span><span class="p">(</span><span class="n">mannwhitneyu_est</span><span class="p">(</span><span class="n">Experienced</span><span class="o">.</span><span class="n">Kills</span><span class="p">,</span> <span class="n">InExperienced</span><span class="o">.</span><span class="n">Kills</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0.0020247429887724775
</code></pre></td></tr></table>
</div>
</div><p>Finally we reject the null hypothesis, since our p-value is less than 0.05 with a 95% of confidence. This means that population median of &ldquo;Experienced Player Kills&rdquo; is different from &ldquo;Inexperienced Player Kills&rdquo;, the same we can conclude from the distribution.</p>
<h3 id="-two-sample-bootstrap-hypothesis-test-for-kills-metric">üîÉ Two-sample bootstrap hypothesis test for Kills metric</h3>
<p>After some meetings with the Level Designers, they aren&rsquo;t convinced to take action upon the recommendations given from a sample size of 28 and 42 for the Experienced and Inexperienced groups respectively. So they require us to take another type of validation to ensure the confidence of our conclusion.</p>
<p>Unfortunately, the Programmers require to get that insight as soon as possible to start fixing the patch. So, the only alternative to satisfy both parts is to perform a bootstrapping with the means and the p-value of the past test.</p>
<p>Bootstrapping is one of the best choices to perform better results in sample statistics when we count with few logs. This Statistical Inferential Procedure works by resampling the data. We will take the same values sampled by group, from a resampling with replacement, to an extensive dataset to compare the means between the Kills metric of Experienced players and Inexperienced players.</p>
<p>On the other side, we¬†<strong>can&rsquo;t</strong>¬†use a permutation of the samples, since we can&rsquo;t conclude that both groups' distributions are the same. Before this let&rsquo;s create our bootstrapping replicates generator function.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Bootstrapping Means Function</span>
<span class="k">def</span> <span class="nf">draw_bs_reps</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">func</span><span class="p">,</span><span class="n">iterations</span><span class="p">):</span>
    <span class="n">boot_arr</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
        <span class="n">boot_arr</span><span class="o">.</span><span class="n">append</span><span class="p">(</span> <span class="n">func</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)))</span> <span class="p">)</span>
    <span class="k">return</span> <span class="n">boot_arr</span>

<span class="c1"># Bootstrapping Mann-Whitney Test</span>
<span class="k">def</span> <span class="nf">draw_bs_test</span><span class="p">(</span><span class="n">data1</span><span class="p">,</span> <span class="n">data2</span><span class="p">,</span> <span class="n">iterations</span><span class="p">):</span>
    <span class="n">boot_arr</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
        <span class="n">estimate</span> <span class="o">=</span> <span class="n">mannwhitneyu_est</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">data1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data1</span><span class="p">)),</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">data2</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data2</span><span class="p">)))</span>
        <span class="n">boot_arr</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">estimate</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">boot_arr</span>
</code></pre></td></tr></table>
</div>
</div><p>And with the next function we will create our new estimates for the empirical means and the values of the Mann-Whitney U Test.</p>
<p>This function will return two p-values and two arrays of bootstrapped estimates, which we will describe next:</p>
<ul>
<li><strong>p_emp:</strong> P-value measured from the estimated difference in means between both groups, showing the probabilities of randomly getting a &ldquo;Kills&rdquo; value from the Experienced that will be greater than one of the Inexperienced group</li>
<li><strong>bs_emp_replicates:</strong> Array of bootstrapped difference in means</li>
<li><strong>p_test:</strong> P-value measured from the estimated probability of getting a statically significant p-value from the Mann-Whitney Test (p-value &lt; 0.05), in other words how many tests present different distribution for both groups</li>
<li><strong>bs_test_replicates:</strong> Array of bootstrapped p-values of Mann-Whitney Test</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">statistics</span> <span class="kn">import</span> <span class="n">mean</span>

<span class="c1"># Bootrapping probability estimates (p-value)</span>
<span class="k">def</span> <span class="nf">twosampleboot</span><span class="p">(</span><span class="n">data1</span><span class="p">,</span> <span class="n">data2</span><span class="p">,</span> <span class="n">operation</span><span class="p">,</span> <span class="n">iterations</span><span class="p">):</span>
    <span class="c1"># Compute n bootstrap replicates from the groups arrays</span>
    <span class="n">bs_replicates_1</span> <span class="o">=</span> <span class="n">draw_bs_reps</span><span class="p">(</span><span class="n">data1</span><span class="p">,</span> <span class="n">operation</span><span class="p">,</span> <span class="n">iterations</span><span class="o">=</span> <span class="n">iterations</span><span class="p">)</span>
    <span class="n">bs_replicates_2</span> <span class="o">=</span> <span class="n">draw_bs_reps</span><span class="p">(</span><span class="n">data2</span><span class="p">,</span> <span class="n">operation</span><span class="p">,</span> <span class="n">iterations</span><span class="o">=</span> <span class="n">iterations</span><span class="p">)</span>

    <span class="c1"># Get replicates of empirical difference of means</span>
    <span class="n">bs_emp</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">bs_replicates_1</span><span class="p">)</span> <span class="o">-</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">bs_replicates_2</span><span class="p">)</span>

    <span class="c1"># Compute empircal difference in means for p-value, where of Experienced-Kills &gt; InExperienced-Kills</span>
    <span class="n">p_emp</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">bs_emp</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">bs_emp</span><span class="p">)</span>

    <span class="c1"># Get replicates of Mann-Whitney U Test</span>
    <span class="n">bs_test</span> <span class="o">=</span> <span class="n">draw_bs_test</span><span class="p">(</span><span class="n">data1</span><span class="o">=</span> <span class="n">Experienced</span><span class="o">.</span><span class="n">Kills</span><span class="p">,</span> <span class="n">data2</span><span class="o">=</span> <span class="n">InExperienced</span><span class="o">.</span><span class="n">Kills</span><span class="p">,</span> <span class="n">iterations</span><span class="o">=</span> <span class="n">iterations</span><span class="p">)</span>

    <span class="c1"># Compute and print p-value of estimate with different distributions/medians</span>
    <span class="n">p_test</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">([</span><span class="mi">1</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mf">0.05</span> <span class="k">else</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">bs_test</span><span class="p">])</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">bs_test</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">p_emp</span><span class="p">,</span> <span class="n">bs_emp</span><span class="p">,</span> <span class="n">p_test</span><span class="p">,</span> <span class="n">bs_test</span>
    
<span class="c1"># Return p-values and bs_replicates</span>
<span class="n">p_emp</span><span class="p">,</span> <span class="n">bs_emp_replicates</span><span class="p">,</span> <span class="n">p_test</span><span class="p">,</span> <span class="n">bs_test_replicates</span> <span class="o">=</span> <span class="n">twosampleboot</span><span class="p">(</span><span class="n">Experienced</span><span class="o">.</span><span class="n">Kills</span><span class="p">,</span> <span class="n">InExperienced</span><span class="o">.</span><span class="n">Kills</span><span class="p">,</span> <span class="n">operation</span><span class="o">=</span> <span class="n">mean</span><span class="p">,</span> <span class="n">iterations</span><span class="o">=</span> <span class="mi">10000</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Diff. Means p-value =&#39;</span><span class="p">,</span> <span class="n">p_emp</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span>
       <span class="s1">&#39;Mann-Whitney Test p-value =&#39;</span><span class="p">,</span><span class="n">p_test</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Diff. Means p-value = 0.9852 
 Mann-Whitney Test p-value = 0.8991
</code></pre></td></tr></table>
</div>
</div><p>After making a sample of 10,000 replicates, we can conclude that 98% of the time, the disparity in the Kills average will be higher in Experienced Players than in Inexperienced players, and from that replicates 90% of them will present a significant difference between distributions.</p>
<p>Now let&rsquo;s plot the replicates of the Average Kills difference between groups.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">bar_annotation</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">round</span><span class="p">((</span><span class="mi">1</span><span class="o">-</span><span class="n">p_emp</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span> <span class="o">+</span> <span class="s2">&#34;% &#34;</span> <span class="o">+</span> <span class="s2">&#34;of replicates &lt;br&gt;present values below 0&#34;</span>

<span class="n">histboot</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">histogram</span><span class="p">(</span><span class="n">bs_emp_replicates</span><span class="p">)</span>
<span class="n">histboot</span><span class="o">.</span><span class="n">add_vrect</span><span class="p">(</span><span class="n">x0</span><span class="o">=</span><span class="nb">min</span><span class="p">(</span><span class="n">bs_emp_replicates</span><span class="p">),</span> <span class="n">x1</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> 
              <span class="n">annotation_text</span><span class="o">=</span> <span class="n">bar_annotation</span><span class="p">,</span> <span class="n">annotation_position</span><span class="o">=</span><span class="s2">&#34;left&#34;</span><span class="p">,</span>
              <span class="n">fillcolor</span><span class="o">=</span><span class="s2">&#34;red&#34;</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.25</span><span class="p">,</span> <span class="n">line_width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">histboot</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">histboot</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span><span class="s1">&#39;Bootstrapped Average Kills difference of &lt;br&gt;Experienced vs Inexperienced Players&#39;</span><span class="p">},</span>
                        <span class="n">yaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;title&#39;</span><span class="p">:</span><span class="s2">&#34;Count of replicates&#34;</span><span class="p">},</span> <span class="n">xaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;title&#39;</span><span class="p">:</span><span class="s2">&#34;Difference Estimate&#34;</span><span class="p">},</span> <span class="n">showlegend</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">histboot</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">histboot</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>Just 1,48% of the Inexperienced players present more Kills registered than the Experienced ones, by taking a conclusion from 10,000 replicates of a resampled dataset.</p>
<p>In the case of the bootstrapped P-value for the Mann-Whitney U Test estimate, the best way to avoid the binning bias from a huge number of decimal values is to represent the probabilities with an Empirical Cumulative Distribution Function, as we are going to see next.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">plotly.graph_objects</span> <span class="k">as</span> <span class="nn">go</span>

<span class="c1"># Import numpy library</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="c1"># ECDF Generator function</span>
<span class="k">def</span> <span class="nf">ecdf</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="c1"># Generate ECDF (Empirical Cumulative Distribution Function)</span>
    <span class="c1"># for one dimension arrays</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="c1"># X axis data</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

     <span class="c1"># Y axis data</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">n</span>

    <span class="k">return</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>

<span class="c1"># ECDF plot generator</span>
<span class="k">def</span> <span class="nf">ecdf_plot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">var_label</span><span class="p">):</span>
    <span class="c1"># Generate ECDF data</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">ecdf</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="c1"># Generate percentile makers </span>
    <span class="n">percentiles</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">75</span><span class="p">,</span> <span class="n">p_test</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="mi">95</span><span class="p">])</span> <span class="c1">#Plot the percentile where the bootstrapped p-value is located</span>
    <span class="n">ptiles</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">percentile</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">percentiles</span><span class="p">)</span>

    <span class="c1"># ECDF plot</span>
    <span class="n">plot</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Figure</span><span class="p">()</span>

    <span class="c1"># Add traces</span>
    <span class="n">plot</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">,</span>
                        <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;markers&#39;</span><span class="p">,</span>
                        <span class="n">name</span><span class="o">=</span><span class="n">var_label</span><span class="p">))</span>
    <span class="n">plot</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">ptiles</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">percentiles</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span>
                        <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;markers+text&#39;</span><span class="p">,</span>
                        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;Percentiles&#39;</span><span class="p">,</span> <span class="n">marker_line_width</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">marker_size</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
                        <span class="n">text</span><span class="o">=</span><span class="n">percentiles</span><span class="p">,</span> <span class="n">textposition</span><span class="o">=</span><span class="s2">&#34;bottom right&#34;</span><span class="p">))</span>
    <span class="n">plot</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
    <span class="n">plot</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">plot</span>

<span class="n">ecdf</span> <span class="o">=</span> <span class="n">ecdf_plot</span><span class="p">(</span><span class="n">bs_test_replicates</span><span class="p">,</span> <span class="s2">&#34;P-value replicates&#34;</span><span class="p">)</span>
<span class="n">ecdf</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span><span class="s1">&#39;ECDF of Bootstrapped P-values for Mann-Whitney U Test&#39;</span><span class="p">},</span>
                        <span class="n">yaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;title&#39;</span><span class="p">:</span><span class="s2">&#34;Cumulative Probability&#34;</span><span class="p">})</span>
<span class="n">ecdf</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>From this function with 89.91% of the 10,000 replicates of the tests, we can conclude that the distribution or the median between experienced and inexperienced players is different because its p-value is still below the 0.05 accepted.</p>
<h2 id="-final-thoughts--takeaways">üóíÔ∏è Final thoughts &amp; takeaways</h2>
<p><strong>What can the stakeholders understand and take in consideration?</strong></p>
<p>There is a significant advantage of veteran players over the new ones, giving us the conclusion that the changes in mechanics made from the last Fallout New Vegas patch still very similar and don‚Äôt present meaningful changes, reason why veteran players are finding it easy and have a clear advantage like it‚Äôs usual, so for now the programmers should not be concerned about fixing the patch.</p>
<p><strong>What could the stakeholders do to take action?</strong></p>
<p>The Level Designers can consider working side by side with the UX team, to make recurrent revisions before launching a new patch, because always the community will expect an experience-centric work of the whole development team in terms of the quality delivered.</p>
<p>Also for a future study we could consider to gather the difficulty category and merge it into the dataset and see if this variable is producing a significant variability in our final output.</p>
<p><strong>What can stakeholders keep working on?</strong></p>
<p>For significant changes in game mechanics, is recommended to do it just under a critical situation, like when is a significant bug affecting the player experience, otherwise it‚Äôs preferable to leave it until the launch of the next title reveal and test the audience reaction before the final implementation, if it‚Äôs possible.</p>
<hr>
<h2 id="‚Ñπ-additional-information">‚ÑπÔ∏è Additional Information</h2>
<ul>
<li><strong>About the article</strong></li>
</ul>
<p>This article was developed from the content explained in the Inferential statistics section of Chapter 3 of the Game Data Science book. All the conclusions made were inspired by a player-profiling from in-game metrics by using deductive reasoning where we assumed, and then we proved it using significance, confidence and variance, through Inferential analysis.</p>
<p>All the assumptions and the whole case scenario were developed by the author of this article, for any suggestion I want to invite you to go to my about section and contact me. Thanks to you for reading as well.</p>
<ul>
<li><strong>Related Content</strong></li>
</ul>
<p>‚Äî Game Data Science book and additional info at the <a href="https://global.oup.com/academic/product/game-data-science-9780192897879?cc=cr&amp;lang=en&amp;" target="_blank" rel="noopener noreffer">Oxford University Press</a></p>
<p>‚Äî Anders Drachen personal¬†<a href="https://andersdrachen.com/" target="_blank" rel="noopener noreffer">website</a></p>
<ul>
<li><strong>Datasets</strong></li>
</ul>
<p>This project was developed with a dataset provided by Anders Drachen et. al (2021), respecting the author rights of this book the entire raw data won‚Äôt be published, however, you can access the transformed data in my¬†<a href="https://github.com/robguilarr/parse_fallout_data/tree/master/parsed_data" target="_blank" rel="noopener noreffer">Github</a> repository.</p>
]]></description>
</item>
<item>
    <title>Leveling Difficulty in Candy Crush Saga</title>
    <link>https://robguilar.com/posts/candy_crush_difficulty/</link>
    <pubDate>Thu, 19 May 2022 21:57:40 &#43;0800</pubDate><guid>https://robguilar.com/posts/candy_crush_difficulty/</guid>
    <description><![CDATA[<p>Today&rsquo;s analysis will lead us to a world fulfilled with divine puzzle adventures at the side of Tiffi and Mr. Toffee, in which we&rsquo;ll glimpse the success rate of more than 6800 peers with eagerness for treats.</p>
<p>The game is <a href="https://www.king.com/game/candycrush" target="_blank" rel="noopener noreffer">Candy Crush Saga</a> a record-breaking mobile game developed by King, a subsidiary of Activision Blizzard since 2016.</p>
<p>In terms of its gameplay, this game used to have a total of 816 episodes, until one of the major add-ons was removed (Dreamworld). The point is that now the game has 771 episodes, in which the player has 5 episodes per world, and, each episode contains contain 15 levels approximately.</p>
<p>If you are one of the few that haven&rsquo;t played Candy Crush, here&rsquo;s a short intro:</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Looking for an interactive experience?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">üöÄ Download the Jupyter Notebook, available <a href="https://nbviewer.org/github/robguilarr/candy_crush_difficulty/blob/master/notebook.ipynb">here</a></div>
        </div>
    </div>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/EW-HVzqQpsI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="-introduction-to-problem">‚ö†Ô∏è Introduction to problem</h2>
<h3 id="hypothesis">Hypothesis</h3>
<p>We&rsquo;ll review a game that potentially can lead any developer to many unseen problems, considering the abundance of levels. From the perspective of a customer, there can be several points of view that can emerge and, at the same time, can become unnoticed. That&rsquo;s why our diagnosis will start from 2 potential hypothesis:</p>
<ol>
<li>The game is too easy so it became boring over time</li>
<li>The game is too hard so the players leave it and become frustrated</li>
</ol>
<p align="middle"></p>
<h3 id="potential-stakeholders">Potential Stakeholders</h3>
<p>None of the past hypotheses are the main intentions of the developers. So they require a Data Analyst to help with this task since the developers are seeing only the backend factors affecting the game, but it&rsquo;s also critical to consider those external ones that affect the experience for the player and the sustainability of this game for the company. Among the main stakeholders could be:</p>
<ul>
<li>Level Designers: They work aligned with the rest of the Engineering Team because they still have a backend perspective and their next patch release needs to be aligned with the insights given by the analyst.</li>
<li>Mobile Designer &amp; User Retention Expert: This is a game whose main income input is in-game purchases because it‚Äôs a <a href="https://en.wikipedia.org/wiki/Free-to-play" target="_blank" rel="noopener noreffer">F2P</a>, the main source of income is centered in retain the engagement in the game and keeping the consumers on the platform.</li>
<li>Gameplay Engineer: They require to start working on the difficulty adjustment patch as soon as they receive the final statement.</li>
<li>Executive Producer: Besides Candy Crush being an IP with internal producers since it&rsquo;s developed and published by King, the <a href="https://www.activisionblizzard.com/" target="_blank" rel="noopener noreffer">parent company</a> will expect to have an <a href="https://www.forbes.com/advisor/investing/roi-return-on-investment/" target="_blank" rel="noopener noreffer">ROI</a> aligned with their expectations.</li>
<li>Players' community: They expect to have an endurable and great experience with a brief response in case of disconformities.</li>
</ul>
<p><strong>Note:</strong> To facilitate the understanding of the roles of the development team, I invite you to take a look at <strong><a href="https://www.robguilar.com/posts/gamedev_structure/" target="_blank" rel="noopener noreffer">this</a></strong> diagram that I designed.</p>
<h2 id="-about-the-data">üì• About the data</h2>
<h3 id="collection-process-and-structure">Collection process and structure</h3>
<p>Before start let‚Äôs import the libraries we‚Äôre going to need</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="c1"># For visualization</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="nn">px</span>
<span class="kn">import</span> <span class="nn">plotly.graph_objects</span> <span class="k">as</span> <span class="nn">go</span>

<span class="c1"># Own layout design library</span>
<span class="kn">from</span> <span class="nn">vizformatter.standards</span> <span class="kn">import</span> <span class="n">layout_plotly</span>

<span class="c1"># Load layout base objects</span>
<span class="n">sign</span><span class="p">,</span> <span class="n">layout</span> <span class="o">=</span> <span class="n">layout_plotly</span><span class="p">(</span><span class="n">height</span><span class="o">=</span> <span class="mi">720</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span> <span class="mi">15</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>Due to the extensive size of possible episodes to analyze, we‚Äôll limit the analysis to just one of them, which exactly will have data available for 15 levels. To do this, the analysts need to request a sample from the telemetry systems to get data related to the number of attempts per player in each episode level.</p>
<p>Also, it‚Äôs important to mention that in terms of privacy, this analysis requires importing the data with the <em>player_id</em> codified for privacy reasons. Fortunately, in this case, Rasmus Baath, Data Science Lead at¬†<a href="https://castle.io/" target="_blank" rel="noopener noreffer">castle.io</a>, provided us with a Dataset with a sample gathered in 2014.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;datasets/candy_crush.csv&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="left"></p>
<p>We can see that our data is <strong>structured</strong> and consists of 5 attributes:</p>
<ul>
<li><em>player_id</em>: a unique player id</li>
<li><em>dt</em>: the date</li>
<li><em>level</em>: the level number within the episode, from 1 to 15</li>
<li><em>num_attempts</em>: number of level attempts for the player on that level and date</li>
<li><em>num_success</em>: number of level attempts that resulted in a success/win for the player on that level and date</li>
</ul>
<h2 id="-data-preprocessing">üîß Data Preprocessing</h2>
<p>Before starting the analysis we need to do some validations on the dataset.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Count and display the number of unique players</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Number of players: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">player_id</span><span class="o">.</span><span class="n">nunique</span><span class="p">(),</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="s2">&#34;Number of records: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">player_id</span><span class="p">),</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="c1"># Display the date range of the data</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Period for which we have data: </span><span class="se">\n</span><span class="s2">From: &#34;</span><span class="p">,</span>
        <span class="nb">min</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">dt</span><span class="p">),</span> <span class="s1">&#39; To:&#39;</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">dt</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Number of players: 
 6814 
 Number of records: 
 16865 

Period for which we have data: 
From:  2014-01-01  To: 2014-01-07
</code></pre></td></tr></table>
</div>
</div><h3 id="data-cleaning">Data Cleaning</h3>
<p>The data doesn‚Äôt require any kind of transformation and the data types are aligned with their purpose.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">dtypes</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">player_id       object
dt              object
level            int64
num_attempts     int64
num_success      int64
dtype: object
</code></pre></td></tr></table>
</div>
</div><h3 id="data-consistency">Data Consistency</h3>
<p>The usability of the data it‚Äôs rather good, since we don‚Äôt count with ‚ÄúNAN‚Äù (Not A Number), ‚ÄúNA‚Äù (Not Available), or ‚ÄúNULL‚Äù (an empty set) values.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Function the plot the percentage of missing values</span>
<span class="k">def</span> <span class="nf">na_counter</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;NaN Values per column:&#34;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
        <span class="n">percentage</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">-</span> <span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="n">df</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">isna</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">())</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>

        <span class="c1"># Only return columns with more than 5% of NA values</span>
        <span class="k">if</span> <span class="n">percentage</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="s2">&#34; has &#34;</span><span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="n">percentage</span><span class="p">))</span> <span class="o">+</span><span class="s2">&#34;</span><span class="si">% o</span><span class="s2">f Null Values&#34;</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">continue</span>

<span class="c1"># Execute function</span>
<span class="n">na_counter</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">NaN Values per column:
 None
</code></pre></td></tr></table>
</div>
</div><p>By this way, we can conclude that there were not errors in our telemetry logs during the data collection.</p>
<h3 id="normalization">Normalization</h3>
<p>Next, we can conclude there were no impossible numbers, except for a player that tried to complete the level 11 in 258 attempts with just 1 success. This is the only registry we exclude since it can be an influential outlier and we don‚Äôt rely on more attributes about him to create conclusions.</p>
<p>Noticing the distribution of the quartiles and comprehending the purpose of our analysis, we can validate that the data is comparable and doesn‚Äôt need transformations.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">num_attempts</span> <span class="o">!=</span> <span class="mi">258</span><span class="p">]</span>
<span class="n">df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="left"></p>
<h2 id="-exploratory-analysis--in-game-interpretations">üîç Exploratory Analysis &amp; In-game interpretations</h2>
<h3 id="summary-statistics">Summary statistics</h3>
<p>Excluding the outliers we mentioned before, we got the next conclusions about their distribution and measurement:</p>
<ul>
<li><em>player_id</em>
<ul>
<li>Interpretation: Not unique and counts with 6814 distinct values which make sense since there is a player with records of multiple levels</li>
<li>Data type: Nominal</li>
<li>Measurement type: Discrete/String</li>
</ul>
</li>
<li><em>dt</em>
<ul>
<li>Interpretation: Only includes data from January 1st to January 7th of 2014. Also, the analysis won‚Äôt consider this as a lapse per player since the records per player are not continuous, so they will be limited as a timestamp</li>
<li>Data type: Ordinal</li>
<li>Measurement type: Temporal</li>
</ul>
</li>
<li><em>level</em>
<ul>
<li>Interpretation: They&rsquo;re registered as numbers, but for further analysis will be transformed as factors. 50% of the records are equal to or less than level 9</li>
<li>Data type: Ordinal</li>
<li>Measurement type: Discrete/String</li>
</ul>
</li>
<li><em>num_attempts</em>
<ul>
<li>Interpretation: The registries are consistent, the interquartile range mention that half of the players try between 1 and 7 time to complete each level. Furthermore, there are players with 0 attempts, so we need to evaluate if this is present at level 1, which can explain a problem in retention rate for that episode</li>
<li>Data type: Numerical</li>
<li>Measurement type: Integer</li>
</ul>
</li>
<li><em>num_success</em>
<ul>
<li>Interpretation: Most of the players are casual gamers because 75% of them complete the level and don‚Äôt repeat it</li>
<li>Data type: Numerical</li>
<li>Measurement type: Integer</li>
</ul>
</li>
</ul>
<h3 id="levels-played-in-episode">Levels played in Episode</h3>
<p>First, let‚Äôs examine the number of registries per player.</p>
<p>This will tell us, from the episode how many levels have each player recorded in the lapse of 7 days.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotly.subplots</span> <span class="kn">import</span> <span class="n">make_subplots</span>

<span class="c1"># Group data of amount of levels recorded by player id</span>
<span class="n">countdf</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;player_id&#39;</span><span class="p">)[</span><span class="s1">&#39;level&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">nunique</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>

<span class="c1"># Count the number amount of players according to amount of levels recorded by player</span>
<span class="n">countdf</span> <span class="o">=</span> <span class="n">countdf</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;level&#39;</span><span class="p">)[</span><span class="s1">&#39;player_id&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">nunique</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>

<span class="c1"># Arrange data according to amount of levels</span>
<span class="n">countdf</span><span class="o">.</span><span class="n">level</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;s&#39;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">countdf</span><span class="o">.</span><span class="n">level</span><span class="p">]</span>
<span class="n">countdf</span> <span class="o">=</span> <span class="n">countdf</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s1">&#39;player_id&#39;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span> <span class="kc">False</span><span class="p">)</span>

<span class="c1"># Generate CumSum</span>
<span class="n">cumulative_per</span> <span class="o">=</span>  <span class="n">countdf</span><span class="o">.</span><span class="n">player_id</span> <span class="o">/</span> <span class="n">countdf</span><span class="o">.</span><span class="n">player_id</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span>
<span class="n">cumulative_per</span> <span class="o">=</span> <span class="n">cumulative_per</span><span class="o">.</span><span class="n">cumsum</span><span class="p">()</span>

<span class="c1"># Format new DF</span>
<span class="n">countdf</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">countdf</span><span class="p">,</span> <span class="n">cumulative_per</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">countdf</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;levels&#34;</span><span class="p">,</span><span class="s2">&#34;players&#34;</span><span class="p">,</span><span class="s2">&#34;Cum_per&#34;</span><span class="p">]</span>

<span class="c1"># Pareto Chart</span>
<span class="n">linec</span> <span class="o">=</span> <span class="n">make_subplots</span><span class="p">(</span><span class="n">specs</span><span class="o">=</span><span class="p">[[{</span><span class="s2">&#34;secondary_y&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">}]])</span>

<span class="c1"># Bar plot graphic object</span>
<span class="n">linec</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Bar</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">countdf</span><span class="o">.</span><span class="n">levels</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">countdf</span><span class="o">.</span><span class="n">players</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Players&#34;</span><span class="p">,</span> <span class="n">marker_color</span><span class="o">=</span> <span class="s2">&#34;#007FFF&#34;</span><span class="p">),</span>
                        <span class="n">secondary_y</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>

<span class="c1"># Scatter plot graphic object</span>
<span class="n">linec</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">countdf</span><span class="o">.</span><span class="n">levels</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">countdf</span><span class="o">.</span><span class="n">Cum_per</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;lines+markers&#39;</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Percentage&#34;</span><span class="p">,</span> <span class="n">marker_color</span><span class="o">=</span> <span class="s2">&#34;#FF5A5F&#34;</span><span class="p">),</span>
                        <span class="n">secondary_y</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>

<span class="c1"># Layout</span>
<span class="n">linec</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span><span class="s1">&#39;Pareto Chart of Number of Levels recorded by player&#39;</span><span class="p">},</span>
                    <span class="n">xaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span><span class="p">:</span><span class="s2">&#34;Number of Levels recorded&#34;</span><span class="p">},</span>
                    <span class="n">yaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span><span class="p">:</span><span class="s2">&#34;Unique players&#34;</span><span class="p">})</span>
<span class="n">linec</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">linec</span><span class="o">.</span><span class="n">update_yaxes</span><span class="p">(</span><span class="n">tickformat</span> <span class="o">=</span> <span class="s2">&#34;0%&#34;</span><span class="p">,</span> <span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Cumulative Percentage&#34;</span><span class="p">,</span> <span class="n">secondary_y</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
<span class="n">linec</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">showlegend</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">linec</span><span class="o">.</span><span class="n">add_hline</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mf">0.8</span><span class="p">,</span> <span class="n">line_dash</span> <span class="o">=</span> <span class="s2">&#34;dash&#34;</span><span class="p">,</span> <span class="n">line_color</span><span class="o">=</span><span class="s2">&#34;red&#34;</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">secondary_y</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
<span class="n">linec</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">linec</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>From the last Pareto chart, we can deduce that 80% of the 6814 players just count with 3 levels recorded of 15. But, since this was extracted from a random sample, this won‚Äôt affect our study.</p>
<h3 id="difficulty-of-completing-a-level-in-a-single-try">Difficulty of completing a level in a single try</h3>
<p>There is a combination of easier and challenging levels. Chance and skills make the number of attempts required to pass a level different from one player to another. The presumption is that difficult levels demand more tries on average than easier ones. That is, the harder a level is the lower the likelihood to pass that level in a single try.</p>
<p>In these circumstances, the¬†<a href="https://en.wikipedia.org/wiki/Bernoulli_process" target="_blank" rel="noopener noreffer">Bernoulli process</a> might be useful. As a <em>Boolean</em> result, there are only two possibilities, win or lose. This can be measured by a single parameter:</p>
<p>$p_{win} = \frac{\Sigma wins }{\Sigma attempts }$:  the probability of completing the level in a single attempt</p>
<p>Let&rsquo;s calculate the difficulty $p_{win}$ individually for each of the 15 levels.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">difficulty</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;level&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">attempts</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;num_attempts&#39;</span><span class="p">,</span> <span class="s1">&#39;sum&#39;</span><span class="p">),</span>
                                    <span class="n">wins</span> <span class="o">=</span><span class="p">(</span><span class="s1">&#39;num_success&#39;</span><span class="p">,</span> <span class="s1">&#39;sum&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">difficulty</span><span class="p">[</span><span class="s1">&#39;p_win&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">difficulty</span><span class="o">.</span><span class="n">wins</span> <span class="o">/</span> <span class="n">difficulty</span><span class="o">.</span><span class="n">attempts</span>
<span class="n">difficulty</span>
</code></pre></td></tr></table>
</div>
</div><p align="left"></p>
<p>We have levels where 50% of players finished on the first attempt and others that are the opposite. But let‚Äôs visualize it through the episode, to make it clear.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Lineplot of Success Probability per Level</span>
<span class="n">line1</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">difficulty</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s1">&#39;level&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">&#34;p_win&#34;</span><span class="p">,</span>
                <span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Probability of Level Success at first attempt&#34;</span><span class="p">,</span>
                <span class="n">labels</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;p_win&#34;</span><span class="p">:</span><span class="s2">&#34;Probability&#34;</span><span class="p">,</span> <span class="s2">&#34;level&#34;</span><span class="p">:</span><span class="s2">&#34;Episode Level&#34;</span><span class="p">})</span>
<span class="n">line1</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">line1</span><span class="o">.</span><span class="n">update_xaxes</span><span class="p">(</span><span class="nb">range</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">15</span><span class="p">],</span> <span class="n">tick0</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">dtick</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">line1</span><span class="o">.</span><span class="n">update_yaxes</span><span class="p">(</span><span class="nb">range</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.7</span><span class="p">],</span> <span class="n">tick0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">dtick</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">)</span>
<span class="n">line1</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">yaxis_tickformat</span> <span class="o">=</span> <span class="s2">&#34;0%&#34;</span><span class="p">)</span>
<span class="n">line1</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">line1</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<h3 id="defining-hard-levels">Defining hard levels</h3>
<p>It‚Äôs subjective what we can consider a hard level because not consistently depends on a single factor and for all player profile groups this can be different. So, for the outcomes of this study, we will arbitrarily assume that a difficult level is the one that has a probability to be completed in the first attempt of a 10% ($p_{win} &lt; 10%$).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Lineplot of Success Probability per Level</span>
<span class="n">line2</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Figure</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Scatter</span><span class="p">(</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">difficulty</span><span class="o">.</span><span class="n">level</span><span class="p">,</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">difficulty</span><span class="o">.</span><span class="n">p_win</span><span class="p">))</span>
<span class="n">line2</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="p">:</span><span class="s1">&#39;Probability of Level Success at first attempt with Hard Levels&#39;</span><span class="p">},</span>
                    <span class="n">xaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span><span class="p">:</span><span class="s2">&#34;Episode Level&#34;</span><span class="p">},</span>
                    <span class="n">yaxis</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span><span class="p">:</span><span class="s2">&#34;Probability&#34;</span><span class="p">})</span>
<span class="n">line2</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">line2</span><span class="o">.</span><span class="n">update_xaxes</span><span class="p">(</span><span class="nb">range</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">15</span><span class="p">],</span> <span class="n">tick0</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">dtick</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">line2</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">yaxis_tickformat</span> <span class="o">=</span> <span class="s2">&#34;0%&#34;</span><span class="p">)</span>
<span class="n">line2</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">showlegend</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">line2</span><span class="o">.</span><span class="n">add_hrect</span><span class="p">(</span><span class="n">y0</span><span class="o">=</span><span class="mf">0.02</span><span class="p">,</span> <span class="n">y1</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">line_width</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">fillcolor</span><span class="o">=</span><span class="s2">&#34;red&#34;</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.2</span><span class="p">)</span>
<span class="n">line2</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">line2</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>From our predefined threshold, we see that the level digit is not aligned with its difficulty. While we have hard levels as 5, 8, 9, and 15; others like 13 and 15 are unleveraged and need to be rebalanced by the level designers.</p>
<h3 id="measuring-the-uncertainty-of-success">Measuring the uncertainty of success</h3>
<p>We should always report some calculation of the uncertainty of any provided numbers. Simply, because another sample will give us little different values for the difficulties measured by level.</p>
<p>Here we will simply use the¬†<a href="https://en.wikipedia.org/wiki/Standard_error" target="_blank" rel="noopener noreffer">Standard error</a>¬†as a measure of uncertainty:</p>
<p>$\sigma_{error} \approx \frac{\sigma_{sample}}{\sqrt{n}}$</p>
<p>Here n is the number of datapoints and $\sigma_{sample}$ is the sample standard deviation. For a Bernoulli process, the sample standard deviation is:</p>
<p>$\sigma_{sample} = \sqrt{p_{win}(1-p_{win})}$</p>
<p>Therefore, we can calculate the standard error like this:</p>
<p>$\sigma_{error} \approx \sqrt{\frac{p_{win}(1-p_{win})}{n} }$</p>
<p>Consider that every level has been played <em>n</em> number of times and we have their difficulty $p_{win}$. Now, let&rsquo;s calculate the standard error for each level of this episode.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Computing the standard error of p_win for each level</span>
<span class="n">difficulty</span><span class="p">[</span><span class="s1">&#39;error&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">difficulty</span><span class="o">.</span><span class="n">p_win</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">difficulty</span><span class="o">.</span><span class="n">p_win</span><span class="p">)</span> <span class="o">/</span> <span class="n">difficulty</span><span class="o">.</span><span class="n">attempts</span><span class="p">)</span>
<span class="n">difficulty</span>
</code></pre></td></tr></table>
</div>
</div><p align="left"></p>
<p>We have a measure of uncertainty for each levels' difficulty. As always, this would be more appealing if we plot it.</p>
<p>Let&rsquo;s use¬†<em>error bars</em>¬†to show this uncertainty in the plot. We will set the height of the error bars to one standard error. The upper limit and the lower limit of each error bar should be defined by:</p>
<p>$p_{win}  \pm \sigma_{error}$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Lineplot of Success Probability per Level</span>
<span class="n">line3</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">difficulty</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s1">&#39;level&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">&#34;p_win&#34;</span><span class="p">,</span>
                <span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Probability of Level Success at first attempt with Error Bars&#34;</span><span class="p">,</span>
                <span class="n">labels</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;p_win&#34;</span><span class="p">:</span><span class="s2">&#34;Probability&#34;</span><span class="p">,</span> <span class="s2">&#34;level&#34;</span><span class="p">:</span><span class="s2">&#34;Episode Level&#34;</span><span class="p">},</span>
                <span class="n">error_y</span><span class="o">=</span><span class="s2">&#34;error&#34;</span><span class="p">)</span>
<span class="n">line3</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">line3</span><span class="o">.</span><span class="n">update_xaxes</span><span class="p">(</span><span class="nb">range</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">16</span><span class="p">],</span> <span class="n">tick0</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">dtick</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">line3</span><span class="o">.</span><span class="n">update_yaxes</span><span class="p">(</span><span class="nb">range</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.65</span><span class="p">],</span> <span class="n">tick0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">dtick</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">)</span>
<span class="n">line3</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">yaxis_tickformat</span> <span class="o">=</span> <span class="s2">&#34;0%&#34;</span><span class="p">)</span>
<span class="n">line3</span><span class="o">.</span><span class="n">add_hrect</span><span class="p">(</span><span class="n">y0</span><span class="o">=</span><span class="mf">0.02</span><span class="p">,</span> <span class="n">y1</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">line_width</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">fillcolor</span><span class="o">=</span><span class="s2">&#34;red&#34;</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.2</span><span class="p">)</span>
<span class="n">line3</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">line3</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>Looks like the difficulty estimates a very exact. Furthermore, for the hardest levels, the measure is even more precise, and that‚Äôs a good point because from this we can make valid conclusions based on that levels.</p>
<p>As a curious fact, also we can measure the probability of completing all the levels of that episode in a single attempt, just for fun.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># The probability of completing the episode without losing a single time</span>
<span class="n">prob</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">difficulty</span><span class="o">.</span><span class="n">p_win</span><span class="p">:</span>
    <span class="n">prob</span> <span class="o">=</span> <span class="n">prob</span><span class="o">*</span><span class="n">i</span>

<span class="c1"># Printing it out</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Probability of Success in one single attempt </span><span class="se">\n</span><span class="s2">for whole episode: &#34;</span><span class="p">,</span> <span class="n">prob</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="s2">&#34;%&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Probability of Success in one single attempt 
for whole episode:  9.889123140886191e-10 %
</code></pre></td></tr></table>
</div>
</div><h2 id="-final-thoughts--takeaways">üóíÔ∏è Final thoughts &amp; takeaways</h2>
<p><strong>What can the stakeholders understand and take into consideration?</strong></p>
<p>From the sample extracted we conclude that just 33% of the levels are considered of high difficulty, which it‚Äôs acceptable since each episode counts with 15 levels, so by now the level designer should not worry about leveling the difficulty.</p>
<p><strong>What could the stakeholders do to take action ?</strong></p>
<p>As a suggestion, in the case that the Publisher decides to invest more in in-game mechanics, a solution for a long-time and reactive engagement could be the use of Machine Learning to generate a <a href="https://en.wikipedia.org/wiki/Dynamic_game_difficulty_balancing" target="_blank" rel="noopener noreffer">DGDB</a> as some competitors have adapted in IPs like EA Sports FIFA, Madden NFL or the ‚ÄúAI Director‚Äù of Left 4 Dead.</p>
<p><strong>What can stakeholders keep working on?</strong></p>
<p>The way their level difficulty design work today is precise since our first hypothesis was that the game wasn‚Äôt too linear to unengaged the player and churn as consequence. Because as we saw, the game has drastic variations in the levels 5-6 and 8-10, which can help to avoid frustrations in players.</p>
<hr>
<h2 id="‚Ñπ-additional-information">‚ÑπÔ∏è Additional Information</h2>
<ul>
<li><strong>About the article</strong></li>
</ul>
<p>Based on the dataset provided, we will not proceed with a retention analysis as mentioned above. Because the data is from a random episode, if this were episode one, this type of analysis could be useful as it can explain the pool of players who log in, created an account, or install the game but never start playing, causing traction problems. Therefore, this will be left as a limitation to the scope of the analysis.</p>
<p>With acknowledgment to Rasmus Baraath for guiding this project. Which was developed for sharing knowledge while using cited sources of the material used.</p>
<p>Thanks to you for reading as well.</p>
<ul>
<li><strong>Related Content</strong></li>
</ul>
<p>‚Äî Rasmus Baath personal¬†<a href="https://www.sumsar.net/" target="_blank" rel="noopener noreffer">blog</a></p>
<p>‚Äî Anders Drachen personal¬†<a href="https://andersdrachen.com/" target="_blank" rel="noopener noreffer">website</a></p>
<ul>
<li><strong>Datasets</strong></li>
</ul>
<p>This project was developed with a dataset provided by Rasmus Baraath, which also can be downloaded at my <a href="https://github.com/robguilarr/candy_crush_difficulty/tree/master/datasets">Github</a> repository.</p>
]]></description>
</item>
<item>
    <title>A/B Testing with Cookie Cats Game</title>
    <link>https://robguilar.com/posts/ab_testing_cookiecats/</link>
    <pubDate>Wed, 02 Mar 2022 21:57:40 &#43;0800</pubDate><guid>https://robguilar.com/posts/ab_testing_cookiecats/</guid>
    <description><![CDATA[<p>A lot of things come to mind when we hear the name¬†<a href="https://tactilegames.com/cookie-cats/" target="_blank" rel="noopener noreffer">Cookie Cats</a>, and probably is not what we think since is hard to associate both words, it‚Äôs about meow-sicians (Belle, Ziggy, Smokey, Rita, Berry).</p>
<p>Anyway, Cookie Cats is a mobile puzzle game of¬†<em>‚Äúconnect-three‚Äù</em>-style developed by¬†<a href="https://tactilegames.com/" target="_blank" rel="noopener noreffer">Tactile Entertainment</a>, a mobile games developer from Copenhagen. To be in context, this game‚Äôs main objective is to align 3 cookies of the same kind to feed a cat, and in this way finish each level. Also as collectible credit, you can earn Keys to unlock gates located at certain levels.</p>
<p>In this project, in order to embrace the actual problem that the stakeholders are facing, we are going to make use of¬†<strong>Tactical Analytics</strong>, which is a branch of user-oriented game analytics, with the purpose to¬†<em>‚Äúaim to inform game design at the short-term, for example, an A/B test of a new game feature‚Äù</em>¬†(A. Dranchen, 2013).</p>
<p>Knowing this we can notice that the applicability of statistics in new fields can be considered one of the greatest advances for the game industry. Nowadays, human-machine interactions are being monitored, in a good way in most cases. The main purpose is not just to increase the company&rsquo;s revenue, one of the main objectives is to give a benefit in terms of User Experience (UX) and Engagement, and this can be covered using Data Science.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Looking for an interactive experience?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">üöÄ Download the Jupyter Notebook, available <a href="https://nbviewer.org/github/robguilarr/ab_testing_cookie_cats/blob/main/notebook.ipynb">here</a></div>
        </div>
    </div>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/GaP5f0jVTWE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="-introduction-to-problem">‚ö†Ô∏è Introduction to problem</h2>
<h3 id="hypothesis">Hypothesis</h3>
<p>According to Rasmus Baath, Data Science Lead at¬†<a href="https://castle.io/" target="_blank" rel="noopener noreffer">castle.io</a>, Tactile Entertainment is planning to move Cookie Cats' time gates from level 30 to 40, but they don‚Äôt know by how much the user retention can be impacted by this decision.</p>
<p>This sort of ‚Äútime gate‚Äù is usually seen in¬†<a href="https://en.wikipedia.org/wiki/Free-to-play" target="_blank" rel="noopener noreffer">free-to-play</a>¬†models, and normally contains ads that can be skipped using credits. In this case the player requires to submit a specific number of ‚ÄòKeys‚Äô, which also can be skipped in exchange of¬†<a href="https://pegi.info/page/game-purchases" target="_blank" rel="noopener noreffer">in-game purchases</a>.</p>
<p>So seeing this viewpoint, a decision like this can impact not only user retention, the expected revenue as well that‚Äôs why we are going to set the initial hypothesis as:</p>
<ol>
<li>Moving the Time Gate from Level 30 to Level 40 will decrease our user retention.</li>
<li>Moving the Time Gate from Level 30 to Level 40 will increase our user retention.</li>
</ol>
<p align="middle"></p>
<h3 id="potential-stakeholders">Potential Stakeholders</h3>
<ul>
<li>Mobile Designer &amp; User Retention Expert: They must be aligned with the final statement of the analyst, and make a final judgment to improve user retention.</li>
<li>Level Designer: As the scene of levels is under study, the level designers need to take action on time to guarantee the storyline of the levels has a correct sequence, and to add it in a new patch.</li>
<li>System Designer &amp; System Engineer: If we extend the time gate, the credits should or should not remain at the same quantity required, which also needs to be implemented in the tracking system of the user progress.</li>
<li>Executive Game Producer: As we mentioned before, a potential change requires a redesign of the earnings strategy and an alignment in the business expectation like funding, agreements, marketing, and patching deadlines.</li>
<li>Players community: This stakeholder can be affected by the <strong>theory of hedonic adaptation</strong>, which is according to Rasmus Baath is <em>‚Äúthe tendency for people to get less and less enjoyment out of a fun activity over time if that activity is undertaken continuously‚Äù</em>, meaning that if we prolong the time gate, this can affect the engagement in an unfavorable way, which in this case require an evaluation.</li>
</ul>
<p><strong>Note:</strong> To facilitate the understanding of the roles of the development team, I invite you to take a look at <strong><a href="https://www.robguilar.com/posts/gamedev_structure/" target="_blank" rel="noopener noreffer">this</a></strong> diagram that I designed.</p>
<h2 id="-about-the-data">üì• About the data</h2>
<h3 id="collection-process-and-structure">Collection process and structure</h3>
<p>Most of the time game developers work aside of¬†<strong>telemetry systems</strong>, which according to Anders Drachen et al. (one of the¬†<strong>pioneers</strong>¬†in the Game Analytics field), from an interview made with Georg Zoeller of Ubisoft Singapore, the Game Industry manages two kinds of telemetry systems:</p>
<ul>
<li><strong>Developer-facing:</strong>¬†<em>‚ÄúThe main goal of the system is to facilitate and improve the production process, gathering and presenting information about how developers and testers interact with the unfinished game‚Äù</em>. Like the one mentioned in Chapter 7 of the¬†<a href="https://link.springer.com/book/10.1007/978-1-4471-4769-5" target="_blank" rel="noopener noreffer">‚ÄúGame Analytics Maximizing the Value of Player Data‚Äù</a>¬†book, like the one implemented in Bioware‚Äôs production process of¬†<a href="https://en.wikipedia.org/wiki/Dragon_Age:_Origins" target="_blank" rel="noopener noreffer">Dragon Age: Origins</a>¬†in 2009.</li>
<li><strong>User-facing:</strong>¬†This one is¬†<em>‚Äúcollected after a game is launched and mainly aimed at tracking, analyzing, and visualizing player behavior‚Äù</em>¬†mentioned in Chapters 4, 5, and 6 of the same book.</li>
</ul>
<p>With the help of this kind of data-fetching system, we can create a responsive gate between the Data Analysts and the Designers. In most cases, these systems collect the data in form of logs (.txt) or dictionaries (.json), but fortunately in this case we will count with a structured CSV file.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Importing pandas</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1"># Reading in the data</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;datasets/cookie_cats.csv&#39;</span><span class="p">)</span>

<span class="c1"># Showing the first few rows</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="left"></p>
<p>This dataset contains around¬†<strong>90,189</strong>¬†records of players that started the game while the telemetry system was running, according to Rasmus Baath. Among the variables collected are the next:</p>
<ul>
<li><em>userid</em>¬†: unique identification of the user.</li>
<li><em>version</em>¬†: the group in which the players were measured, for a time gate at level 30 it contains a string called¬†<em>gate_30</em>, or for a time gate at level 40 it contains a string called¬†<em>gate_40</em>.</li>
<li><em>sum_gamerounds</em>¬†: number of game rounds played within the first 14 days since the first session played.</li>
<li><em>retention_1</em>¬†: Boolean that defines if the player came back 1 day after the installation.</li>
<li><em>retention_7</em>¬†: Boolean that defines if the player came back 7 days after the installation.</li>
</ul>
<p><strong>Note:</strong>¬†An important fact to keep in mind is that in the game industry one crucial metric is¬†<em>retention_1</em>, since it defines if the game generate a first engagement with the first log-in of the player.</p>
<h2 id="-data-preprocessing">üîß Data Preprocessing</h2>
<p>Before starting the analysis we need to do some validations on the dataset.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Count and display the number of unique players</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Number of players: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">userid</span><span class="o">.</span><span class="n">nunique</span><span class="p">(),</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="s2">&#34;Number of records: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">userid</span><span class="p">),</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Number of players: 
 90188 
 Number of records: 
 90188
</code></pre></td></tr></table>
</div>
</div><p>It‚Äôs not common to find this kind of data, cause as we saw the data is almost ideally sampled, where we count just with distinct records.</p>
<h3 id="data-cleaning">Data Cleaning</h3>
<p>The data doesn‚Äôt require any kind of transformation and the data types are aligned with their purpose.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">dtypes</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">userid             int64
version           object
sum_gamerounds     int64
retention_1         bool
retention_7         bool
dtype: object
</code></pre></td></tr></table>
</div>
</div><h3 id="data-consistency">Data Consistency</h3>
<p>The usability of the data it‚Äôs rather good, since we don‚Äôt count with ‚ÄúNAN‚Äù (Not A Number), ‚ÄúNA‚Äù (Not Available), or ‚ÄúNULL‚Äù (an empty set) values.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Function the plot the percentage of missing values</span>
<span class="k">def</span> <span class="nf">na_counter</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;NaN Values per column:&#34;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
        <span class="n">percentage</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">-</span> <span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="n">df</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">isna</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">())</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>

        <span class="c1"># Only return columns with more than 5% of NA values</span>
        <span class="k">if</span> <span class="n">percentage</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="s2">&#34; has &#34;</span><span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="n">percentage</span><span class="p">))</span> <span class="o">+</span><span class="s2">&#34;</span><span class="si">% o</span><span class="s2">f Null Values&#34;</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">continue</span>

<span class="c1"># Execute function</span>
<span class="n">na_counter</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">NaN Values per column:
	None
</code></pre></td></tr></table>
</div>
</div><p>By this way, we can conclude that there were not errors in our telemetry logs during the data collection.</p>
<h3 id="normalization">Normalization</h3>
<p>Noticing the distribution of the quartiles and comprehending the purpose of our analysis, where we only require <em>sum_gamerounds</em> as numeric, we can validate that the data is comparable and doesn‚Äôt need transformations.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="left"></p>
<h2 id="-exploratory-analysis--in-game-interpretations">üîç Exploratory Analysis &amp; In-game interpretations</h2>
<h3 id="summary-statistics">Summary statistics</h3>
<p>We got the next conclusions about their distribution and measurement:</p>
<ul>
<li><em>userid</em>
<ul>
<li>Interpretation: Player identifier with distinct records in the whole dataset which can be transformed as a factor</li>
<li>Data type: Nominal</li>
<li>Measurement type: Discrete/String</li>
</ul>
</li>
<li><em>version</em>
<ul>
<li>Interpretation: Just two possible values to evaluate, time gate at level 30 or level 40</li>
<li>Data type: Ordinal</li>
<li>Measurement type: Discrete/String</li>
</ul>
</li>
<li><em>sum_gamerounds</em>
<ul>
<li>Interpretation: Number of game rounds played by the user, where 50% of the users played between 5 and 51 sessions</li>
<li>Data type: Numerical</li>
<li>Measurement type: Integer</li>
</ul>
</li>
<li><em>retention_1</em>
<ul>
<li>Interpretation: Boolean measure to verify that the player retention was effective for 1 day at least</li>
<li>Data type: Nominal</li>
<li>Measurement type: Discrete/String</li>
</ul>
</li>
<li><em>retention_7</em>
<ul>
<li>Interpretation: Boolean measure to verify that the player retention was effective for 7 days at least</li>
<li>Data type: Nominal</li>
<li>Measurement type: Discrete/String</li>
</ul>
</li>
</ul>
<h3 id="strategy-of-analysis">Strategy of Analysis</h3>
<p>The most accurate way to test changes is to perform¬†<a href="https://www.analyticsvidhya.com/blog/2020/10/ab-testing-data-science/" target="_blank" rel="noopener noreffer">A/B testing</a>¬†by targeting a specific variable, in the case¬†<em>retention</em>¬†(for 1 and 7 days after installation).</p>
<p>As we mentioned before, we have two groups in the¬†<em>version</em>¬†variable:</p>
<ul>
<li><strong>Control group:</strong>¬†The time gate is located at level 30. We are going to consider this one as a no-treatment group.</li>
<li><strong>Treatment group:</strong>¬†The company plans to move the time gate to level 40. We are going to use this as a subject of study, due to the change involved.</li>
</ul>
<p>In an advanced stage, we are going to perform a¬†<a href="https://www.analyticsvidhya.com/blog/2021/06/bootstrap-the-source-of-its-power/" target="_blank" rel="noopener noreffer">bootstrapping</a>¬†technique, to be confident about the result comparison for the retention probabilities between groups.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Counting the number of players in each AB group.</span>
<span class="n">players_g30</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;version&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;gate_30&#39;</span><span class="p">]</span>
<span class="n">players_g40</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;version&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;gate_40&#39;</span><span class="p">]</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Number of players tested at Gate 30:&#39;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">players_g30</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span>
     <span class="s1">&#39;Number of players tested at Gate 40:&#39;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">players_g40</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Number of players tested at Gate 30: 44700 
 Number of players tested at Gate 40: 45489
</code></pre></td></tr></table>
</div>
</div><h3 id="game-rounds-distribution">Game rounds distribution</h3>
<p>As we see the proportion of players sampled for each group is balanced, so for now, only exploring the Game Rounds data is in the queue.</p>
<p>Let‚Äôs see the distribution of Game Rounds (The plotly¬†layout¬†created is available in <strong>vizformatter</strong> library).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>

<span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="nn">px</span>

<span class="c1"># Own layout design library</span>
<span class="kn">from</span> <span class="nn">vizformatter.standards</span> <span class="kn">import</span> <span class="n">layout_plotly</span>

<span class="c1"># Load layout base objects</span>
<span class="n">sign</span><span class="p">,</span> <span class="n">layout</span> <span class="o">=</span> <span class="n">layout_plotly</span><span class="p">(</span><span class="n">height</span><span class="o">=</span> <span class="mi">720</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span> <span class="mi">15</span><span class="p">)</span>

<span class="c1"># Distribution Boxplot with outliers</span>
<span class="n">box1</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">box</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s2">&#34;sum_gamerounds&#34;</span><span class="p">,</span>
            <span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Game Rounds Overall Distribution by player&#34;</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;sum_gamerounds&#34;</span><span class="p">:</span><span class="s2">&#34;Game Rounds registered&#34;</span><span class="p">})</span>

<span class="n">box1</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">box1</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">box1</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>For now, we see that exist clear outliers in the dataset since one user has recorded¬†<strong>49,854</strong>¬†Game rounds played in less than 14 days, meanwhile, the max recorded, excluding the outlier, is around¬†<strong>2,900</strong>. The only response to this case situation is a ‚Äúbot‚Äù, a ‚Äúbug‚Äù or a ‚Äúglitch‚Äù.</p>
<p>Nevertheless, it‚Äôs preferable to clean it, since only affected one record. Let‚Äôs prune it.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;sum_gamerounds&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">49854</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>We can make an¬†<em>Empirical Cumulative Distribution Function</em>, to see the real distribution of our data.</p>
<p><strong>Note:</strong>¬†In this case, we won‚Äôt use histograms to avoid a binning bias.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">plotly.graph_objects</span> <span class="k">as</span> <span class="nn">go</span>

<span class="c1"># Import numpy library</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="c1"># ECDF Generator function</span>
<span class="k">def</span> <span class="nf">ecdf</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="c1"># Generate ECDF (Empirical Cumulative Distribution Function)</span>
    <span class="c1"># for on dimension arrays</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="c1"># X axis data</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

     <span class="c1"># Y axis data</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">n</span>

    <span class="k">return</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>

<span class="c1"># Generate ECDF data</span>
<span class="n">x_rounds</span><span class="p">,</span> <span class="n">y_rounds</span> <span class="o">=</span> <span class="n">ecdf</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;sum_gamerounds&#39;</span><span class="p">])</span>

<span class="c1"># Generate percentile makers </span>
<span class="n">percentiles</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">75</span><span class="p">,</span><span class="mi">95</span><span class="p">])</span>
<span class="n">ptiles</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">percentile</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;sum_gamerounds&#39;</span><span class="p">],</span> <span class="n">percentiles</span><span class="p">)</span>

<span class="c1"># ECDF plot</span>
<span class="n">ecdf</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Figure</span><span class="p">()</span>

<span class="c1"># Add traces</span>
<span class="n">ecdf</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">x_rounds</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">y_rounds</span><span class="p">,</span>
                    <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;markers&#39;</span><span class="p">,</span>
                    <span class="n">name</span><span class="o">=</span><span class="s1">&#39;Game Rounds&#39;</span><span class="p">))</span>
<span class="n">ecdf</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">ptiles</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">percentiles</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span>
                    <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;markers+text&#39;</span><span class="p">,</span>
                    <span class="n">name</span><span class="o">=</span><span class="s1">&#39;Percentiles&#39;</span><span class="p">,</span> <span class="n">marker_line_width</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">marker_size</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
                    <span class="n">text</span><span class="o">=</span><span class="n">percentiles</span><span class="p">,</span> <span class="n">textposition</span><span class="o">=</span><span class="s2">&#34;bottom right&#34;</span><span class="p">))</span>
<span class="n">ecdf</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">ecdf</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;Game Rounds Cumulative Distribution Plot&#39;</span><span class="p">,</span> <span class="n">yaxis_title</span><span class="o">=</span><span class="s2">&#34;Cumulative Probability&#34;</span><span class="p">)</span>
<span class="n">ecdf</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">ecdf</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>As we see 95% of our data is below 500 Game Rounds.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;The 95 percentile of the data is at: &#34;</span><span class="p">,</span> <span class="n">ptiles</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="s2">&#34;Game Rounds&#34;</span><span class="p">,</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span>
<span class="s2">&#34;This means &#34;</span><span class="p">,</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;sum_gamerounds&#34;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">ptiles</span><span class="p">[</span><span class="mi">4</span><span class="p">]]</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s2">&#34; players&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">The 95 percentile of the data is at:  221.0 Game Rounds 
 This means  85706  players
</code></pre></td></tr></table>
</div>
</div><p>For us, this can be considered a valuable sample.</p>
<p>In the plot above, we saw some players that installed the game but, then never return (0 game rounds).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Players inactive since installation: &#34;</span><span class="p">,</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;sum_gamerounds&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Players inactive since installation:  3994
</code></pre></td></tr></table>
</div>
</div><p>And in most cases, players just play a couple of game rounds in their first two weeks. But, we are looking for players that like the game and to get hooked, that‚Äôs one of our interests.</p>
<p>A common metric in the video gaming industry for how fun and engaging a game is 1-day retention as we mentioned before.</p>
<h2 id="-player-retention-analysis">üìä Player retention analysis</h2>
<p>Retention is the percentage of players that come back and plays the game one day after they have installed it. The higher 1-day retention is, the easier it is to retain players and build a large player base.</p>
<p>According to Anders Drachen et al. (2013), these customer kind metrics¬†<em>‚Äúare notably interesting to professionals working with marketing and management of games and game development‚Äù</em>, also this metric is described simply as¬†<em>‚Äúhow sticky the game is‚Äù</em>, in other words, it‚Äôs essential.</p>
<p>As a first step, let‚Äôs look at what 1-day retention is overall.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># The % of users that came back the day after they installed</span>
<span class="n">prop</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;retention_1&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="kc">True</span><span class="p">])</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;retention_1&#39;</span><span class="p">])</span> <span class="o">*</span> <span class="mi">100</span>

<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;The overall retention for 1 day is: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="n">prop</span><span class="p">,</span><span class="mi">2</span><span class="p">)),</span><span class="s2">&#34;%&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">The overall retention for 1 day is:  44.52 %
</code></pre></td></tr></table>
</div>
</div><p>Less than half of the players come back one day after installing the game.</p>
<p>Now that we have a benchmark, let‚Äôs look at how 1-day retention differs between the two AB groups.</p>
<h3 id="-1-day-retention-by-ab-group">üîÉ 1-day retention by A/B Group</h3>
<p>Computing the retention individually, we have the next results.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Calculating 1-day retention for each AB-group</span>

<span class="c1"># CONTROL GROUP</span>
<span class="n">prop_gate30</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">players_g30</span><span class="p">[</span><span class="n">players_g30</span><span class="p">[</span><span class="s1">&#39;retention_1&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="kc">True</span><span class="p">])</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">players_g30</span><span class="p">[</span><span class="s1">&#39;retention_1&#39;</span><span class="p">])</span> <span class="o">*</span> <span class="mi">100</span>

<span class="c1"># TREATMENT GROUP</span>
<span class="n">prop_gate40</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">players_g40</span><span class="p">[</span><span class="n">players_g40</span><span class="p">[</span><span class="s1">&#39;retention_1&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="kc">True</span><span class="p">])</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">players_g40</span><span class="p">[</span><span class="s1">&#39;retention_1&#39;</span><span class="p">])</span> <span class="o">*</span> <span class="mi">100</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Group 30 at 1 day retention: &#39;</span><span class="p">,</span><span class="nb">str</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="n">prop_gate30</span><span class="p">,</span><span class="mi">2</span><span class="p">)),</span><span class="s2">&#34;%&#34;</span><span class="p">,</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span>
     <span class="s1">&#39;Group 40 at 1 day retention: &#39;</span><span class="p">,</span><span class="nb">str</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="n">prop_gate40</span><span class="p">,</span><span class="mi">2</span><span class="p">)),</span><span class="s2">&#34;%&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Group 30 at 1 day retention:  44.82 % 
 Group 40 at 1 day retention:  44.23 %
</code></pre></td></tr></table>
</div>
</div><p>It appears that there was a slight decrease in 1-day retention when the gate was moved to level 40 (<strong>44.23%</strong>) compared to the control when it was at level 30 (<strong>44.82%</strong>).</p>
<p>It‚Äôs a smallish change, but even small changes in retention can have a huge impact. While we are sure of the difference in the data, how confident should we be that a gate at level 40 will be more threatening in the future?</p>
<p>For this reason, it‚Äôs important to consider bootstrapping techniques, this means¬†<em>‚Äúa sampling with replacement from observed data to estimate the variability in a statistic of interest‚Äù</em>. In this case, retention, and we are going to do a function for that.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Bootstrapping Function</span>
<span class="k">def</span> <span class="nf">draw_bs_reps</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">func</span><span class="p">,</span><span class="n">iterations</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">boot_Xd</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
        <span class="n">boot_Xd</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">))))</span>
    <span class="k">return</span> <span class="n">boot_Xd</span>
<span class="c1"># Retention Function</span>
<span class="k">def</span> <span class="nf">retention</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">data</span> <span class="o">==</span> <span class="kc">True</span><span class="p">])</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">ret</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="control-group-bootstrapping">Control Group Bootstrapping</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Bootstrapping for gate 30</span>
<span class="n">btg30_1d</span> <span class="o">=</span> <span class="n">draw_bs_reps</span><span class="p">(</span><span class="n">players_g30</span><span class="p">[</span><span class="s1">&#39;retention_1&#39;</span><span class="p">],</span> <span class="n">retention</span><span class="p">,</span> <span class="n">iterations</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="treatment-group-bootstrapping">Treatment Group Bootstrapping</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Bootstrapping for gate 40</span>
<span class="n">btg40_1d</span> <span class="o">=</span> <span class="n">draw_bs_reps</span><span class="p">(</span><span class="n">players_g40</span><span class="p">[</span><span class="s1">&#39;retention_1&#39;</span><span class="p">],</span> <span class="n">retention</span><span class="p">,</span> <span class="n">iterations</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>Now, let‚Äôs check the results</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">plotly.figure_factory</span> <span class="k">as</span> <span class="nn">ff</span>

<span class="n">mean_g40</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">btg40_1d</span><span class="p">)</span>
<span class="n">mean_g30</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">btg30_1d</span><span class="p">)</span>

<span class="c1"># A Kernel Density Estimate plot of the bootstrap distributions</span>
<span class="n">boot_1d</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;gate_30&#39;</span><span class="p">:</span><span class="n">btg30_1d</span><span class="p">,</span> <span class="s1">&#39;gate_40&#39;</span><span class="p">:</span><span class="n">btg40_1d</span><span class="p">},</span>
                       <span class="n">index</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">))</span>

<span class="c1"># Plotting histogram</span>
<span class="n">hist_1d</span> <span class="o">=</span> <span class="p">[</span><span class="n">boot_1d</span><span class="o">.</span><span class="n">gate_30</span><span class="p">,</span> <span class="n">boot_1d</span><span class="o">.</span><span class="n">gate_40</span><span class="p">]</span>
<span class="n">dist_1d</span> <span class="o">=</span> <span class="n">ff</span><span class="o">.</span><span class="n">create_distplot</span><span class="p">(</span><span class="n">hist_1d</span><span class="p">,</span> <span class="n">group_labels</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Gate 30 (Control)&#34;</span><span class="p">,</span> <span class="s2">&#34;Gate 40 (Treatment)&#34;</span><span class="p">],</span> <span class="n">show_rug</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;#3498DB&#39;</span><span class="p">,</span><span class="s1">&#39;#28B463&#39;</span><span class="p">])</span>
<span class="n">dist_1d</span><span class="o">.</span><span class="n">add_vline</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">mean_g40</span><span class="p">,</span> <span class="n">line_width</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">line_dash</span><span class="o">=</span><span class="s2">&#34;dash&#34;</span><span class="p">,</span> <span class="n">line_color</span><span class="o">=</span><span class="s2">&#34;#28B463&#34;</span><span class="p">)</span>
<span class="n">dist_1d</span><span class="o">.</span><span class="n">add_vline</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">mean_g30</span><span class="p">,</span> <span class="n">line_width</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">line_dash</span><span class="o">=</span><span class="s2">&#34;dash&#34;</span><span class="p">,</span> <span class="n">line_color</span><span class="o">=</span><span class="s2">&#34;#3498DB&#34;</span><span class="p">)</span>
<span class="n">dist_1d</span><span class="o">.</span><span class="n">add_vrect</span><span class="p">(</span><span class="n">x0</span><span class="o">=</span><span class="n">mean_g30</span><span class="p">,</span> <span class="n">x1</span><span class="o">=</span><span class="n">mean_g40</span><span class="p">,</span> <span class="n">line_width</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">fillcolor</span><span class="o">=</span><span class="s2">&#34;#F1C40F&#34;</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.2</span><span class="p">)</span>

<span class="n">dist_1d</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">dist_1d</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">xaxis_range</span><span class="o">=</span><span class="p">[</span><span class="mf">0.43</span><span class="p">,</span><span class="mf">0.46</span><span class="p">])</span>
<span class="n">dist_1d</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;1-Day Retention Bootstrapping by A/B Group&#39;</span><span class="p">,</span> <span class="n">xaxis_title</span><span class="o">=</span><span class="s2">&#34;Retention&#34;</span><span class="p">)</span>
<span class="n">dist_1d</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">dist_1d</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>The difference still looking close, for this reason, is preferable to zoom it by plotting the difference as an individual measure.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Adding a column with the % difference between the two AB-groups</span>
<span class="n">boot_1d</span><span class="p">[</span><span class="s1">&#39;diff&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span>
                    <span class="p">((</span><span class="n">boot_1d</span><span class="p">[</span><span class="s1">&#39;gate_30&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">boot_1d</span><span class="p">[</span><span class="s1">&#39;gate_40&#39;</span><span class="p">])</span> <span class="o">/</span> <span class="n">boot_1d</span><span class="p">[</span><span class="s1">&#39;gate_40&#39;</span><span class="p">])</span> <span class="o">*</span> <span class="mi">100</span>
                <span class="p">)</span>

<span class="c1"># Ploting the bootstrap % difference</span>
<span class="n">hist_1d_diff</span> <span class="o">=</span> <span class="p">[</span><span class="n">boot_1d</span><span class="p">[</span><span class="s1">&#39;diff&#39;</span><span class="p">]]</span>
<span class="n">dist_1d_diff</span> <span class="o">=</span> <span class="n">ff</span><span class="o">.</span><span class="n">create_distplot</span><span class="p">(</span><span class="n">hist_1d_diff</span><span class="p">,</span> <span class="n">show_rug</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;#F1C40F&#39;</span><span class="p">],</span>
                                    <span class="n">group_labels</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Gate 30 - Gate 40&#34;</span><span class="p">],</span> <span class="n">show_hist</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">dist_1d_diff</span><span class="o">.</span><span class="n">add_vline</span><span class="p">(</span><span class="n">x</span><span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">boot_1d</span><span class="p">[</span><span class="s1">&#39;diff&#39;</span><span class="p">]),</span> <span class="n">line_width</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">line_dash</span><span class="o">=</span><span class="s2">&#34;dash&#34;</span><span class="p">,</span> <span class="n">line_color</span><span class="o">=</span><span class="s2">&#34;black&#34;</span><span class="p">)</span>
<span class="n">dist_1d_diff</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">dist_1d_diff</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">xaxis_range</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">])</span>
<span class="n">dist_1d_diff</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;Percentage of &#34;1 day retention&#34; difference between A/B Groups&#39;</span><span class="p">,</span> <span class="n">xaxis_title</span><span class="o">=</span><span class="s2">&#34;% Difference&#34;</span><span class="p">)</span>
<span class="n">dist_1d_diff</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">dist_1d_diff</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>From this chart, we can see that the percentual difference is around¬†<em>1% - 2%</em>, and that most of the distribution is above¬†<em>0%</em>, in favor of a gate at level 30.</p>
<p>But, what is the probability that the difference is above¬†<em>0%</em>? Let‚Äôs calculate that as well.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Calculating the probability that 1-day retention is greater when the gate is at level 30</span>
<span class="n">prob</span> <span class="o">=</span> <span class="p">(</span><span class="n">boot_1d</span><span class="p">[</span><span class="s1">&#39;diff&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mf">0.0</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">boot_1d</span><span class="p">[</span><span class="s1">&#39;diff&#39;</span><span class="p">])</span>

<span class="c1"># Pretty printing the probability</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;The probabilty of Group 30 (Control) having a higher </span><span class="se">\n</span><span class="s1"> retention than Group 40 (Treatment) is: &#39;</span><span class="p">,</span> <span class="n">prob</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="s1">&#39;%&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">The probabilty of Group 30 (Control) having a higher 
 retention than Group 40 (Treatment) is:  96.39999999999999 %
</code></pre></td></tr></table>
</div>
</div><h3 id="-7-day-retention-by-ab-group">üîÉ 7-day retention by A/B Group</h3>
<p>The bootstrap analysis tells us that there is a high probability that 1-day retention is better when the time gate is at level 30. However, since players have only been playing the game for one day, likely, most players haven‚Äôt reached level 30 yet. That is, many players won‚Äôt have been affected by the gate, even if it‚Äôs as early as level 30.</p>
<p>But after having played for a week, more players should have reached level 40, and therefore it makes sense to also look at 7-day retention. That is:¬†<em>What percentage of the people that installed the game also showed up a week later to play the game again?</em></p>
<p>Let‚Äôs start by calculating 7-day retention for the two AB groups.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Calculating 7-day retention for both AB-groups</span>
<span class="n">ret30_7d</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">players_g30</span><span class="p">[</span><span class="n">players_g30</span><span class="p">[</span><span class="s1">&#39;retention_7&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="kc">True</span><span class="p">])</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">players_g30</span><span class="p">[</span><span class="s1">&#39;retention_7&#39;</span><span class="p">])</span> <span class="o">*</span> <span class="mi">100</span>
<span class="n">ret40_7d</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">players_g40</span><span class="p">[</span><span class="n">players_g40</span><span class="p">[</span><span class="s1">&#39;retention_7&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="kc">True</span><span class="p">])</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">players_g40</span><span class="p">[</span><span class="s1">&#39;retention_7&#39;</span><span class="p">])</span> <span class="o">*</span> <span class="mi">100</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Group 30 at 7 day retention: &#39;</span><span class="p">,</span><span class="nb">str</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="n">ret30_7d</span><span class="p">,</span><span class="mi">2</span><span class="p">)),</span><span class="s2">&#34;%&#34;</span><span class="p">,</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span>
     <span class="s1">&#39;Group 40 at 7 day retention: &#39;</span><span class="p">,</span><span class="nb">str</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="n">ret40_7d</span><span class="p">,</span><span class="mi">2</span><span class="p">)),</span><span class="s2">&#34;%&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Group 30 at 7 day retention:  19.02 % 
 Group 40 at 7 day retention:  18.2 %
</code></pre></td></tr></table>
</div>
</div><p>Like with 1-day retention, we see that 7-day retention is barely lower (<strong>18.20%</strong>) when the gate is at level 40 than when the time gate is at level 30 (<strong>19.02%</strong>). This difference is also larger than for 1-day retention.</p>
<p>We also see that the overall 7-day retention is lower than the overall 1-day retention; fewer people play a game a week than a day after installing.</p>
<p>But as before, let‚Äôs use bootstrap analysis to figure out how sure we can be of the difference between the AB-groups.</p>
<h3 id="control--treatment-group-bootstrapping">Control &amp; Treatment Group Bootstrapping</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Creating a list with bootstrapped means for each AB-group</span>

<span class="c1"># Bootstrapping for CONTROL group</span>
<span class="n">btg30_7d</span> <span class="o">=</span> <span class="n">draw_bs_reps</span><span class="p">(</span><span class="n">players_g30</span><span class="p">[</span><span class="s1">&#39;retention_7&#39;</span><span class="p">],</span> <span class="n">retention</span><span class="p">,</span> <span class="n">iterations</span> <span class="o">=</span> <span class="mi">500</span><span class="p">)</span>

<span class="c1"># Bootstrapping for TREATMENT group</span>
<span class="n">btg40_7d</span> <span class="o">=</span> <span class="n">draw_bs_reps</span><span class="p">(</span><span class="n">players_g40</span><span class="p">[</span><span class="s1">&#39;retention_7&#39;</span><span class="p">],</span> <span class="n">retention</span><span class="p">,</span> <span class="n">iterations</span> <span class="o">=</span> <span class="mi">500</span><span class="p">)</span>

<span class="n">boot_7d</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;gate_30&#39;</span><span class="p">:</span><span class="n">btg30_7d</span><span class="p">,</span> <span class="s1">&#39;gate_40&#39;</span><span class="p">:</span><span class="n">btg40_7d</span><span class="p">},</span>
                       <span class="n">index</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">500</span><span class="p">))</span>

<span class="c1"># Adding a column with the % difference between the two AB-groups</span>
<span class="n">boot_7d</span><span class="p">[</span><span class="s1">&#39;diff&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">boot_7d</span><span class="p">[</span><span class="s1">&#39;gate_30&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">boot_7d</span><span class="p">[</span><span class="s1">&#39;gate_40&#39;</span><span class="p">])</span> <span class="o">/</span>  <span class="n">boot_7d</span><span class="p">[</span><span class="s1">&#39;gate_30&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">100</span>

<span class="c1"># Ploting the bootstrap % difference</span>
<span class="n">hist_7d_diff</span> <span class="o">=</span> <span class="p">[</span><span class="n">boot_7d</span><span class="p">[</span><span class="s1">&#39;diff&#39;</span><span class="p">]]</span>
<span class="n">dist_7d_diff</span> <span class="o">=</span> <span class="n">ff</span><span class="o">.</span><span class="n">create_distplot</span><span class="p">(</span><span class="n">hist_7d_diff</span><span class="p">,</span> <span class="n">show_rug</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;#FF5733&#39;</span><span class="p">],</span>
                                    <span class="n">group_labels</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Gate 30 - Gate 40&#34;</span><span class="p">],</span> <span class="n">show_hist</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">dist_7d_diff</span><span class="o">.</span><span class="n">add_vline</span><span class="p">(</span><span class="n">x</span><span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">boot_7d</span><span class="p">[</span><span class="s1">&#39;diff&#39;</span><span class="p">]),</span> <span class="n">line_width</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">line_dash</span><span class="o">=</span><span class="s2">&#34;dash&#34;</span><span class="p">,</span> <span class="n">line_color</span><span class="o">=</span><span class="s2">&#34;black&#34;</span><span class="p">)</span>
<span class="n">dist_7d_diff</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">dist_7d_diff</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">xaxis_range</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="mi">12</span><span class="p">])</span>
<span class="n">dist_7d_diff</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;Percentage of &#34;7 day retention&#34; difference between A/B Groups&#39;</span><span class="p">,</span> <span class="n">xaxis_title</span><span class="o">=</span><span class="s2">&#34;% Difference&#34;</span><span class="p">)</span>
<span class="n">dist_7d_diff</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">dist_7d_diff</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

<span class="c1"># Calculating the probability that 7-day retention is greater when the gate is at level 30</span>
<span class="n">prob</span> <span class="o">=</span> <span class="p">(</span><span class="n">boot_7d</span><span class="p">[</span><span class="s1">&#39;diff&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">boot_7d</span><span class="p">)</span>

<span class="c1"># Pretty printing the probability</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;The probabilty of Group 30 (Control) having a higher </span><span class="se">\n</span><span class="s1"> retention than Group 40 (Treatment) is: ~&#39;</span><span class="p">,</span> <span class="n">prob</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="s1">&#39;%&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">The probabilty of Group 30 (Control) having a higher 
 retention than Group 40 (Treatment) is: ~ 100.0 %
</code></pre></td></tr></table>
</div>
</div><h2 id="-final-thoughts--takeaways">üóíÔ∏è Final thoughts &amp; takeaways</h2>
<p><strong>What can the stakeholders understand and take in consideration?</strong></p>
<p>As we underlined retention is crucial, because if we don‚Äôt retain our player base, it doesn‚Äôt matter how much money they spend in-game purchases.</p>
<p>So, why is retention higher when the gate is positioned earlier? Normally, we could expect the opposite: The later the obstacle, the longer people get engaged with the game. But this is not what the data tells us, we explained this with the theory of hedonic adaptation.</p>
<p><strong>What could the stakeholders do to take action?</strong></p>
<p>Now we have enough statistical evidence to say that 7-day retention is higher when the gate is at level 30 than when it is at level 40, the same as we concluded for 1-day retention. If we want to keep consumer retention high, we should not move the gate from level 30 to level 40, it means we keep our Control method in the current gate system.</p>
<p><strong>What can stakeholders keep working on?</strong></p>
<p>For coming strategies the Game Designers can consider that, by pushing players to take a break when they reach a gate, the fun of the game is postponed. But, when the gate is moved to level 40, they are more likely to quit the game because they simply got bored of it.</p>
<hr>
<h2 id="‚Ñπ-additional-information">‚ÑπÔ∏è Additional Information</h2>
<ul>
<li><strong>About the article</strong></li>
</ul>
<p>With acknowledgment to Rasmus Baraath for guiding this project. Which was developed for sharing knowledge while using cited sources of the material used.</p>
<p>Thanks to you for reading as well.</p>
<ul>
<li><strong>Related Content</strong></li>
</ul>
<p>For more content related to the authors mentioned, I invite you to visit the next sources:</p>
<p>‚Äì Anders Drachen personal¬†<a href="https://andersdrachen.com/" target="_blank" rel="noopener noreffer">website</a>.</p>
<p>‚Äì Rasmus Baath personal¬†<a href="https://www.sumsar.net/" target="_blank" rel="noopener noreffer">blog</a>.</p>
<p>‚Äì Georg Zoeller personal¬†<a href="https://keybase.io/georgzoeller" target="_blank" rel="noopener noreffer">keybase</a>.</p>
<p>Also in case you want to share some ideas, please visit the¬†<a href="https://www.robguilar.com/about/" target="_blank" rel="noopener noreffer">About</a>¬†section and contact me.</p>
<ul>
<li><strong>Datasets</strong></li>
</ul>
<p>This project was developed with a dataset provided by Rasmus Baath, which also can be downloaded at my¬†<a href="https://github.com/robguilarr/ab_testing_cookie_cats/tree/main/datasets" target="_blank" rel="noopener noreffer">Github</a> repository.</p>
]]></description>
</item>
<item>
    <title>Video Games History explained with Pandas</title>
    <link>https://robguilar.com/posts/evga/</link>
    <pubDate>Wed, 01 Dec 2021 21:57:40 &#43;0800</pubDate><guid>https://robguilar.com/posts/evga/</guid>
    <description><![CDATA[<p>The industry of video games revenues is reaching the $173.7 billion in value, with around 2.5 billion users enjoying them worldwide, with a forecasted value of $314.40 billion by 2026 according to Mordor Intelligence.</p>
<p>Impressive facts, right? Nowadays this market is no longer considered a simple hobby for kids, it has become a constantly growing giant which attracts more and more customers as it takes advantage of the growth of streaming platforms. But this industry, as we well know, is taking more fields, born from ambitious expectations such as the Nintendo World Championships in the 90&rsquo;s to what today many have adopted as a lifestyle also known as <i>Esports</i>.</p>
<p>In this exploratory analysis, we will also see one of the events that marked the industry in the 80s. Here is a preview.</p>
<hr>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Looking for an interactive experience?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">üöÄ Download the Jupyter Notebook, available <a href="https://nbviewer.jupyter.org/github/robguilarr/videogames-eda/blob/main/videogame_analysis/videogame-analysis.ipynb">here</a></div>
        </div>
    </div>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/y2xfuTRnpns" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>We‚Äôll take a tour through the history of videogames, starting from the late 70s and the early 80s. However, as a way of clarification, if you are a member of the culture, it&rsquo;s important to mention that due to limitations of the scope of data available for analysis, <a href="https://gamicus.gamepedia.com/Tomohiro_Nishikado">Tomohiro Nishikado&rsquo;s</a> masterpiece, released as Space Invaders, will not be part of the analysis; and in case you‚Äôre not a member don‚Äôt worry this is for you as well.</p>
<p>From an optimistic point of view, we will analyze quite important historical data, because is difficult to even think about getting the 70s data like <i>Pong</i>; and another advantage is that we can start our journey from the market revolution in the early 80s.</p>
<hr>
<p>Before starting our journey, like any exploratory data analysis we must import our libraries.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># To manage Dataframes</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="c1"># To manage number operators</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="c1"># To do interactive visualizations</span>
<span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="nn">px</span>
<span class="kn">import</span> <span class="nn">plotly.graph_objects</span> <span class="k">as</span> <span class="nn">go</span>
<span class="kn">import</span> <span class="nn">plotly.figure_factory</span> <span class="k">as</span> <span class="nn">ff</span>
<span class="c1"># Format</span>
<span class="kn">from</span> <span class="nn">vizformatter.standards</span> <span class="kn">import</span> <span class="n">layout_plotly</span>
</code></pre></td></tr></table>
</div>
</div><p>Now, let&rsquo;s import our data. We must consider that we already prepared it, as shown in this articles&rsquo;s footnote.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Data frame of videogames</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data/videogames.csv&#34;</span><span class="p">,</span> <span class="n">na_values</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;N/A&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="s2">&#34; &#34;</span><span class="p">,</span> <span class="s2">&#34;nan&#34;</span><span class="p">],</span>
                 <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>In addition to facilitate the management of dates in the visualizations, two extra columns will be generated, one as a <i>Timestamp</i> and another as a <i>String</i>, which will be used only if required.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Transform Year column to a timestamp</span>
<span class="n">df</span><span class="p">[</span><span class="s2">&#34;Year_ts&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">],</span> <span class="nb">format</span><span class="o">=</span><span class="s1">&#39;%Y&#39;</span><span class="p">)</span>

<span class="c1"># Transform Year column to a string</span>
<span class="n">df</span><span class="p">[</span><span class="s2">&#34;Year_str&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span> \
                                        <span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="n">stop</span><span class="o">=-</span><span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>Also we can import the layout format as a variable from my <a href="https://github.com/robguilarr/vizformatter/blob/master/vizformatter/standards.py">repository</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">sign</span><span class="p">,</span> <span class="n">layout</span> <span class="o">=</span> <span class="n">layout_plotly</span><span class="p">(</span><span class="n">height</span><span class="o">=</span> <span class="mi">720</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span> <span class="mi">15</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="data-integrity-validation">Data integrity validation</h2>
<p>First, we check our current dataset using the method <code>.info()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">info</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
Int64Index: 16716 entries, 0 to 16718
Data columns (total 20 columns):
 #   Column           Non-Null Count  Dtype
---  ------           --------------  -----
 0   Name             16716 non-null  object
 1   Year_of_Release  16447 non-null  float64
 2   Publisher        16662 non-null  object
 3   Country          9280 non-null   object
 4   City             9279 non-null   object
 5   Developer        10096 non-null  object
 6   Platform         16716 non-null  object
 7   Genre            16716 non-null  object
 8   NA_Sales         16716 non-null  float64
 9   EU_Sales         16716 non-null  float64
 10  JP_Sales         16716 non-null  float64
 11  Other_Sales      16716 non-null  float64
 12  Global_Sales     16716 non-null  float64
 13  Critic_Score     8137 non-null   float64
 14  Critic_Count     8137 non-null   float64
 15  User_Score       7590 non-null   float64
 16  User_Count       7590 non-null   float64
 17  Rating           9950 non-null   object
 18  Year_ts          16447 non-null  datetime64[ns]
 19  Year_str         16716 non-null  object
dtypes: datetime64[ns](1), float64(10), object(9)
memory usage: 2.7+ MB
</code></pre></td></tr></table>
</div>
</div><p>To one side we find a great variety of data and attributes, to the other one we see that of the total of 16,716 records there are several attributes with a significant number of null values, which we are going to see next, in percentage terms.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Function the plot the percentage of missing values</span>
<span class="k">def</span> <span class="nf">na_counter</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;NaN Values per column:&#34;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
        <span class="n">percentage</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">-</span> <span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="n">df</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">isna</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">())</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>

        <span class="c1"># Only return columns with more than 5% of NA values</span>
        <span class="k">if</span> <span class="n">percentage</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="s2">&#34; has &#34;</span><span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="n">percentage</span><span class="p">))</span> <span class="o">+</span><span class="s2">&#34;</span><span class="si">% o</span><span class="s2">f Null Values&#34;</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">continue</span>

<span class="c1"># Execute function</span>
<span class="n">na_counter</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">NaN Values per column:

Country has 44% of Null Values
City has 44% of Null Values
Developer has 40% of Null Values
Critic_Score has 51% of Null Values
Critic_Count has 51% of Null Values
User_Score has 55% of Null Values
User_Count has 55% of Null Values
Rating has 40% of Null Values
</code></pre></td></tr></table>
</div>
</div><p>These correspond to the attributes that hold more than 5% of the null values considering a confidence standard, which consists of having at least 95% of the data.</p>
<p>In a visual way, we can look at it in the following graphic.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Make a dataframe of the number of Missing Values per attribute</span>
<span class="n">df_na</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">isna</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>

<span class="c1"># Rename our dataframe columns</span>
<span class="n">df_na</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Column&#34;</span><span class="p">,</span><span class="s2">&#34;Missing_Values&#34;</span><span class="p">]</span>

<span class="c1"># Plot barchart of Missing Values</span>
<span class="n">barna</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">df_na</span><span class="p">[</span><span class="n">df_na</span><span class="p">[</span><span class="s2">&#34;Missing_Values&#34;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">sort_values</span>
               <span class="p">(</span><span class="s2">&#34;Missing_Values&#34;</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="kc">False</span><span class="p">),</span>
               <span class="n">y</span><span class="o">=</span><span class="s2">&#34;Missing_Values&#34;</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s2">&#34;Column&#34;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&#34;Missing_Values&#34;</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span>
              <span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Total of Missing Values per attribute&#34;</span><span class="p">,</span> <span class="n">color_continuous_scale</span><span class="o">=</span>
               <span class="s2">&#34;teal&#34;</span><span class="p">,</span>
              <span class="n">labels</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;Missing_Values&#34;</span><span class="p">:</span><span class="s2">&#34;Missing Values&#34;</span><span class="p">})</span>

<span class="c1"># Update layout</span>
<span class="n">barna</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">barna</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">barna</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/barplot_1.png?format=webpage" title="Barplot of Missing Values" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/barplot_1.png?format=webpage">
        
    </a>
</p>
<p>We see that there is a significant quantity of null values, predominantly in columns related to critics and their respective value (<a href="https://www.metacritic.com/browse/games/score/metascore/all/all/filtered">Metacritic</a>); as well as its content Rating made by <i>ESRB</i> (<a href="https://www.esrb.org/search/?searchKeyword= platform=Nintendo%203DS%2CWii%20U%2CPlayStation%204%2CPlayStation%203%2CXbox%20One%2CXbox%20360%2CPC%2COther&rating=E%2CE10%2B%2CT%2CM%2CAO&descriptor=All%20Content&pg=1&searchType=MostViewed">Entertainment Software Rating Board</a>).</p>
<p>Still, since these are not categorical variables, they won‚Äôt have an identifier role, in which case our main interest will be <i>&ldquo;Name&rdquo;</i> and <i>&ldquo;Year_of_Release&rdquo;</i>, and subsequently their elimination or omission will be evaluated if necessary.</p>
<hr>
<h2 id="exploratory-video-game-analysis-evga">Exploratory Video Game Analysis (EVGA)</h2>
<p>Before starting with our expedition we should begin by understanding the behavior of the data with which our analysis will be built, for this we‚Äôll use the <code>.describe()</code> method.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Modify decimal number attribute</span>
<span class="n">pd</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">float_format</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">{:.2f}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span>

<span class="c1"># Print description</span>
<span class="n">df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="middle"></p>
<p>The numerical attributes show us that we have a total of 40 years of records (from 1980 to 2020) of sales in North America, Europe, Japan, and other parts of the world. Where the median indicates that 50% of the years recorded are less than or equal to 2007, and we did not find outliers.</p>
<p>Also, the average sales value is higher in North America despite the fact that the average sale of the titles is around 263,000 units, but its variation is quite high, so it should be compared more exhaustively.</p>
<p>From a historical point of view, it makes sense, that knowing that the focus of sales is North America, cause even during the 60s the head of <i>Nintendo of America</i>, <a href ="https://en.wikipedia.org/wiki/Minoru_Arakawa">Minoru Arakawa</a>, decided to expand their operations in the United States starting from the world of the arcade, so we can have the hypothesis to see this as a place of opportunities for this market.</p>
<h3 id="golden-age-of-videogames">Golden Age of Videogames</h3>
<blockquote><b>1977</b> ‚Äì Launch of Atari 2600</blockquote>
<p align= center>
    
</p>
<p>We will begin with the global view, I mean, the superficial perspective of the sales during this period.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Mask to subset games from 1980 to 1990</span>
<span class="n">games8090</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">isin</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1980</span><span class="p">,</span><span class="mi">1991</span><span class="p">))</span>


<span class="c1"># Top publishers between 1980 and 1990</span>
<span class="n">top_pub</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">1990</span><span class="p">]</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">&#34;Publisher&#34;</span><span class="p">)</span> \
                                        <span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">)</span> \
                                        <span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)[</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">]</span> \
                                        <span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

<span class="c1"># Dataframe for Line Plot of most frequent companies</span>
<span class="n">df_sales_ts</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">games8090</span><span class="p">][</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;Publisher&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">isin</span><span class="p">(</span><span class="n">top_pub</span><span class="o">.</span><span class="n">index</span><span class="p">)]</span> \
                <span class="o">.</span><span class="n">pivot_table</span><span class="p">(</span><span class="n">values</span> <span class="o">=</span> <span class="s2">&#34;Global_Sales&#34;</span><span class="p">,</span>
                             <span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">,</span> <span class="s2">&#34;Year_str&#34;</span><span class="p">,</span> <span class="s2">&#34;Year_ts&#34;</span><span class="p">,</span>
                                      <span class="s2">&#34;Publisher&#34;</span><span class="p">,</span><span class="s2">&#34;Platform&#34;</span><span class="p">],</span> <span class="n">aggfunc</span><span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">)</span> \
                <span class="o">.</span><span class="n">reset_index</span><span class="p">()</span> \
                <span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span> \
                <span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s2">&#34;Publisher&#34;</span><span class="p">,</span><span class="s2">&#34;Year_ts&#34;</span><span class="p">])</span> \
                <span class="o">.</span><span class="n">sum</span><span class="p">()</span> \
                <span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>


<span class="c1"># Plot a lineplot</span>
<span class="n">gline</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">df_sales_ts</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s2">&#34;Year_ts&#34;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Publisher&#39;</span><span class="p">,</span>
               <span class="n">labels</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;Year_ts&#34;</span><span class="p">:</span> <span class="s2">&#34;Years&#34;</span><span class="p">,</span>  <span class="s2">&#34;Global_Sales&#34;</span><span class="p">:</span> <span class="s2">&#34;Millions of Units Sold&#34;</span><span class="p">,</span> <span class="s2">&#34;total_bill&#34;</span><span class="p">:</span> <span class="s2">&#34;Receipts&#34;</span><span class="p">},</span>
               <span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Millions of units during Golden Age sold by Publisher&#34;</span><span class="p">)</span>

<span class="c1"># To plot markers</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">gline</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;markers+lines&#39;</span><span class="p">)</span>

<span class="c1"># Update Layout</span>
<span class="n">gline</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">gline</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">gline</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/lineplot_2.png?format=webpage" title="Lineplot of Golden Age" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/lineplot_2.png?format=webpage">
        
    </a>
</p>
<p>As we can see at the beginning of the decade and probably after 1977, the market was dominated by Atari Studios while Activision was its main competitor in terms of <a href= "https://twinfinite.net/2016/06/video-games-what-does-ip-mean/">IPs</a>, because these competitors eventually published their titles on the Atari 2600, example of this was Activision with <i>Kaboom!</i> or Parker Bros with <i>Frogger</i>.</p>
<p>Another important fact is that in 1982 we can remember that it was one of the best times for Atari where they published titles that had a great impact such as Tod Frye&rsquo;s <i>Pac-Man</i>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Mask of 1982 games</span>
<span class="n">games82</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">Year_of_Release</span> <span class="o">==</span> <span class="mi">1982</span><span class="p">]</span>

<span class="c1"># Distribution column</span>
<span class="n">games82</span><span class="p">[</span><span class="s1">&#39;Distribution&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">games82</span><span class="o">.</span><span class="n">Global_Sales</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">games82</span><span class="o">.</span><span class="n">Global_Sales</span><span class="p">))</span><span class="o">*</span><span class="mi">100</span>

<span class="c1"># Extracting top titles of 1982</span>
<span class="n">games82</span> <span class="o">=</span> <span class="n">games82</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s1">&#39;Distribution&#39;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

<span class="c1"># Fix Publisher Issue of Mario Bros., this game was originally published by</span>
<span class="c1"># Nintendo for arcades</span>
<span class="n">games82</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">games82</span><span class="o">.</span><span class="n">Name</span> <span class="o">==</span> <span class="s1">&#39;Mario Bros.&#39;</span><span class="p">,</span><span class="s1">&#39;Publisher&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Nintendo&#39;</span>

<span class="c1"># Distribution</span>
<span class="n">bar82</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">games82</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;Distribution&#39;</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s1">&#39;Distribution&#39;</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s1">&#39;Name&#39;</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span>
<span class="s1">&#39;Publisher&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Distribution of total sales in 1982 by Publisher&#39;</span><span class="p">,</span>
               <span class="n">labels</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;Distribution&#34;</span><span class="p">:</span><span class="s2">&#34;Market Participation distribution&#34;</span><span class="p">,</span>
                       <span class="s2">&#34;Name&#34;</span><span class="p">:</span><span class="s2">&#34;Videogame title&#34;</span><span class="p">})</span>

<span class="c1"># Adding text of percentages</span>
<span class="n">bar82</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">texttemplate</span><span class="o">=</span><span class="s1">&#39;%</span><span class="si">{text:.3s}</span><span class="s1">%&#39;</span><span class="p">,</span> <span class="n">textposition</span><span class="o">=</span><span class="s1">&#39;outside&#39;</span><span class="p">)</span>

<span class="c1"># Update layout</span>
<span class="n">bar82</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">bar82</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">bar82</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/barplot_3.png?format=webpage" title="Barplot of 1982" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/barplot_3.png?format=webpage">
        
    </a>
</p>
<p>It is evident that the adaptation of this arcade game released in 1980, had outstanding sales, once it was introduced to the world of the Atari 2600. According to the documentary <i>&ldquo;Ounce Upon Atari&rdquo;</i>, episode 4 to be exactly, this title managed to sell more than 7 million copies, due to optimizations in the display and in the intelligence of the <a href="https://www.businessinsider.com/npc-meaning">NPCs</a>, compared to the original version.</p>
<ul>
<li><b>FYI:</b> The version of Mario Bros in the dataset corresponds to the Atari 2600 and Arcade version are different from the success that was later introduced to the NES.</li>
</ul>
<blockquote><b>1983</b> ‚Äì Crisis of the Video Game industry</blockquote>
<p align= center>
    
</p>
<p>Undoubtedly, the timeline above shows a clear drop in sales from 1983.</p>
<p>And yes, I&rsquo;m sure they want to know what happened here.</p>
<p>For sure, if we had <a href="https://en.wikipedia.org/wiki/Howard_Scott_Warshaw">Howard Scott Warshaw</a> talking with us, we would surely understand one of the crudest realities in this industry‚Äôs history, since he lived this in his own flesh. But in this case, I will explain.</p>
<p>In summary, he was one of the greatest designers of that moment, who was hired to design a video game based on one of the biggest hits in cinema, <i>E.T. the Extra-Terrestrial</i>. At the time Steven Spielberg shares the vision of a game very similar to Pac-Man, something extremely strange, and by the way a release date is designated just a few months after this.</p>
<p>As you may have thought, it was a complete disaster. Like this case, many developers saw the accelerated growth of the industry as an opportunity to launch titles in large numbers and with a very low quality content, as evidenced by the second quartile of our initial analysis.</p>
<p>There were many other causes such as the massive appearance of consoles and the flexibility of the guidelines for <i>third party developers</i>, but if you want a quick perspective, I recommend <a href = "https://www.ign.com/articles/2011/09/21/ten-facts-about-the-great-video-game-crash-of-83">this</a> IGN article.</p>
<blockquote><b>1984</b> ‚Äì A new foe has appeared! Challenger approaching</blockquote>
<p align= center>
    
</p>
<p>After the drop because of the oversupply of titles, Nintendo Entertainment saw a chance to take over the American market with its local bestseller the
<i>Famicom</i>. This was transformed through a redesign adapted for the North American public, being renamed as <a href="https://en.wikipedia.org/wiki/Nintendo_Entertainment_System#North_American_release">NES</a> (Nintendo Entertainment System), previously named Nintendo Advanced Video System.</p>
<p>Also, thanks to the great success known as Donkey Kong, the mastermind <a href="https://en.wikipedia.org/wiki/Shigeru_Miyamoto">Shigeru Miyamoto</a>, takes advantage of the success of Jumpman and Pauline; in 1983 he released Mario Bros and the rest is history.</p>
<p>The Donkey Kong game despite being called referring to the antagonist of the video game, was not the most interesting character for consumers, instead it was Jumpman, also
known as Mario.</p>
<p>The importance of Nintendo for the North American market can be seen through the following graph, where the global sales of titles are generally seen in the four regions, in which North America covers the largest numbers by far.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Aggregation dictionary for each region</span>
<span class="n">agg_region</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;NA_Sales&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span><span class="p">,</span> <span class="s1">&#39;JP_Sales&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span><span class="p">,</span> <span class="s1">&#39;EU_Sales&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span><span class="p">,</span> <span class="s1">&#39;Other_Sales&#39;</span><span class="p">:</span>
    <span class="s1">&#39;sum&#39;</span><span class="p">,</span> <span class="s1">&#39;Global_Sales&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span><span class="p">}</span>

<span class="c1"># Dataframe of regions 80-90s</span>
<span class="n">reg8090</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">games8090</span><span class="p">]</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">agg_region</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>\
    <span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="c1"># To loop and place the traces</span>
<span class="n">region_suffix</span> <span class="o">=</span> <span class="s1">&#39;_Sales&#39;</span>
<span class="n">regions</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;NA&#39;</span><span class="p">,</span> <span class="s1">&#39;JP&#39;</span><span class="p">,</span> <span class="s1">&#39;EU&#39;</span><span class="p">,</span> <span class="s1">&#39;Other&#39;</span><span class="p">]</span>
<span class="n">region_names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;North America&#39;</span><span class="p">,</span> <span class="s1">&#39;Japan&#39;</span><span class="p">,</span> <span class="s1">&#39;Europe&#39;</span><span class="p">,</span> <span class="s1">&#39;Other&#39;</span><span class="p">]</span>
<span class="n">i</span><span class="o">=</span><span class="mi">0</span>

<span class="c1"># Generate graph object</span>
<span class="n">regplot</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Figure</span><span class="p">()</span>
<span class="k">for</span> <span class="n">region</span> <span class="ow">in</span> <span class="n">regions</span><span class="p">:</span>
    <span class="n">regplot</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">reg8090</span><span class="p">[</span><span class="s1">&#39;Year_of_Release&#39;</span><span class="p">],</span> <span class="n">y</span> <span class="o">=</span>
    <span class="n">reg8090</span><span class="p">[</span><span class="n">region</span><span class="o">+</span><span class="n">region_suffix</span><span class="p">],</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;markers+lines&#39;</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">region_names</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="c1"># Update layout</span>
<span class="n">regplot</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">regplot</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">regplot</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/lineplot_4.png?format=webpage" title="Lineplot Regional" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/lineplot_4.png?format=webpage">
        
    </a>
</p>
<p>A conclusion that is worth mentioning is that even Nintendo&rsquo;s success today is not only due to its innovation and sense of affection for its IPs, but also because of the exclusivity of its titles. As shown, both the NES and the GameBoy had great sales in the North American market despite being Japanese companies.</p>
<blockquote><b>1989</b> ‚Äì Gunpei Yokoi, father of the Game & Watch series, creates the GameBoy, the ultimate portable console</blockquote>
<p align= center>
    
</p>
<h3 id="i-world-console-war-wcwi">I World Console War (WCWI)</h3>
<blockquote><b>1989</b> - Sega Enterprises Inc. launches worldwide Sega Megadrive Genesis</blockquote>
<blockquote><b>1991</b> - Nintendo launches worldwide Super Nintendo Entertainment system</blockquote>
<p align= center>
    
</p>
<p>At the beginning of the 90s, after the launch of the SEGA and Nintendo consoles, the First World War of Videogames began. Mainly in two of their biggest titles, Sonic The Hedgedog and Super Mario Bros.</p>
<p>During 1990, approximately 90% of the US market was controlled by Nintendo, until in 1992 SEGA began to push with strong marketing campaigns aimed at an older audience.</p>
<p>One of the most remarkable fact of this period was the launch of Mortal Kombat in 1992, where Nintendo censored part of its content (<a href="https://en.wikipedia.org/wiki/Controversies_surrounding_Mortal_Kombat">blood-content</a>) since they had an initiative to be a <i>family friendly</i> company, and of course this became very annoying the followers of this series.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Transform current dataframe as long format</span>
<span class="n">df_long</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">melt</span><span class="p">(</span><span class="n">id_vars</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Name&#34;</span><span class="p">,</span><span class="s2">&#34;Platform&#34;</span><span class="p">,</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">,</span><span class="s2">&#34;Genre&#34;</span><span class="p">,</span>
                           <span class="s2">&#34;Publisher&#34;</span><span class="p">,</span> <span class="s2">&#34;Developer&#34;</span><span class="p">,</span> <span class="s2">&#34;Rating&#34;</span><span class="p">,</span> <span class="s2">&#34;Year_str&#34;</span><span class="p">,</span> <span class="s2">&#34;Year_ts&#34;</span><span class="p">,</span>
                           <span class="s2">&#34;Country&#34;</span><span class="p">,</span> <span class="s2">&#34;City&#34;</span><span class="p">,</span><span class="s2">&#34;Critic_Score&#34;</span><span class="p">,</span><span class="s2">&#34;User_Score&#34;</span><span class="p">],</span>
                  <span class="n">value_vars</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;NA_Sales&#34;</span><span class="p">,</span> <span class="s2">&#34;EU_Sales&#34;</span><span class="p">,</span><span class="s2">&#34;JP_Sales&#34;</span><span class="p">,</span><span class="s2">&#34;Other_Sales&#34;</span><span class="p">],</span>
                  <span class="n">var_name</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Location&#34;</span><span class="p">],</span>
                  <span class="n">value_name</span> <span class="o">=</span> <span class="s2">&#34;Sales&#34;</span><span class="p">)</span>


<span class="c1"># Giving a better format to the location&#39;s Name</span>
<span class="n">df_long</span> <span class="o">=</span> <span class="n">df_long</span><span class="o">.</span><span class="n">replace</span><span class="p">({</span><span class="s2">&#34;Location&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;NA_Sales&#34;</span><span class="p">:</span> <span class="s2">&#34;North America&#34;</span><span class="p">,</span>
                                        <span class="s2">&#34;EU_Sales&#34;</span><span class="p">:</span> <span class="s2">&#34;Europe&#34;</span><span class="p">,</span>
                                        <span class="s2">&#34;JP_Sales&#34;</span><span class="p">:</span> <span class="s2">&#34;Japan&#34;</span><span class="p">,</span>
                                        <span class="s2">&#34;Other_Sales&#34;</span><span class="p">:</span> <span class="s2">&#34;Rest of the World&#34;</span><span class="p">}</span> <span class="p">})</span>

<span class="c1"># To delete columns without sales registry</span>
<span class="n">df_long</span> <span class="o">=</span>  <span class="n">df_long</span><span class="p">[</span><span class="n">df_long</span><span class="p">[</span><span class="s2">&#34;Sales&#34;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Sales&#34;</span><span class="p">])</span>

<span class="c1"># Dataframe</span>
<span class="n">df_gen90</span> <span class="o">=</span> <span class="n">df_long</span><span class="p">[(</span><span class="n">df_long</span><span class="p">[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1989</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df_long</span><span class="p">[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">2000</span><span class="p">)]</span> \
                            <span class="o">.</span><span class="n">pivot_table</span><span class="p">(</span><span class="n">values</span> <span class="o">=</span> <span class="s2">&#34;Sales&#34;</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="s2">&#34;Genre&#34;</span><span class="p">,</span>
                                        <span class="n">columns</span> <span class="o">=</span> <span class="s2">&#34;Location&#34;</span><span class="p">,</span> <span class="n">aggfunc</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">)</span>

<span class="c1"># Image plot</span>
<span class="n">ima</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">df_gen90</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">T</span><span class="p">,</span>
                <span class="n">y</span><span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Europe&#34;</span><span class="p">,</span><span class="s2">&#34;Japan&#34;</span><span class="p">,</span><span class="s2">&#34;North America&#34;</span><span class="p">,</span><span class="s2">&#34;Rest of the Worlds&#34;</span><span class="p">],</span>
                <span class="n">x</span><span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Action&#39;</span><span class="p">,</span> <span class="s1">&#39;Adventure&#39;</span><span class="p">,</span> <span class="s1">&#39;Fighting&#39;</span><span class="p">,</span> <span class="s1">&#39;Misc&#39;</span><span class="p">,</span> <span class="s1">&#39;Platform&#39;</span><span class="p">,</span> <span class="s1">&#39;Puzzle&#39;</span><span class="p">,</span>
                    <span class="s1">&#39;Racing&#39;</span><span class="p">,</span> <span class="s1">&#39;Role-Playing&#39;</span><span class="p">,</span> <span class="s1">&#39;Shooter&#39;</span><span class="p">,</span> <span class="s1">&#39;Simulation&#39;</span><span class="p">,</span> <span class="s1">&#39;Sports&#39;</span><span class="p">,</span><span class="s1">&#39;Strategy&#39;</span><span class="p">],</span>
               <span class="n">labels</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s2">&#34;Total Sales in Millions&#34;</span><span class="p">),</span>
               <span class="n">color_continuous_scale</span><span class="o">=</span><span class="s1">&#39;RdBu_r&#39;</span><span class="p">,</span>
               <span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Heatmap of Location vs Genre during WCWI&#34;</span><span class="p">)</span>

<span class="c1"># Update layout</span>
<span class="n">ima</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">ima</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">ima</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/heatmap_5.png?format=webpage" title="Heatmap of WCWI" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/heatmap_5.png?format=webpage">
        
    </a>
</p>
<p>Following the Mortal Kombat censorship, Nintendo was hit, noticing that fighting genres were among the most purchased during the 90s. However, the success of Nintendo IPs such as The Legend of Zelda and Super Mario, ended up destroying the SEGA console in 1998, in addition because of Nintendo grew stronger thanks to role-playing games during these years.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Dataframe with just SNES and GEN, Super Mario was removed to avoid outliers</span>
<span class="n">df_sn</span> <span class="o">=</span> <span class="n">df_long</span><span class="p">[(</span><span class="n">df_long</span><span class="p">[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1989</span><span class="p">)</span> <span class="o">&amp;</span>
                <span class="p">(</span><span class="n">df_long</span><span class="p">[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">2000</span><span class="p">)</span> <span class="o">&amp;</span>
               <span class="p">((</span><span class="n">df_long</span><span class="p">[</span><span class="s2">&#34;Platform&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="s2">&#34;GB&#34;</span><span class="p">,</span><span class="s2">&#34;NES&#34;</span><span class="p">,</span><span class="s2">&#34;SNES&#34;</span><span class="p">,</span><span class="s2">&#34;GEN&#34;</span><span class="p">,</span><span class="s2">&#34;PC&#34;</span><span class="p">,</span><span class="s2">&#34;PS&#34;</span><span class="p">,</span><span class="s2">&#34;N64&#34;</span><span class="p">,</span><span class="s2">&#34;DC&#34;</span><span class="p">]))</span>
               <span class="p">)]</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="mi">18</span><span class="p">)</span>

<span class="c1"># Plot of sales during 90s</span>
<span class="n">strip90</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="n">df_sn</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="s2">&#34;Year_of_Release&#34;</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="s2">&#34;Sales&#34;</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s2">&#34;Platform&#34;</span><span class="p">,</span>
                  <span class="n">hover_name</span><span class="o">=</span><span class="s2">&#34;Name&#34;</span><span class="p">,</span>
                  <span class="n">labels</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;Name&#34;</span><span class="p">:</span><span class="s2">&#34;Title&#34;</span><span class="p">,</span> <span class="s2">&#34;Year_of_Release&#34;</span><span class="p">:</span><span class="s2">&#34;Year&#34;</span><span class="p">},</span>
                 <span class="n">hover_data</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Country&#34;</span><span class="p">])</span>

<span class="c1"># Update layout</span>
<span class="n">strip90</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">strip90</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">jitter</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">strip90</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">strip90</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/scatterplot_6.png?format=webpage" title="Scatterplot of 90s" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/scatterplot_6.png?format=webpage">
        
    </a>
</p>
<p>The first impression, when looking at this graph is that we notice the great dominance of Nintendo since the sales of the Sega Genesis collapsed in 1995, until during the Sega Dreamcast campaign, where the leadership was taken by the GameBoy and the <i>Nintendo 64</i>, followed by the new competitor <i>Play Station</i>, a topic that we will cover later.</p>
<h3 id="role-playing-game-revolution">Role-playing game revolution</h3>
<p align= center>
    
</p>
<p>One of the most characteristic events of this time was the implementation of 16-bit graphic technologies, which at the time was double what was available. Along with this, the Japanese once again made another master move, which gave a decisive turn to a genre, after the expected fall of RPGs on the PC platform.</p>
<p>Before highlighting the Japanese originality, it is necessary to know after successes of role-playing games such as <a href="https://en.wikipedia.org/wiki/Ultima_VIII:_Pagan">Ultima VIII: Pagan (PC)</a>, this genre had a slow development, since the CD-ROMs generated great graphic expectations for the developers, by the way prolonging the releases, and for sure this caused a lack of interest from the community, and began to move towards action games or first person shooter such as <a href ="https://en.wikipedia.org/wiki/GoldenEye_007_(1997_video_game)">Golden Eye (1997)</a>. However, success stories continued to appear in this genre such as <a href="https://en.wikipedia.org/wiki/Diablo_(video_game)">Diablo (1996)</a>, developed by Blizzard Entertainment.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Dataframe for Genre lineplot</span>
<span class="n">df90G</span> <span class="o">=</span> <span class="n">df_long</span><span class="p">[(</span><span class="n">df_long</span><span class="p">[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1989</span><span class="p">)</span> <span class="o">&amp;</span>
                <span class="p">(</span><span class="n">df_long</span><span class="p">[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">2000</span><span class="p">)</span> <span class="o">&amp;</span>
               <span class="p">((</span><span class="n">df_long</span><span class="p">[</span><span class="s2">&#34;Genre&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;Role-Playing&#34;</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_long</span><span class="p">[</span><span class="s2">&#34;Genre&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;Action&#34;</span><span class="p">)</span> <span class="o">|</span>
                <span class="p">(</span><span class="n">df_long</span><span class="p">[</span><span class="s2">&#34;Genre&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;Platform&#34;</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_long</span><span class="p">[</span><span class="s2">&#34;Genre&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;Fighting&#34;</span><span class="p">)</span>
               <span class="p">)]</span> \
               <span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s2">&#34;Genre&#34;</span><span class="p">,</span> <span class="s2">&#34;Year_ts&#34;</span><span class="p">])</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="s2">&#34;Sales&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>

<span class="c1"># Plot an animated lineplot</span>
<span class="n">linegen</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">df90G</span><span class="p">,</span>
                 <span class="n">x</span><span class="o">=</span><span class="s2">&#34;Year_ts&#34;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">&#34;Sales&#34;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&#34;Genre&#34;</span><span class="p">,</span>
                <span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Millions of units sold during 90s by Genre &#34;</span><span class="p">,</span>
                 <span class="n">labels</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;Sales&#34;</span><span class="p">:</span> <span class="s2">&#34;Millions of Units Sold&#34;</span><span class="p">,</span> <span class="s2">&#34;Year_ts&#34;</span><span class="p">:</span><span class="s2">&#34;Years&#34;</span><span class="p">})</span>

<span class="c1"># To plot markers</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">):</span>
    <span class="n">linegen</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;markers+lines&#39;</span><span class="p">)</span>

<span class="c1"># Update layout</span>
<span class="n">linegen</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">linegen</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">linegen</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/lineplot_7.png?format=webpage" title="Lineplot of 90s" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/lineplot_7.png?format=webpage">
        
    </a>
</p>
<p>Among all genres, the growth of RPGs over time must be underlined. The release of <a href = "https://en.wikipedia.org/wiki/Pok%C3%A9mon#:~:text=The%20third%20versi%C3%B3n%20(fourth%20en,1%20of%20october%20of%201999.">Pok√©mon</a> in 1996 for GameBoy by the developer Game Freak was a success for Nintendo, which swept everything in its path, with its first generation of Pokemon Blue, Red and Yellow that was released in 1999, the latter is the fourth Japanese version.</p>
<h3 id="a-new-japanese-ruler-takes-the-throne">A new Japanese Ruler takes the throne</h3>
<blockquote><b>1994</b> - Sony Computer Entertainment's PlayStation is born</blockquote>
<p align= center>
    
</p>
<p>RPGs not only boosted Nintendo, but multiplatform IPs like Final Fantasy VII gave companies such as Sony Computer Entertainment a boost during the introduction of their new 32-bit console and at the same time to publicize the <a href="https://mediawiki.middlebury.edu/FMMC0282/JRPG">JRPGs</a> within the western market.</p>
<p>In 1995, when Sony planned their introduction of the PlayStation to America, they chose not to focus their Video Game market on a single type of genre or audience, but instead diversified their video game portfolio and memorable titles such as Crash Bandicoot, Metal Gear Solid and Tekken emerged.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Subset only PS games</span>
<span class="n">df_sony</span> <span class="o">=</span> <span class="n">df</span><span class="p">[(</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="mi">1995</span><span class="p">,</span><span class="mi">1996</span><span class="p">]))</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;Platform&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;PS&#34;</span><span class="p">)]</span>

<span class="c1"># Subset the columns needed</span>
<span class="n">df_sony</span> <span class="o">=</span> <span class="n">df_sony</span><span class="p">[[</span><span class="s2">&#34;Name&#34;</span><span class="p">,</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">,</span><span class="s2">&#34;Publisher&#34;</span><span class="p">,</span><span class="s2">&#34;Platform&#34;</span><span class="p">,</span><span class="s2">&#34;Genre&#34;</span><span class="p">,</span>
                     <span class="s2">&#34;Global_Sales&#34;</span><span class="p">]]</span>

<span class="c1"># Pie plot</span>
<span class="n">piesony</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">pie</span><span class="p">(</span><span class="n">df_sony</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span> <span class="s2">&#34;Global_Sales&#34;</span><span class="p">,</span>
             <span class="n">names</span><span class="o">=</span><span class="s1">&#39;Genre&#39;</span><span class="p">,</span>
            <span class="n">color_discrete_sequence</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">sequential</span><span class="o">.</span><span class="n">Blues_r</span><span class="p">,</span>
                 <span class="n">labels</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">:</span><span class="s2">&#34;Sales&#34;</span><span class="p">})</span>

<span class="c1"># Update layout</span>
<span class="n">piesony</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">piesony</span><span class="o">.</span><span class="n">update_traces</span><span class="p">({</span><span class="s2">&#34;textinfo&#34;</span><span class="p">:</span><span class="s2">&#34;label+text+percent&#34;</span><span class="p">,</span>
                       <span class="s2">&#34;hole&#34;</span><span class="p">:</span><span class="mf">0.15</span><span class="p">})</span>
<span class="n">piesony</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">piesony</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/piechart_8.png" title="PlayStation Piechart" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/piechart_8.png">
        
    </a>
</p>
<p>As we can see in the graph, Sony&rsquo;s video game distribution during its first two years in the North American market. Even if we pay attention, titles like Tekken and Mortal Kombat had a significant presence by showing the highest levels of sales by genre (referring to &ldquo;Fighting&rdquo; genre).</p>
<h3 id="content-control-warnings">Content control warnings</h3>
<blockquote><b>1994</b> - Foundation of Entertainment Software Rating Board</blockquote>
<p align= center>
    
</p>
<p>After titles like Doom, Wolfenstein and Mortal Kombat, an American system arises to classify the content of video games, and assign it a category depending on its potential audience maturity. It was established in 1994 by the Entertainment Software Association, the formerly called the Interactive Digital Software Association.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># ESRB Rating Dataframe</span>
<span class="n">df_r</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;Rating&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">isna</span><span class="p">()</span> <span class="o">==</span> <span class="kc">False</span><span class="p">]</span>

<span class="n">df_r</span> <span class="o">=</span> <span class="n">df_r</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s2">&#34;Rating&#34;</span><span class="p">,</span><span class="s2">&#34;Platform&#34;</span><span class="p">])</span><span class="o">.</span><span class="n">count</span><span class="p">()[</span><span class="s2">&#34;Name&#34;</span><span class="p">]</span> \
                                    <span class="o">.</span><span class="n">reset_index</span><span class="p">()</span> \
                                    <span class="o">.</span><span class="n">pivot_table</span><span class="p">(</span><span class="n">values</span> <span class="o">=</span> <span class="s2">&#34;Name&#34;</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="s2">&#34;Rating&#34;</span><span class="p">,</span>
                                                 <span class="n">columns</span> <span class="o">=</span> <span class="s2">&#34;Platform&#34;</span><span class="p">,</span> <span class="n">aggfunc</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">])</span> \
                                    <span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1"># Drop empty classifications</span>
<span class="n">df_r</span> <span class="o">=</span> <span class="n">df_r</span><span class="o">.</span><span class="n">drop</span><span class="p">([</span><span class="s2">&#34;AO&#34;</span><span class="p">,</span><span class="s2">&#34;EC&#34;</span><span class="p">,</span><span class="s2">&#34;K-A&#34;</span><span class="p">,</span><span class="s2">&#34;RP&#34;</span><span class="p">])</span>

<span class="c1"># Heatmap of ESRB Rating vs Consoles</span>
<span class="n">gesrb</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">df_r</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
                <span class="n">x</span><span class="o">=</span> <span class="p">[</span><span class="s2">&#34;3DS&#34;</span><span class="p">,</span><span class="s2">&#34;DC&#34;</span><span class="p">,</span><span class="s2">&#34;DS&#34;</span><span class="p">,</span><span class="s2">&#34;GBA&#34;</span><span class="p">,</span><span class="s2">&#34;GC&#34;</span><span class="p">,</span><span class="s2">&#34;PC&#34;</span><span class="p">,</span><span class="s2">&#34;PS&#34;</span><span class="p">,</span><span class="s2">&#34;PS2&#34;</span><span class="p">,</span><span class="s2">&#34;PS3&#34;</span><span class="p">,</span><span class="s2">&#34;PS4&#34;</span><span class="p">,</span><span class="s2">&#34;PSP&#34;</span><span class="p">,</span><span class="s2">&#34;PSV&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;Wii&#34;</span><span class="p">,</span><span class="s2">&#34;WiiU&#34;</span><span class="p">,</span><span class="s2">&#34;Xbox 360&#34;</span><span class="p">,</span><span class="s2">&#34;Xbox&#34;</span><span class="p">,</span><span class="s2">&#34;Xbox One&#34;</span><span class="p">],</span>
                <span class="n">y</span><span class="o">=</span> <span class="p">[</span><span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="s1">&#39;E10+&#39;</span><span class="p">,</span> <span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="s1">&#39;T&#39;</span><span class="p">],</span>
               <span class="n">labels</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s2">&#34;Console&#34;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">&#34;ESRB Rating&#34;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&#34;Number of Titles&#34;</span><span class="p">),</span>
               <span class="n">color_continuous_scale</span><span class="o">=</span><span class="s1">&#39;BuGn&#39;</span><span class="p">,</span>
               <span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Heatmap of ESRB Rating vs Consoles updated to 2016&#34;</span><span class="p">)</span>

<span class="c1"># Update layout</span>
<span class="n">gesrb</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">gesrb</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">gesrb</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/heatmap9.png?format=webpage" title="Heatmap ESRB" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/heatmap9.png?format=webpage">
        
    </a>
</p>
<p>Based on the classification established by the ESRB, from the data available it can be concluded that the video game console with more titles for universal use is the Nintendo DS, followed by the PS2 and then is the Wii, thus highlighting the impact they had on sales, which it will be shown later.</p>
<p>Meanwhile, the Xbox 360 and PS3 were geared towards a more mature audience with a significant presence of M-rated titles.</p>
<h3 id="last-years-of-32-bit-era">Last years of 32 bit era</h3>
<p>In the early 2000s, after the launch of the PS1, Sony continued leading the console market and diversifying its portfolio of games. On the other side of the coin SEGA, despite having launched the first console with an online system, in 2002 they retired their console from the market and dedicated itself exclusively to third-party development and Arcade, a situation that is outlined in the following graph.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Lineplot sales by platform before 2005</span>
<span class="c1"># Extract columns</span>
<span class="n">games20</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">,</span><span class="s2">&#34;Platform&#34;</span><span class="p">,</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">]]</span>

<span class="c1"># Subset dates</span>
<span class="n">games20</span> <span class="o">=</span> <span class="n">games20</span><span class="p">[(</span><span class="n">games20</span><span class="o">.</span><span class="n">Year_of_Release</span> <span class="o">&gt;</span> <span class="mi">1998</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">games20</span><span class="o">.</span><span class="n">Year_of_Release</span> <span class="o">&lt;</span> <span class="mi">2005</span><span class="p">)]</span>

<span class="c1"># Omit WonderSwan by Bandai, SEGA Saturn due low sales profiles and NDS that is not</span>
<span class="c1"># relevant yet</span>
<span class="n">games20</span> <span class="o">=</span> <span class="n">games20</span><span class="p">[</span><span class="o">~</span><span class="n">games20</span><span class="o">.</span><span class="n">Platform</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="s2">&#34;WS&#34;</span><span class="p">,</span><span class="s2">&#34;DS&#34;</span><span class="p">,</span><span class="s2">&#34;SAT&#34;</span><span class="p">,</span><span class="s2">&#34;SNES&#34;</span><span class="p">,</span><span class="s2">&#34;PSP&#34;</span><span class="p">])]</span>

<span class="c1"># Group and summarize</span>
<span class="n">games20</span> <span class="o">=</span> <span class="n">games20</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">,</span><span class="s2">&#34;Platform&#34;</span><span class="p">])</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="nb">sum</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>\
    <span class="o">.</span><span class="n">sort_values</span><span class="p">([</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">,</span><span class="s2">&#34;Platform&#34;</span><span class="p">],</span> <span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="c1"># Save an Array of Platforms</span>
<span class="n">Platforms</span> <span class="o">=</span> <span class="n">games20</span><span class="o">.</span><span class="n">Platform</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span>

<span class="c1"># Pivot to put in long format</span>
<span class="n">games20</span> <span class="o">=</span> <span class="n">games20</span><span class="o">.</span><span class="n">pivot_table</span><span class="p">(</span><span class="n">values</span><span class="o">=</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">,</span>
                              <span class="n">columns</span><span class="o">=</span><span class="s2">&#34;Platform&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>

<span class="c1"># Assemble lineplot</span>
<span class="n">line20</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Figure</span><span class="p">()</span>
<span class="k">for</span> <span class="n">platform</span> <span class="ow">in</span> <span class="n">Platforms</span><span class="p">:</span>
    <span class="n">line20</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">games20</span><span class="p">[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">],</span> <span class="n">y</span> <span class="o">=</span> <span class="n">games20</span><span class="p">[</span><span class="n">platform</span><span class="p">],</span>
                                <span class="n">name</span><span class="o">=</span><span class="n">platform</span><span class="p">,</span> <span class="n">line_shape</span><span class="o">=</span><span class="s1">&#39;linear&#39;</span><span class="p">))</span>

<span class="c1"># Update layout</span>
<span class="n">line20</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">line20</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">line20</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/lineplot_10.png?format=webpage" title="Lineplot of 2000s" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/lineplot_10.png?format=webpage">
        
    </a>
</p>
<p>The Japanese domain was becoming more and more determined, a situation that the software technology giant, Microsoft, takes as a challenge to enter a new market and start a contest with the PS2.</p>
<blockquote><b>2000</b> - The beginning of the longest rivalry in the console market</blockquote>
<p align= center>
    
</p>
<p>This famous image of Bill Gates with Dwayne Johnson was part of a great marketing strategy carried out by Microsoft, they were willing to do whatever it took to strengthen the presence of Xbox in the market.</p>
<p>Microsoft&rsquo;s vision was to standardize the game <a href="https://en.wikipedia.org/wiki/Xbox_technical_specifications">hardware</a> so that it was as similar as possible to a PC, so they implemented Direct X, an Intel Pentium III, a 7.3GFLOPS Nvidia GPU and an 8GB hard drive, trying to secure a significant advantage over the competitors.</p>
<p>At this time, Nintendo announced the GameCube as a console contender, but it was not very successful, a situation that was neutralized with the sales of the Game Boy Advance within the portable market.</p>
<p>Nevertheless, the PS2 led the first part of the decade in terms of sales, while Xbox got the second place as we saw in the last graph. And of course, that was a very expensive silver medal, according to Vladimir Cole from <i>Joystiq</i>, Forbes estimated around $4 billion in total lost after that trip, but at the same time they proved that they could compete with the <i>Japanese Ruler</i> of that time.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Mask of 2000-2004 games</span>
<span class="n">games2004</span> <span class="o">=</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">Year_of_Release</span> <span class="o">&gt;</span> <span class="mi">1999</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">Year_of_Release</span> <span class="o">&lt;</span> <span class="mi">2005</span><span class="p">)</span>

<span class="c1"># Array to Subset publishers with hightest sales from 2000 to 2004</span>
<span class="n">toppub2004</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">games2004</span><span class="p">]</span><span class="o">.</span><span class="n">groupby</span>\
    <span class="p">([</span><span class="s2">&#34;Publisher&#34;</span><span class="p">])[</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="nb">sum</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>\
    <span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">,</span><span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>

<span class="c1"># New DF with top  Titles per Publisher</span>
<span class="n">toppub</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">games2004</span> <span class="o">&amp;</span> <span class="n">df</span><span class="o">.</span><span class="n">Publisher</span><span class="o">.</span><span class="n">isin</span><span class="p">(</span><span class="n">toppub2004</span><span class="o">.</span><span class="n">Publisher</span><span class="p">)]</span>\
    <span class="o">.</span><span class="n">sort_values</span><span class="p">([</span><span class="s2">&#34;Publisher&#34;</span><span class="p">,</span><span class="s2">&#34;Name&#34;</span><span class="p">])</span>

<span class="c1"># Substitute empty scores with the mean</span>
<span class="n">toppub</span><span class="o">.</span><span class="n">Critic_Score</span> <span class="o">=</span> <span class="n">toppub</span><span class="o">.</span><span class="n">Critic_Score</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">toppub</span><span class="o">.</span><span class="n">Critic_Score</span><span class="o">.</span><span class="n">mean</span><span class="p">())</span>

<span class="c1"># Top 3</span>
<span class="n">toppub3</span> <span class="o">=</span> <span class="n">toppub</span><span class="o">.</span><span class="n">sort_values</span><span class="p">([</span><span class="s2">&#34;Publisher&#34;</span><span class="p">,</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">],</span> <span class="n">ascending</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>\
    <span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">&#34;Publisher&#34;</span><span class="p">)[</span><span class="s2">&#34;Name&#34;</span><span class="p">,</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">,</span><span class="s2">&#34;Publisher&#34;</span><span class="p">,</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">,</span>
                          <span class="s2">&#34;Critic_Score&#34;</span><span class="p">,</span> <span class="s2">&#34;Country&#34;</span><span class="p">,</span><span class="s2">&#34;City&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>\
    <span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="c1"># Bubble plot</span>
<span class="n">bubpub3</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">toppub3</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">&#34;Publisher&#34;</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="s2">&#34;Critic_Score&#34;</span><span class="p">,</span>
                 <span class="n">color</span><span class="o">=</span><span class="s2">&#34;Critic_Score&#34;</span><span class="p">,</span> <span class="n">hover_name</span><span class="o">=</span><span class="s2">&#34;Name&#34;</span><span class="p">,</span>
                 <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">sequential</span><span class="o">.</span><span class="n">Greens</span><span class="p">,</span>
                 <span class="n">labels</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">:</span><span class="s2">&#34;Millions of units sold&#34;</span><span class="p">,</span>
                         <span class="s2">&#34;Critic_Score&#34;</span><span class="p">:</span><span class="s2">&#34;Metacritic value&#34;</span><span class="p">})</span>

<span class="c1"># Add reference line</span>
<span class="n">bubpub3</span><span class="o">.</span><span class="n">add_vrect</span><span class="p">(</span><span class="n">x0</span> <span class="o">=</span> <span class="mf">8.0</span><span class="p">,</span> <span class="n">x1</span> <span class="o">=</span> <span class="mf">8.98</span><span class="p">,</span> <span class="n">y0</span><span class="o">=</span> <span class="mf">0.32</span><span class="p">,</span> <span class="n">y1</span><span class="o">=</span><span class="mf">0.44</span><span class="p">,</span> <span class="n">line_width</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
                  <span class="n">fillcolor</span><span class="o">=</span><span class="s2">&#34;#fff152&#34;</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

<span class="c1"># Master Chief image</span>
<span class="n">bubpub3</span><span class="o">.</span><span class="n">add_layout_image</span><span class="p">(</span>
    <span class="nb">dict</span><span class="p">(</span>
        <span class="n">source</span><span class="o">=</span><span class="s2">&#34;https://media.fortniteapi.io/images/7bf522a34af664a172ce581441985e75/featured.png&#34;</span><span class="p">,</span>
        <span class="n">xref</span><span class="o">=</span><span class="s2">&#34;paper&#34;</span><span class="p">,</span> <span class="n">yref</span><span class="o">=</span><span class="s2">&#34;paper&#34;</span><span class="p">,</span>
        <span class="n">x</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">0.021</span><span class="p">,</span>
        <span class="n">sizex</span><span class="o">=</span><span class="mf">0.4</span><span class="p">,</span> <span class="n">sizey</span><span class="o">=</span><span class="mf">0.4</span><span class="p">,</span>
        <span class="n">xanchor</span><span class="o">=</span><span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="n">yanchor</span><span class="o">=</span><span class="s2">&#34;bottom&#34;</span><span class="p">)</span> <span class="p">)</span>

<span class="c1"># Update layout</span>
<span class="n">bubpub3</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">bubpub3</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">bubpub3</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/scatterplot_11.png" title="Bubblechart of 2000s" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/scatterplot_11.png">
        
    </a>
</p>
<p>In the graph we see that Microsoft, despite not becoming leaders in sales, were positioned by having very good reviews, specifically in Halo, with Metacritics above 95, including its title&rsquo;s sequels.</p>
<p>However, Microsoft&rsquo;s step did not go unnoticed, the launch of <i>Halo: Combat Evolved</i> marked a before and after in the world of online multiplayer FPS, not only because of its online gaming capabilities or because of its smooth joystick mechanism, which was crucial for the attraction of PC FPS players to consoles, but for his amazing character, <i>Master Chief</i> who became an emblem of the brand.</p>
<h3 id="the-non-competitor-takes-the-lead">The &ldquo;Non-competitor&rdquo; takes the lead</h3>
<blockquote><b>2005</b> - Microsoft launch the Xbox 360</blockquote>
<blockquote><b>2006</b> - PS3 and Nintendo Wii are released</blockquote>
<p align= center>
    
</p>
<p>As Microsoft and Sony continued competing for a market with high-definition titles, online connection services like Xbox Live and PSN, and high-capacity hard drives, Nintendo chose to follow a <a href="https://www.blueoceanstrategy.com/what-is-blue-ocean-strategy/">Blue Ocean Strategy</a> after the failure of the GameCube, who tried to compete in the big leagues.</p>
<p>Their strategy consisted of offering something new and innovative, instead of competing to be better in the characteristics offered by the competition, becoming the fastest selling console, reaching to sell 50 million units around the world according to D. Melanson from <a href="https://www.engadget.com 2009-06-12-nintendo-wii-sets-record-as-fastest-selling-console-in-the-us.html">Verizon Media</a>, so this is the best way to describe the Wii console.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Mask of 2005-2010 games</span>
<span class="n">games2010</span> <span class="o">=</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">Year_of_Release</span> <span class="o">&gt;</span> <span class="mi">2004</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">Year_of_Release</span> <span class="o">&lt;</span> <span class="mi">2011</span><span class="p">)</span>

<span class="c1"># Dataframe of games</span>
<span class="n">df2010</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">games2010</span><span class="p">]</span>

<span class="c1"># Excluding data to focus on new consoles</span>
<span class="n">df2010</span> <span class="o">=</span> <span class="n">df2010</span><span class="p">[</span><span class="n">df2010</span><span class="o">.</span><span class="n">Platform</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="s1">&#39;Wii&#39;</span><span class="p">,</span><span class="s1">&#39;DS&#39;</span><span class="p">,</span><span class="s1">&#39;X360&#39;</span><span class="p">,</span><span class="s1">&#39;PS3&#39;</span><span class="p">])]</span>\
        <span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s2">&#34;Platform&#34;</span><span class="p">,</span><span class="s2">&#34;Year_str&#34;</span><span class="p">])[</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="nb">sum</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>\
        <span class="o">.</span><span class="n">sort_values</span><span class="p">([</span><span class="s2">&#34;Year_str&#34;</span><span class="p">,</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">])</span>

<span class="c1"># Plot of Sales by Platform</span>
<span class="n">bar2010</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">df2010</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&#34;Platform&#34;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s2">&#34;Year_str&#34;</span><span class="p">,</span>
             <span class="n">barmode</span><span class="o">=</span><span class="s2">&#34;group&#34;</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;Year_str&#34;</span><span class="p">:</span><span class="s2">&#34;Year&#34;</span><span class="p">,</span>
                                      <span class="s2">&#34;Global_Sales&#34;</span><span class="p">:</span><span class="s2">&#34;Millions of Units&#34;</span><span class="p">},</span>
             <span class="n">pattern_shape</span><span class="o">=</span><span class="s2">&#34;Platform&#34;</span><span class="p">,</span> <span class="n">pattern_shape_sequence</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="s2">&#34;.&#34;</span><span class="p">],</span>
             <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;#00DEB7&#34;</span><span class="p">,</span><span class="s2">&#34;#0082C2&#34;</span><span class="p">,</span><span class="s2">&#34;#1333A7&#34;</span><span class="p">,</span><span class="s2">&#34;#5849B6&#34;</span><span class="p">])</span>

<span class="c1"># Update layout</span>
<span class="n">bar2010</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">bar2010</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">bar2010</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/barplot_12.png?format=webpage" title="Barchart of 2000s" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/barplot_12.png?format=webpage">
        
    </a>
</p>
<p>As you can see, from the start of the Wii sales, the strategy of Nintendo began to flourish, surpassing the sales of its rivals by 4 years in a row.</p>
<p>An interesting aspect of Nintendo among the others, is that the success of their sales was due to exclusive titles involving their unique accessories with motion sensors.</p>
<p>Referring to sales, among the most successful titles are the following.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Dataframe for table with best-selling games</span>
<span class="n">table_data</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">games2010</span><span class="p">]</span>
<span class="n">table_data</span> <span class="o">=</span> <span class="n">table_data</span><span class="p">[</span><span class="n">table_data</span><span class="o">.</span><span class="n">Platform</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="s1">&#39;Wii&#39;</span><span class="p">,</span><span class="s1">&#39;DS&#39;</span><span class="p">,</span><span class="s1">&#39;X360&#39;</span><span class="p">,</span><span class="s1">&#39;PS3&#39;</span><span class="p">])]</span>\
                <span class="o">.</span><span class="n">sort_values</span><span class="p">([</span><span class="s2">&#34;Year_str&#34;</span><span class="p">,</span><span class="s2">&#34;Platform&#34;</span><span class="p">,</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">],</span> <span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>\
                <span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>\
                <span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s2">&#34;Platform&#34;</span><span class="p">,</span><span class="s2">&#34;Year_str&#34;</span><span class="p">])</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>\
                <span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;Platform&#34;</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>

<span class="n">table_data</span> <span class="o">=</span> <span class="n">table_data</span><span class="p">[[</span><span class="s2">&#34;Year_str&#34;</span><span class="p">,</span><span class="s2">&#34;Name&#34;</span><span class="p">,</span><span class="s2">&#34;Publisher&#34;</span><span class="p">,</span><span class="s2">&#34;Platform&#34;</span><span class="p">,</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">]]</span>


<span class="c1"># Plot of Table</span>
<span class="n">table10</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Figure</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">[</span><span class="n">go</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span>
    <span class="n">header</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">values</span><span class="o">=</span><span class="nb">list</span><span class="p">([</span><span class="s2">&#34;Year&#34;</span><span class="p">,</span><span class="s2">&#34;Game title&#34;</span><span class="p">,</span> <span class="s2">&#34;Platform&#34;</span><span class="p">,</span>
                             <span class="s2">&#34;Publisher&#34;</span><span class="p">,</span><span class="s2">&#34;Units Sold&#34;</span><span class="p">]),</span>
                <span class="n">fill_color</span><span class="o">=</span><span class="s1">&#39;#5849B6&#39;</span><span class="p">,</span>
                <span class="n">align</span><span class="o">=</span><span class="s2">&#34;center&#34;</span><span class="p">),</span>
    <span class="n">cells</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">values</span><span class="o">=</span><span class="p">[</span><span class="n">table_data</span><span class="o">.</span><span class="n">Year_str</span><span class="p">,</span> <span class="n">table_data</span><span class="o">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">table_data</span><span class="o">.</span><span class="n">Platform</span><span class="p">,</span>
                       <span class="n">table_data</span><span class="o">.</span><span class="n">Publisher</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="n">table_data</span><span class="o">.</span><span class="n">Global_Sales</span> <span class="o">*</span>
                                                      <span class="mi">1000000</span><span class="p">,</span><span class="mi">0</span><span class="p">)],</span>
               <span class="n">fill_color</span><span class="o">=</span><span class="s1">&#39;lavender&#39;</span><span class="p">,</span>
               <span class="n">align</span><span class="o">=</span><span class="nb">list</span><span class="p">([</span><span class="s1">&#39;center&#39;</span><span class="p">,</span> <span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span> <span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="s1">&#39;right&#39;</span><span class="p">])))])</span>

<span class="c1"># Update layout</span>
<span class="n">table10</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">table10</span><span class="o">.</span><span class="n">update_traces</span><span class="p">({</span><span class="s2">&#34;header&#34;</span><span class="p">:{</span><span class="s2">&#34;font.color&#34;</span><span class="p">:</span><span class="s2">&#34;#fcfcfc&#34;</span><span class="p">,</span>
                                 <span class="s2">&#34;font.size&#34;</span><span class="p">:</span><span class="n">fontimg</span><span class="o">+</span><span class="mi">3</span><span class="p">}})</span>
<span class="n">table10</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">table10</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/table_13.png?format=webpage" title="Table of 2000s" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/table_13.png?format=webpage">
        
    </a>
</p>
<p>Four of Wii&rsquo;s five most successful titles involve Nintendo Publishers, among its most famous IPs were Mario Kart and Wii Sports.</p>
<p>This innovation marked an era of hardware extensions and motion sensors, a situation that Activision was able to take advantage of, when acquiring <a href="https://www.gamesindustry.biz/articles/sec-filing-shows-activision-paid-100m-for-redoctane">Red Octane</a>, reaching around 13 titles of the IP known as Guitar Hero until 2009, being sold with its flagship item that imitated a Gibson SG.</p>
<h3 id="prevalence-of-social-gaming">Prevalence of Social Gaming</h3>
<p>After the success of some local-gaming titles, the decade from 2010 to 2020 took a more competitive or cooperative way in certain cases, guided by a new era of interconnectivity and mobility.</p>
<p>This reason motivated developers with extraordinary visions to create not only multiplayer, but also online content that maintains high audience rates.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Subset games from 2010 to 2015</span>
<span class="n">games2010</span> <span class="o">=</span> <span class="n">df</span><span class="p">[(</span><span class="n">df</span><span class="o">.</span><span class="n">Year_of_Release</span> <span class="o">&gt;</span> <span class="mi">2009</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">Year_of_Release</span> <span class="o">&lt;</span> <span class="mi">2016</span><span class="p">)]</span>\
                <span class="o">.</span><span class="n">sort_values</span><span class="p">([</span><span class="s2">&#34;Year_str&#34;</span><span class="p">,</span><span class="s2">&#34;Platform&#34;</span><span class="p">,</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">])</span>

<span class="c1"># Subset games with more sales from 2010 to 2015</span>
<span class="n">topgames2010</span> <span class="o">=</span> <span class="n">games2010</span><span class="o">.</span><span class="n">sort_values</span><span class="p">([</span><span class="s2">&#34;Genre&#34;</span><span class="p">,</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">],</span> <span class="n">ascending</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>\
      <span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">&#34;Genre&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>\
        <span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>

<span class="n">topgames2010</span> <span class="o">=</span> <span class="n">topgames2010</span><span class="p">[[</span><span class="s2">&#34;Year_of_Release&#34;</span><span class="p">,</span><span class="s2">&#34;Name&#34;</span><span class="p">,</span><span class="s2">&#34;Platform&#34;</span><span class="p">,</span><span class="s2">&#34;Publisher&#34;</span><span class="p">,</span><span class="s2">&#34;Genre&#34;</span><span class="p">,</span>
                             <span class="s2">&#34;Global_Sales&#34;</span><span class="p">]]</span>

<span class="c1"># Barplot Base</span>
<span class="n">bargen10</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">topgames2010</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">&#34;Genre&#34;</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">,</span> <span class="n">orientation</span><span class="o">=</span><span class="s2">&#34;h&#34;</span><span class="p">,</span>
                  <span class="n">text</span><span class="o">=</span><span class="s2">&#34;Name&#34;</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;Name&#34;</span><span class="p">:</span><span class="s2">&#34;Title&#34;</span><span class="p">,</span>
                                       <span class="s2">&#34;Global_Sales&#34;</span><span class="p">:</span><span class="s2">&#34;Millions of units sold&#34;</span><span class="p">},</span>
                  <span class="n">color</span><span class="o">=</span><span class="s2">&#34;Genre&#34;</span><span class="p">,</span>
                  <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;#8B58B0&#34;</span><span class="p">,</span><span class="s2">&#34;#58B081&#34;</span><span class="p">,</span><span class="s2">&#34;#B0B058&#34;</span><span class="p">,</span><span class="s2">&#34;#535353&#34;</span><span class="p">,</span>
                                           <span class="s2">&#34;#B05858&#34;</span><span class="p">,</span><span class="s2">&#34;#58B09E&#34;</span><span class="p">,</span><span class="s2">&#34;#B05890&#34;</span><span class="p">,</span><span class="s2">&#34;#587FB0&#34;</span><span class="p">,</span>
                                           <span class="s2">&#34;#B05858&#34;</span><span class="p">,</span><span class="s2">&#34;#58B0AA&#34;</span><span class="p">,</span><span class="s2">&#34;#686868&#34;</span><span class="p">,</span><span class="s2">&#34;#C3A149&#34;</span><span class="p">])</span>
<span class="n">bargen10</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">textposition</span><span class="o">=</span><span class="s1">&#39;inside&#39;</span><span class="p">,</span>
                       <span class="n">marker_line_color</span><span class="o">=</span><span class="s1">&#39;#404040&#39;</span><span class="p">,</span>
                       <span class="n">textfont</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span><span class="s2">&#34;family&#34;</span><span class="p">:</span> <span class="s2">&#34;segoe ui&#34;</span><span class="p">},</span>
                        <span class="n">marker_line_width</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.7</span><span class="p">)</span>

<span class="c1"># Update layout</span>
<span class="n">bargen10</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="n">bargen10</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">bargen10</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/barplot_14.png?format=webpage" title="Barchart of 2010s" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/barplot_14.png?format=webpage">
        
    </a>
</p>
<p>Between 2010 and 2015, the best-selling title was Kinect Adventures for Xbox 360, which had a focus on enhancing multiplayer gameplay and taking advantage of the latest technological innovation of the moment, the Microsoft‚Äôs Kinect.</p>
<p>The second best-selling title at that time was Grand Theft Auto V for PS3, which to this day continues to prevail as one of the online systems with the largest number of users in the industry. Their vision went beyond creating an Open-World game, they had the intention of creating a dynamic online content structure, which provides seasonal content.</p>
<p>This type of model also motivated Publishers such as Epic Games and Activision, to innovate but in this case not selling games but focusing on aesthetics, where game content is offered as an extra to the online service without having to be paid as a <a href="https://en.wikipedia.org/wiki/Downloadable_content">DLC</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#pubgen</span>
<span class="c1"># Publishers with more sales in history</span>
<span class="n">toppubarray</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">&#34;Publisher&#34;</span><span class="p">)[</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="nb">sum</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>\
                <span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;Global_Sales&#34;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span> <span class="kc">False</span><span class="p">)</span>\
                <span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">Genre</span><span class="o">.</span><span class="n">unique</span><span class="p">()))[</span><span class="s2">&#34;Publisher&#34;</span><span class="p">]</span>

<span class="c1"># Extract publisher from raw df</span>
<span class="n">puball</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">Publisher</span><span class="o">.</span><span class="n">isin</span><span class="p">(</span><span class="n">toppubarray</span><span class="p">)]</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s2">&#34;Publisher&#34;</span><span class="p">,</span><span class="s2">&#34;Name&#34;</span><span class="p">,</span><span class="s2">&#34;Genre&#34;</span><span class="p">])</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="nb">sum</span><span class="p">)</span>

<span class="c1"># Add a column of 1s</span>
<span class="n">puball</span><span class="p">[</span><span class="s2">&#34;counter&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">puball</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

<span class="c1"># Create the pivot table</span>
<span class="n">puball</span> <span class="o">=</span> <span class="n">puball</span><span class="o">.</span><span class="n">pivot_table</span><span class="p">(</span><span class="s2">&#34;counter&#34;</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="s2">&#34;Publisher&#34;</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="s2">&#34;Genre&#34;</span><span class="p">,</span>
                            <span class="n">aggfunc</span><span class="o">=</span><span class="s2">&#34;sum&#34;</span><span class="p">)</span>
<span class="c1"># Display rounded values</span>
<span class="n">pd</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">float_format</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="si">{:,.0f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span>


<span class="n">pubmatrix</span> <span class="o">=</span> <span class="n">ff</span><span class="o">.</span><span class="n">create_annotated_heatmap</span><span class="p">(</span><span class="n">puball</span><span class="o">.</span><span class="n">values</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="n">puball</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span>
                                  <span class="n">y</span><span class="o">=</span><span class="n">puball</span><span class="o">.</span><span class="n">index</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span>
                                  <span class="n">annotation_text</span><span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">around</span><span class="p">(</span><span class="n">puball</span><span class="o">.</span><span class="n">values</span><span class="p">,</span> <span class="n">decimals</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span>
                                  <span class="n">colorscale</span><span class="o">=</span><span class="s1">&#39;sunset&#39;</span><span class="p">)</span>

<span class="c1"># Update layout</span>
<span class="n">pubmatrix</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>

<span class="c1"># Extra annotation to avoid overlapping of layers</span>
<span class="n">pubmatrix</span><span class="o">.</span><span class="n">add_annotation</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">author</span><span class="p">,</span>
                        <span class="n">align</span><span class="o">=</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="n">visible</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">xref</span><span class="o">=</span><span class="s2">&#34;paper&#34;</span><span class="p">,</span> <span class="n">yref</span><span class="o">=</span><span class="s2">&#34;paper&#34;</span><span class="p">,</span>
                         <span class="n">x</span><span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span> <span class="o">-</span><span class="mf">0.11</span><span class="p">,</span> <span class="n">showarrow</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">font</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;size&#34;</span><span class="p">:</span><span class="n">fontimg</span><span class="o">-</span><span class="mi">1</span><span class="p">})</span>
<span class="n">pubmatrix</span><span class="o">.</span><span class="n">update_annotations</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
<span class="n">pubmatrix</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p align="center">
<a class="lightgallery" href="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/matrix_15.png?format=webpage" title="Historical Matrix" data-thumbnail="https://raw.githubusercontent.com/robguilarr/videogames-eda/main/videogame_analysis/plots-images/matrix_15.png?format=webpage">
        
    </a>
</p>
<p>The fact that every day more <i>Free to Play</i> games are announced, does not indicate that this is the exclusive focus companies will have on the industry now on. Beyond this, as we see in the previous graph, each of the most recognized Publishers in history has its own style in exclusive series, despite having titles in many genres.</p>
<p>Even today, large companies like Microsoft offer services such as Xbox GamePass, with subscriptions that offer big catalogs of games, which even include titles from Independent Developers, supporting their growth through advertising systems, helping to increasingly expand a growing industry.</p>
<hr>
<h2 id="summary">Summary</h2>
<p>The video game industry, beyond having started as a simple experiment at MIT, is a lifestyle for many. Like any market, it has had its moments of glory and its difficulties, but if we can rescue something, it is that the secret of its success lies in the emotional bond it generates with its customers.</p>
<p>Through this article, my goal is to use data tools to inform the reader about curious events, which perhaps they did not know. I want to thank you for taking the time to read carefully. As a curious detail, there are no <strong>easter eggs</strong> üòâ Good luck!</p>
<hr>
<h1 id="additional-information">Additional Information</h1>
<ul>
<li>
<p><b>About the article</b></p>
<p>This infographic article was adapted to a general public, I hope you enjoyed it. In case you are interested in learning more about the development of the script, I invite you to the contact section in my <b>About Page</b>, and with pleasure we can connect.</p>
</li>
<li>
<p><b>Related Content</b></p>
<p>As a recommendation I suggest a look at <a href="https://www.visualcapitalist.com/50-years-gaming-history-revenue-stream/">this</a> great article, published by
Omri Wallach on the Visual Capitalist infographic page, where many interesting
details about the industry&rsquo;s history are covered.</p>
</li>
<li>
<p><b>Datasets</b></p>
<ul>
<li><a href="https://www.kaggle.com/sidtwr/videogames-sales-dataset?select=Video_Games_Sales_as_at_22_Dec_2016.csv">Videogames Dataset</a></li>
<li><a href="https://www.kaggle.com/andreshg/videogamescompaniesregions?select=video-games-developers.csv">Videogames Developers Regions</a></li>
<li><a href="https://www.kaggle.com/andreshg/videogamescompaniesregions?select=indie-games-developers.csv">Indie Developers Regions</a></li>
</ul>
</li>
</ul>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><b>Footnote:</b> Specific datasets contain information from Publishers, which they were named in the source attribute as Developers, but not in all cases. For more details on the data transformation, please visit my Github <a href="https://github.com/robguilarr/videogames-eda/blob/main/videogame_analysis/ETL_script.py">repository</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>]]></description>
</item>
<item>
    <title>Game Development Team Structure</title>
    <link>https://robguilar.com/posts/gamedev_structure/</link>
    <pubDate>Mon, 29 Nov 2021 21:57:40 &#43;0800</pubDate><guid>https://robguilar.com/posts/gamedev_structure/</guid>
    <description><![CDATA[<p>In the next portal, you will find a frame with a diagram. This one displays the distinct roles and sub-roles in a video game development team.</p>
<p>This section intends that as you read the <strong>Stakeholders</strong> section in each of my projects, you can learn about the operations, roles, and skills that each team member must possess. For this, you can read the details at the bottom of the card made for each.</p>
<p>Important: not all of them are a necessity for development, depending on the scale of the project some are required and others are not. Also, within different branches, you will find positions that may only be necessary for mobile game development, in addition to PR and marketing roles.</p>
<hr>
<h3 id="navigation-instructions">Navigation instructions</h3>
<ul>
<li><i class="fas fa-mouse fa-fw"></i>&nbsp;Keep pressed left click to <strong>navigate</strong> inside the frame.</li>
<li><i class="fas fa-arrows-alt-v fa-fw"></i>&nbsp;Keep pressed Ctrl + Scroll to <strong>zoom</strong> in/out.</li>
</ul>
<hr>
<h3 id="more-content--resources">More content &amp; resources</h3>
<ul>
<li>The Game Designer&rsquo;s Playbook by Samantha Stahlke and Pejman Mirza-Babaei at <a href="https://global.oup.com/academic/product/the-game-designers-playbook-9780198845911?lang=en&amp;cc=nl" target="_blank" rel="noopener noreffer">Oxford University Press</a>.</li>
<li>Introductory and visual explained resources at <a href="https://www.askgamedev.com/category/game-design/" target="_blank" rel="noopener noreffer">Ask Gamedev</a>.</li>
</ul>
<hr>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">For a more engaging experience, the <strong>desktop</strong> mode is highly recommended. In such case the viewer doesn‚Äôt load, you can access my Figma content <strong><a href="https://www.figma.com/@robguilarr" target="_blank" rel="noopener noreffer">here</a></strong>.</div>
        </div>
    </div>
<iframe style="border: 1px solid rgba(0, 0, 0, 0.1);" width="100%" height="750" src="https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2FOpjP1EKAhJRupQqxqQeyNM%2FGame-Development-Team-Structure%3Fnode-id%3D0%253A1" allowfullscreen></iframe>
]]></description>
</item>
<item>
    <title>Cloud Service Architecture for NLP in Google Cloud</title>
    <link>https://robguilar.com/posts/gcp_academicsolution/</link>
    <pubDate>Mon, 04 Oct 2021 21:57:40 &#43;0800</pubDate><guid>https://robguilar.com/posts/gcp_academicsolution/</guid>
    <description><![CDATA[<h3 id="summary">Summary:</h3>
<ul>
<li>
<p>This academic article was developed through my postgraduate course, <i>DAT-03 Data Analysis in Big Data Environments</i>, which presents a business case in which a company is interested in combining and migrating relational databases in <b>Microsoft SQL Server</b> and <b>Oracle DB</b>. Given the need to feed them with an NLP system output of social networks such as Instagram, Telegram, and Facebook Messenger.</p>
</li>
<li>
<p>Initially, the vulnerabilities that the company has when managing its data in a Local Storage are shown, where it is compared with the advantages of implementing a <b>Cloud Service</b>. This service is compared with others such as Microsoft Azure and Amazon Cloud Services, showing why this solution is the one that best suits the business case.</p>
</li>
<li>
<p>An architecture diagram was designed, covering the required APIs to the ingestion, storage, processing, and loading of the data in BI tools to ease access to the end-user.</p>
</li>
<li>
<p>Finally, financial aspects are covered in terms of operating costs for the proposed solution.</p>
</li>
</ul>
<hr>
<p>In case you want to access it, next you will find a link where it was uploaded to my LinkedIn. Click <a href="https://www.linkedin.com/in/robguilarr/overlay/1635470662045/single-media-viewer/">HERE</a> to access or download.</p>
<hr>
<p align=center>
    <a class="lightgallery" href="/images/posts/gcpcover.jpg" title="/images/posts/gcpcover.jpg" data-thumbnail="/images/posts/gcpcover.jpg">
        
    </a>
</p>
]]></description>
</item>
</channel>
</rss>
